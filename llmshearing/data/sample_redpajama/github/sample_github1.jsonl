{"text": "<ion-view class=\"profile-likes\" view-title=\"\u0e2a\u0e19\u0e17\u0e19\u0e32\" cache-view=\"false\">\n    <ion-nav-buttons side=\"right\">\n        <!--<a class=\"button button-icon\" ui-sref=\"app.shop.cart\">\n            <i class=\"icon ion-ios-cart\"><span class=\"badge badge-assertive badge-cart\">{{countProduct.getCountProduct()}}</span></i>\n        </a>-->\n    </ion-nav-buttons>\n    <ion-content>\n        <ion-list ng-if=\"user\">\n            <ion-item class=\"item-remove-animate item-avatar item-icon-right\" ng-repeat=\"chat in chats | filter: { users : { _id : user._id } }\"\n                type=\"item-text-wrap\" ui-sref=\"app.shop.cart-chatdetail({chatId: chat._id})\">\n                <img ng-repeat=\"user in chat.users | filter: { _id : '!' + user._id}\" ng-src=\"{{user.profileImageURL}}\">\n                <h2 ng-repeat=\"user in chat.users | filter: { _id : '!' + user._id}\">{{user.displayName}}</h2>\n                <p>{{chat.lastText}}</p>\n                <i class=\"icon ion-chevron-right icon-accessory\"></i>\n\n                <!--<ion-option-button class=\"button-assertive\" ng-click=\"remove(chat)\">\n          Delete\n        </ion-option-button>-->\n            </ion-item>\n        </ion-list>\n    </ion-content>\n    <!--<ion-footer-bar>\n        <i class=\"icon ion-android-person-add\" style=\"font-size: 30px;\" ui-sref=\"app.listfriend\"></i>\n    </ion-footer-bar>-->\n</ion-view>", "meta": {"content_hash": "e8054ee1113ecb82112f1d807f68e13b", "timestamp": "", "source": "github", "line_count": 25, "max_line_length": 144, "avg_line_length": 53.72, "alnum_prop": 0.5606850335070737, "repo_name": "secretmoo35/ThamApp", "id": "0790a254dbf7d6b32629055c2467fc8cfe0cc33c", "size": "1353", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "www/views/app/shop/cart-chat.html", "mode": "33188", "license": "mit", "language": [{"name": "C", "bytes": "638"}, {"name": "C#", "bytes": "155126"}, {"name": "C++", "bytes": "266969"}, {"name": "CSS", "bytes": "916274"}, {"name": "HTML", "bytes": "164838"}, {"name": "Java", "bytes": "469045"}, {"name": "JavaScript", "bytes": "7425708"}, {"name": "Objective-C", "bytes": "483228"}, {"name": "QML", "bytes": "2765"}, {"name": "Shell", "bytes": "64"}]}}
{"text": "namespace foundation    { class Dictionary; }\nnamespace foundation    { class DictionaryArray; }\nnamespace renderer      { class EnvironmentEDF; }\nnamespace renderer      { class ParamArray; }\n\nnamespace renderer\n{\n\n//\n//  OSL environment EDF factory.\n//\n\nclass APPLESEED_DLLSYMBOL OSLEnvironmentEDFFactory\n  : public IEnvironmentEDFFactory\n{\n  public:\n    // Return a string identifying this environment EDF model.\n    virtual const char* get_model() const APPLESEED_OVERRIDE;\n\n    // Return metadata for this environment EDF model.\n    virtual foundation::Dictionary get_model_metadata() const APPLESEED_OVERRIDE;\n\n    // Return metadata for the inputs of this environment EDF model.\n    virtual foundation::DictionaryArray get_input_metadata() const APPLESEED_OVERRIDE;\n\n    // Create a new environment EDF instance.\n    virtual foundation::auto_release_ptr<EnvironmentEDF> create(\n        const char*         name,\n        const ParamArray&   params) const APPLESEED_OVERRIDE;\n\n    // Static variant of the create() method above.\n    static foundation::auto_release_ptr<EnvironmentEDF> static_create(\n        const char*         name,\n        const ParamArray&   params);\n};\n\n}       // namespace renderer\n\n#endif  // !APPLESEED_RENDERER_MODELING_ENVIRONMENTEDF_OSLENVIRONMENTEDF_H\n", "meta": {"content_hash": "6b1ad840c4d42561eee020ad8a7a9d5d", "timestamp": "", "source": "github", "line_count": 39, "max_line_length": 86, "avg_line_length": 32.97435897435897, "alnum_prop": 0.7192846034214619, "repo_name": "aiivashchenko/appleseed", "id": "ea7934fd67a193dccfcb316ecc678e66aa7fbbb8", "size": "3068", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "src/appleseed/renderer/modeling/environmentedf/oslenvironmentedf.h", "mode": "33188", "license": "mit", "language": [{"name": "Batchfile", "bytes": "211"}, {"name": "C", "bytes": "1395946"}, {"name": "C++", "bytes": "9111244"}, {"name": "CMake", "bytes": "226630"}, {"name": "HTML", "bytes": "38058"}, {"name": "Makefile", "bytes": "717"}, {"name": "Objective-C", "bytes": "6087"}, {"name": "Python", "bytes": "312469"}, {"name": "Shell", "bytes": "2798"}]}}
{"text": "<?php\n\n/**\n * @class  messageAdminController\n * @author NAVER (developers@xpressengine.com)\n * @brief admin controller class of message module\n */\nclass messageAdminController extends message\n{\n\t/**\n\t * @brief Initialization\n\t */\n\tfunction init()\n\t{\n\t}\n\n\t/**\n\t * @brief Configuration\n\t */\n\tfunction procMessageAdminInsertConfig()\n\t{\n\t\t// Get information\n\t\t$args = Context::gets('skin', 'mskin', 'colorset', 'mcolorset');\n\t\t// Create a module Controller object\n\t\t$oModuleController = getController('module');\n\t\t$output = $oModuleController->insertModuleConfig('message',$args);\n\t\tif(!$output->toBool()) return $output;\n\n\t\t$this->setMessage('success_updated');\n\n\t\t$returnUrl = Context::get('success_return_url') ? Context::get('success_return_url') : getNotEncodedUrl('', 'module', 'admin', 'act', 'dispMessageAdminConfig');\n\t\t$this->setRedirectUrl($returnUrl);\n\t}\n}\n/* End of file message.admin.controller.php */\n/* Location: ./modules/message/message.admin.controller.php */\n", "meta": {"content_hash": "baeba9f746d930a97cf7fe83b7ea60d7", "timestamp": "", "source": "github", "line_count": 36, "max_line_length": 162, "avg_line_length": 27.083333333333332, "alnum_prop": 0.6964102564102564, "repo_name": "talkwithraon/XE4KAIST", "id": "169da556c462f689171f673c63e8048e8ba7be2e", "size": "1027", "binary": false, "copies": "38", "ref": "refs/heads/master", "path": "xe4kaist/modules/message/message.admin.controller.php", "mode": "33188", "license": "apache-2.0", "language": [{"name": "ApacheConf", "bytes": "2358"}, {"name": "CSS", "bytes": "728319"}, {"name": "HTML", "bytes": "1286170"}, {"name": "JavaScript", "bytes": "2354460"}, {"name": "PHP", "bytes": "4750065"}]}}
{"text": "require 'spec_helper'\n\ndescribe Spree::Payment do\n  let(:order) { Spree::Order.create }\n\n  let(:gateway) do\n    gateway = Spree::Gateway::Bogus.new(:environment => 'test', :active => true)\n    gateway.stub :source_required => true\n    gateway\n  end\n\n  let(:card) do\n    mock_model(Spree::CreditCard, :number => \"4111111111111111\",\n                                  :has_payment_profile? => true)\n  end\n\n  let(:payment) do\n    payment = Spree::Payment.new\n    payment.source = card\n    payment.order = order\n    payment.payment_method = gateway\n    payment\n  end\n\n  let(:amount_in_cents) { (payment.amount * 100).round }\n\n  let!(:success_response) do\n    double('success_response', :success? => true,\n                             :authorization => '123',\n                             :avs_result => { 'code' => 'avs-code' },\n                             :cvv_result => { 'code' => 'cvv-code', 'message' => \"CVV Result\"})\n  end\n\n  let(:failed_response) { double('gateway_response', :success? => false) }\n\n  before(:each) do\n    # So it doesn't create log entries every time a processing method is called\n    payment.log_entries.stub(:create!)\n  end\n\n  context '#uncaptured_amount' do\n    it \"sets uncaptured amount on save\" do\n      expect(payment.uncaptured_amount).to eq(0)\n      payment.save\n      expect(payment.uncaptured_amount).to eq(payment.amount)\n    end\n  end\n\n  context 'validations' do\n    it \"returns useful error messages when source is invalid\" do\n      payment.source = Spree::CreditCard.new\n      payment.should_not be_valid\n      cc_errors = payment.errors['Credit Card']\n      cc_errors.should include(\"Number can't be blank\")\n      cc_errors.should include(\"Month is not a number\")\n      cc_errors.should include(\"Year is not a number\")\n      cc_errors.should include(\"Verification Value can't be blank\")\n    end\n  end\n\n  # Regression test for https://github.com/spree/spree/pull/2224\n  context 'failure' do\n    it 'should transition to failed from pending state' do\n      payment.state = 'pending'\n      payment.failure\n      payment.state.should eql('failed')\n    end\n\n    it 'should transition to failed from processing state' do\n      payment.state = 'processing'\n      payment.failure\n      payment.state.should eql('failed')\n    end\n\n  end\n\n  context 'invalidate' do\n    it 'should transition from checkout to invalid' do\n      payment.state = 'checkout'\n      payment.invalidate\n      payment.state.should eq('invalid')\n    end\n  end\n\n  context \"processing\" do\n    before do\n      payment.stub(:update_order)\n      payment.stub(:create_payment_profile)\n    end\n\n    describe \"#process!\" do\n      it \"should purchase if with auto_capture\" do\n        payment.payment_method.should_receive(:auto_capture?).and_return(true)\n        payment.should_receive(:purchase!)\n        payment.process!\n      end\n\n      it \"should authorize without auto_capture\" do\n        payment.payment_method.should_receive(:auto_capture?).and_return(false)\n        payment.should_receive(:authorize!)\n        payment.process!\n      end\n\n      it \"should make the state 'processing'\" do\n        payment.should_receive(:started_processing!)\n        payment.process!\n      end\n\n      it \"should invalidate if payment method doesnt support source\" do\n        payment.payment_method.should_receive(:supports?).with(payment.source).and_return(false)\n        expect { payment.process!}.to raise_error(Spree::Core::GatewayError)\n        payment.state.should eq('invalid')\n      end\n\n    end\n\n    describe \"#authorize!\" do\n      it \"should call authorize on the gateway with the payment amount\" do\n        payment.payment_method.should_receive(:authorize).with(amount_in_cents,\n                                                               card,\n                                                               anything).and_return(success_response)\n        payment.authorize!\n      end\n\n      it \"should call authorize on the gateway with the currency code\" do\n        payment.stub :currency => 'GBP'\n        payment.payment_method.should_receive(:authorize).with(amount_in_cents,\n                                                               card,\n                                                               hash_including({:currency => \"GBP\"})).and_return(success_response)\n        payment.authorize!\n      end\n\n      it \"should log the response\" do\n        payment.log_entries.should_receive(:create!).with(:details => anything)\n        payment.authorize!\n      end\n\n      context \"when gateway does not match the environment\" do\n        it \"should raise an exception\" do\n          gateway.stub :environment => \"foo\"\n          expect { payment.authorize! }.to raise_error(Spree::Core::GatewayError)\n        end\n      end\n\n      context \"if successful\" do\n        before do\n          payment.payment_method.should_receive(:authorize).with(amount_in_cents,\n                                                                 card,\n                                                                 anything).and_return(success_response)\n        end\n\n        it \"should store the response_code, avs_response and cvv_response fields\" do\n          payment.authorize!\n          payment.response_code.should == '123'\n          payment.avs_response.should == 'avs-code'\n          payment.cvv_response_code.should == 'cvv-code'\n          payment.cvv_response_message.should == 'CVV Result'\n        end\n\n        it \"should make payment pending\" do\n          payment.should_receive(:pend!)\n          payment.authorize!\n        end\n      end\n\n      context \"if unsuccessful\" do\n        it \"should mark payment as failed\" do\n          gateway.stub(:authorize).and_return(failed_response)\n          payment.should_receive(:failure)\n          payment.should_not_receive(:pend)\n          lambda {\n            payment.authorize!\n          }.should raise_error(Spree::Core::GatewayError)\n        end\n      end\n    end\n\n    describe \"#purchase!\" do\n      it \"should call purchase on the gateway with the payment amount\" do\n        gateway.should_receive(:purchase).with(amount_in_cents, card, anything).and_return(success_response)\n        payment.purchase!\n      end\n\n      it \"should log the response\" do\n        payment.log_entries.should_receive(:create!).with(:details => anything)\n        payment.purchase!\n      end\n\n      context \"when gateway does not match the environment\" do\n        it \"should raise an exception\" do\n          gateway.stub :environment => \"foo\"\n          expect { payment.purchase!  }.to raise_error(Spree::Core::GatewayError)\n        end\n      end\n\n      context \"if successful\" do\n        before do\n          payment.payment_method.should_receive(:purchase).with(amount_in_cents,\n                                                                card,\n                                                                anything).and_return(success_response)\n        end\n\n        it \"should store the response_code and avs_response\" do\n          payment.purchase!\n          payment.response_code.should == '123'\n          payment.avs_response.should == 'avs-code'\n        end\n\n        it \"should make payment complete\" do\n          payment.should_receive(:complete!)\n          payment.purchase!\n        end\n\n        it \"should log a capture event\" do\n          payment.purchase!\n          expect(payment.capture_events.count).to eq(1)\n          expect(payment.capture_events.first.amount).to eq(payment.amount)\n        end\n\n        it \"should set the uncaptured amount to 0\" do\n          payment.purchase!\n          expect(payment.uncaptured_amount).to eq(0)\n        end\n      end\n\n      context \"if unsuccessful\" do\n        before do\n          gateway.stub(:purchase).and_return(failed_response)\n          payment.should_receive(:failure)\n          payment.should_not_receive(:pend)\n        end\n\n        it \"should make payment failed\" do\n          expect { payment.purchase! }.to raise_error(Spree::Core::GatewayError)\n        end\n\n        it \"should not log a capture event\" do\n          expect { payment.purchase! }.to raise_error(Spree::Core::GatewayError)\n          expect(payment.capture_events.count).to eq(0)\n        end\n      end\n    end\n\n    describe \"#capture!\" do\n      context \"when payment is pending\" do\n        before do\n          payment.amount = 100\n          payment.state = 'pending'\n          payment.response_code = '12345'\n        end\n\n        context \"if successful\" do\n          before do\n            payment.payment_method.should_receive(:capture).with(payment.money.money.cents, payment.response_code, anything).and_return(success_response)\n          end\n\n          it \"should make payment complete\" do\n            payment.should_receive(:complete!)\n            payment.capture!\n          end\n\n          it \"logs capture events\" do\n            payment.capture!\n            expect(payment.capture_events.count).to eq(1)\n            expect(payment.capture_events.first.amount).to eq(payment.amount)\n          end\n        end\n\n        context \"capturing a partial amount\" do\n          it \"logs capture events\" do\n            payment.capture!(5000)\n            expect(payment.capture_events.count).to eq(1)\n            expect(payment.capture_events.first.amount).to eq(50)\n          end\n\n          it \"stores the uncaptured amount on the payment\" do\n            payment.capture!(6000)\n            expect(payment.uncaptured_amount).to eq(40) # 100 - 60 = 40\n          end\n        end\n\n        context \"if unsuccessful\" do\n          it \"should not make payment complete\" do\n            gateway.stub :capture => failed_response\n            payment.should_receive(:failure)\n            payment.should_not_receive(:complete)\n            expect { payment.capture! }.to raise_error(Spree::Core::GatewayError)\n          end\n        end\n      end\n\n      # Regression test for #2119\n      context \"when payment is completed\" do\n        before do\n          payment.state = 'completed'\n        end\n\n        it \"should do nothing\" do\n          payment.should_not_receive(:complete)\n          payment.payment_method.should_not_receive(:capture)\n          payment.log_entries.should_not_receive(:create!)\n          payment.capture!\n        end\n      end\n    end\n\n    describe \"#void_transaction!\" do\n      before do\n        payment.response_code = '123'\n        payment.state = 'pending'\n      end\n\n      context \"when profiles are supported\" do\n        it \"should call payment_gateway.void with the payment's response_code\" do\n          gateway.stub :payment_profiles_supported? => true\n          gateway.should_receive(:void).with('123', card, anything).and_return(success_response)\n          payment.void_transaction!\n        end\n      end\n\n      context \"when profiles are not supported\" do\n        it \"should call payment_gateway.void with the payment's response_code\" do\n          gateway.stub :payment_profiles_supported? => false\n          gateway.should_receive(:void).with('123', anything).and_return(success_response)\n          payment.void_transaction!\n        end\n      end\n\n      it \"should log the response\" do\n        payment.log_entries.should_receive(:create!).with(:details => anything)\n        payment.void_transaction!\n      end\n\n      context \"when gateway does not match the environment\" do\n        it \"should raise an exception\" do\n          gateway.stub :environment => \"foo\"\n          expect { payment.void_transaction! }.to raise_error(Spree::Core::GatewayError)\n        end\n      end\n\n      context \"if successful\" do\n        it \"should update the response_code with the authorization from the gateway\" do\n          # Change it to something different\n          payment.response_code = 'abc'\n          payment.void_transaction!\n          payment.response_code.should == '12345'\n        end\n      end\n\n      context \"if unsuccessful\" do\n        it \"should not void the payment\" do\n          gateway.stub :void => failed_response\n          payment.should_not_receive(:void)\n          expect { payment.void_transaction! }.to raise_error(Spree::Core::GatewayError)\n        end\n      end\n\n      # Regression test for #2119\n      context \"if payment is already voided\" do\n        before do\n          payment.state = 'void'\n        end\n\n        it \"should not void the payment\" do\n          payment.payment_method.should_not_receive(:void)\n          payment.void_transaction!\n        end\n      end\n    end\n\n    describe \"#credit!\" do\n      before do\n        payment.state = 'completed'\n        payment.response_code = '123'\n      end\n\n      context \"when outstanding_balance is less than payment amount\" do\n        before do\n          payment.order.stub :outstanding_balance => 10\n          payment.stub :credit_allowed => 1000\n        end\n\n        it \"should call credit on the gateway with the credit amount and response_code\" do\n          gateway.should_receive(:credit).with(1000, card, '123', anything).and_return(success_response)\n          payment.credit!\n        end\n      end\n\n      context \"when outstanding_balance is equal to payment amount\" do\n        before do\n          payment.order.stub :outstanding_balance => payment.amount\n        end\n\n        it \"should call credit on the gateway with the credit amount and response_code\" do\n          gateway.should_receive(:credit).with(amount_in_cents, card, '123', anything).and_return(success_response)\n          payment.credit!\n        end\n      end\n\n      context \"when outstanding_balance is greater than payment amount\" do\n        before do\n          payment.order.stub :outstanding_balance => 101\n        end\n\n        it \"should call credit on the gateway with the original payment amount and response_code\" do\n          gateway.should_receive(:credit).with(amount_in_cents.to_f, card, '123', anything).and_return(success_response)\n          payment.credit!\n        end\n      end\n\n      it \"should log the response\" do\n        payment.log_entries.should_receive(:create!).with(:details => anything)\n        payment.credit!\n      end\n\n      context \"when gateway does not match the environment\" do\n        it \"should raise an exception\" do\n          gateway.stub :environment => \"foo\"\n          lambda { payment.credit! }.should raise_error(Spree::Core::GatewayError)\n        end\n      end\n\n      context \"when response is successful\" do\n        it \"should create an offsetting payment\" do\n          Spree::Payment.should_receive(:create!)\n          payment.credit!\n        end\n\n        it \"resulting payment should have correct values\" do\n          payment.order.stub :outstanding_balance => 100\n          payment.stub :credit_allowed => 10\n\n          offsetting_payment = payment.credit!\n          offsetting_payment.amount.to_f.should == -10\n          offsetting_payment.should be_completed\n          offsetting_payment.response_code.should == '12345'\n          offsetting_payment.source.should == payment\n        end\n      end\n    end\n  end\n\n  context \"when response is unsuccessful\" do\n    it \"should not create a payment\" do\n      gateway.stub :credit => failed_response\n      Spree::Payment.should_not_receive(:create)\n      expect { payment.credit! }.to raise_error(Spree::Core::GatewayError)\n    end\n  end\n\n  context \"when already processing\" do\n    it \"should return nil without trying to process the source\" do\n      payment.state = 'processing'\n\n      payment.should_not_receive(:authorize!)\n      payment.should_not_receive(:purchase!)\n      payment.process!.should be_nil\n    end\n  end\n\n  context \"with source required\" do\n    context \"raises an error if no source is specified\" do\n      before do\n        payment.source = nil\n      end\n\n      specify do\n        expect { payment.process! }.to raise_error(Spree::Core::GatewayError, Spree.t(:payment_processing_failed))\n      end\n    end\n  end\n\n  context \"with source optional\" do\n    context \"raises no error if source is not specified\" do\n      before do\n        payment.source = nil\n        payment.payment_method.stub(:source_required? => false)\n      end\n\n      specify do\n        expect { payment.process! }.not_to raise_error\n      end\n    end\n  end\n\n  describe \"#credit_allowed\" do\n    # Regression test for #4403 & #4407\n    it \"is the difference between offsets total and payment amount\" do\n      payment.amount = 100\n      payment.stub(:offsets_total).and_return(0)\n      payment.credit_allowed.should == 100\n      payment.stub(:offsets_total).and_return(-80)\n      payment.credit_allowed.should == 20\n    end\n  end\n\n  describe \"#can_credit?\" do\n    it \"is true if credit_allowed > 0\" do\n      payment.stub(:credit_allowed).and_return(100)\n      payment.can_credit?.should be_true\n    end\n\n    it \"is false if credit_allowed is 0\" do\n      payment.stub(:credit_allowed).and_return(0)\n      payment.can_credit?.should be_false\n    end\n  end\n\n  describe \"#credit!\" do\n    context \"when amount <= credit_allowed\" do\n      it \"makes the state processing\" do\n        payment.state = 'completed'\n        payment.stub(:credit_allowed).and_return(10)\n        payment.partial_credit(10)\n        payment.should be_processing\n      end\n\n      it \"calls credit on the source with the payment and amount\" do\n        payment.state = 'completed'\n        payment.stub(:credit_allowed).and_return(10)\n        payment.should_receive(:credit!).with(10)\n        payment.partial_credit(10)\n      end\n    end\n\n    context \"when amount > credit_allowed\" do\n      it \"should not call credit on the source\" do\n        payment.state = 'completed'\n        payment.stub(:credit_allowed).and_return(10)\n        payment.partial_credit(20)\n        payment.should be_completed\n      end\n    end\n  end\n\n  describe \"#save\" do\n    it \"should call order#update!\" do\n      payment = Spree::Payment.create(:amount => 100, :order => order)\n      order.should_receive(:update!)\n      payment.save\n    end\n\n    context \"when profiles are supported\" do\n      before do\n        gateway.stub :payment_profiles_supported? => true\n        payment.source.stub :has_payment_profile? => false\n      end\n\n      context \"when there is an error connecting to the gateway\" do\n        it \"should call gateway_error \" do\n          gateway.should_receive(:create_profile).and_raise(ActiveMerchant::ConnectionError)\n          lambda do\n            Spree::Payment.create(\n              :amount => 100,\n              :order => order,\n              :source => card,\n              :payment_method => gateway\n            )\n          end.should raise_error(Spree::Core::GatewayError)\n        end\n      end\n\n      context \"when successfully connecting to the gateway\" do\n        it \"should create a payment profile\" do\n          payment.payment_method.should_receive :create_profile\n          payment = Spree::Payment.create(\n            :amount => 100,\n            :order => order,\n            :source => card,\n            :payment_method => gateway\n          )\n        end\n      end\n    end\n\n    context \"when profiles are not supported\" do\n      before { gateway.stub :payment_profiles_supported? => false }\n\n      it \"should not create a payment profile\" do\n        gateway.should_not_receive :create_profile\n        payment = Spree::Payment.create(\n          :amount => 100,\n          :order => order,\n          :source => card,\n          :payment_method => gateway\n        )\n      end\n    end\n  end\n\n  describe \"#build_source\" do\n    let(:params) do\n      {\n        :amount => 100,\n        :payment_method => gateway,\n        :source_attributes => {\n          :expiry =>\"1 / 99\",\n          :number => '1234567890123',\n          :verification_value => '123',\n          :name => 'Spree Commerce'\n        }\n      }\n    end\n\n    it \"should build the payment's source\" do\n      payment = Spree::Payment.new(params)\n      payment.should be_valid\n      payment.source.should_not be_nil\n    end\n\n    it \"assigns user and gateway to payment source\" do\n      order = create(:order)\n      source = order.payments.new(params).source\n\n      expect(source.user_id).to eq order.user_id\n      expect(source.payment_method_id).to eq gateway.id\n    end\n\n    it \"errors when payment source not valid\" do\n      params = { :amount => 100, :payment_method => gateway,\n        :source_attributes => {:expiry => \"1 / 12\" }}\n\n      payment = Spree::Payment.new(params)\n      payment.should_not be_valid\n      payment.source.should_not be_nil\n      payment.source.should have(1).error_on(:number)\n      payment.source.should have(1).error_on(:verification_value)\n    end\n\n    it \"does not build a new source when duplicating the model with source_attributes set\" do\n      payment = create(:payment)\n      payment.source_attributes = params[:source_attributes]\n      expect { payment.dup }.to_not change { payment.source }\n    end\n  end\n\n  describe \"#currency\" do\n    before { order.stub(:currency) { \"ABC\" } }\n    it \"returns the order currency\" do\n      payment.currency.should == \"ABC\"\n    end\n  end\n\n  describe \"#display_amount\" do\n    it \"returns a Spree::Money for this amount\" do\n      payment.display_amount.should == Spree::Money.new(payment.amount)\n    end\n  end\n\n  # Regression test for #2216\n  describe \"#gateway_options\" do\n    before { order.stub(:last_ip_address => \"192.168.1.1\") }\n\n    it \"contains an IP\" do\n      payment.gateway_options[:ip].should == order.last_ip_address\n    end\n  end\n\n  describe \"#set_unique_identifier\" do\n    # Regression test for #1998\n    it \"sets a unique identifier on create\" do\n      payment.run_callbacks(:create)\n      payment.identifier.should_not be_blank\n      payment.identifier.size.should == 8\n      payment.identifier.should be_a(String)\n    end\n\n    # Regression test for #3733\n    it \"does not regenerate the identifier on re-save\" do\n      payment.save\n      old_identifier = payment.identifier\n      payment.save\n      payment.identifier.should == old_identifier\n    end\n\n    context \"other payment exists\" do\n      let(:other_payment) {\n        payment = Spree::Payment.new\n        payment.source = card\n        payment.order = order\n        payment.payment_method = gateway\n        payment\n      }\n\n      before { other_payment.save! }\n\n      it \"doesn't set duplicate identifier\" do\n        payment.should_receive(:generate_identifier).and_return(other_payment.identifier)\n        payment.should_receive(:generate_identifier).and_call_original\n\n        payment.run_callbacks(:create)\n\n        payment.identifier.should_not be_blank\n        payment.identifier.should_not == other_payment.identifier\n      end\n    end\n  end\n\n  describe \"#amount=\" do\n    before do\n      subject.amount = amount\n    end\n\n    context \"when the amount is a string\" do\n      context \"amount is a decimal\" do\n        let(:amount) { '2.99' }\n\n        its(:amount) { should eql(BigDecimal('2.99')) }\n      end\n\n      context \"amount is an integer\" do\n        let(:amount) { '2' }\n\n        its(:amount) { should eql(BigDecimal('2.0')) }\n      end\n\n      context \"amount contains a dollar sign\" do\n        let(:amount) { '$2.99' }\n\n        its(:amount) { should eql(BigDecimal('2.99')) }\n      end\n\n      context \"amount contains a comma\" do\n        let(:amount) { '$2,999.99' }\n\n        its(:amount) { should eql(BigDecimal('2999.99')) }\n      end\n\n      context \"amount contains a negative sign\" do\n        let(:amount) { '-2.99' }\n\n        its(:amount) { should eql(BigDecimal('-2.99')) }\n      end\n\n      context \"amount is invalid\" do\n        let(:amount) { 'invalid' }\n\n        # this is a strange default for ActiveRecord\n        its(:amount) { should eql(BigDecimal('0')) }\n      end\n\n      context \"amount is an empty string\" do\n        let(:amount) { '' }\n\n        its(:amount) { should be_nil }\n      end\n    end\n\n    context \"when the amount is a number\" do\n      let(:amount) { 1.55 }\n\n      its(:amount) { should eql(BigDecimal('1.55')) }\n    end\n\n    context \"when the amount is nil\" do\n      let(:amount) { nil }\n\n      its(:amount) { should be_nil }\n    end\n  end\n\n  describe \"is_avs_risky?\" do\n    it \"returns false if avs_response == 'D'\" do\n      payment.update_attribute(:avs_response, \"D\")\n      payment.is_avs_risky?.should == false\n    end\n\n    it \"returns false if avs_response == nil\" do\n      payment.update_attribute(:avs_response, nil)\n      payment.is_avs_risky?.should == false\n    end\n\n    it \"returns true if avs_response == A-Z, omitting D\" do\n      # should use avs_response_code helper\n      ('A'..'Z').reject{ |x| x == 'D' }.to_a.each do |char|\n        payment.update_attribute(:avs_response, char)\n        payment.is_avs_risky?.should == true\n      end\n    end\n  end\n\n  describe \"is_cvv_risky?\" do\n    it \"returns false if cvv_response_code == 'M'\" do\n      payment.update_attribute(:cvv_response_code, \"M\")\n      payment.is_cvv_risky?.should == false\n    end\n\n    it \"returns false if cvv_response_code == nil\" do\n      payment.update_attribute(:cvv_response_code, nil)\n      payment.is_cvv_risky?.should == false\n    end\n\n    it \"returns false if cvv_response_message == ''\" do\n      payment.update_attribute(:cvv_response_message, '')\n      payment.is_cvv_risky?.should == false\n    end\n\n    it \"returns true if cvv_response_code == [A-Z], omitting D\" do\n      # should use cvv_response_code helper\n      (%w{N P S U} << \"\").each do |char|\n        payment.update_attribute(:cvv_response_code, char)\n        payment.is_cvv_risky?.should == true\n      end\n    end\n  end\n\n  # Regression test for #4072 (kinda)\n  # The need for this was discovered in the research for #4072\n  context \"state changes\" do\n    it \"are logged to the database\" do\n      payment.state_changes.should be_empty\n      expect(payment.process!).to be_true\n      payment.state_changes.count.should == 2\n      changes = payment.state_changes.map { |change| { change.previous_state => change.next_state} }\n      expect(changes).to eq([\n        {\"checkout\" => \"processing\"},\n        { \"processing\" => \"pending\"}\n      ])\n    end\n  end\nend\n", "meta": {"content_hash": "c7d7062e4467fbea0f37cdb9b44273e7", "timestamp": "", "source": "github", "line_count": 821, "max_line_length": 153, "avg_line_length": 31.37880633373934, "alnum_prop": 0.6072121729679373, "repo_name": "thanhjamin/z_spree", "id": "d87d59cd2d2da9f43ff51b84b61fad7dd666db88", "size": "25762", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "core/spec/models/spree/payment_spec.rb", "mode": "33188", "license": "bsd-3-clause", "language": [{"name": "CSS", "bytes": "103487"}, {"name": "CoffeeScript", "bytes": "31735"}, {"name": "JavaScript", "bytes": "55318"}, {"name": "Ruby", "bytes": "1546153"}, {"name": "Shell", "bytes": "1463"}]}}
{"text": "local CLASS = require('Class')\nlocal FsmCtl = require(\"FsmController\")\nlocal Entity = require(\"Entity\")\nrequire(\"Util\")\n\n-- abstract\nlocal State = CLASS()\n-- Lv0\nlocal RootState = CLASS(State)\n-- Lv1\nlocal PatrolState = CLASS(State)\nlocal FleeState = CLASS(State)\nlocal PassiveState = CLASS(State)\n-- Lv2\nlocal NavigationState = CLASS(State)\n-- Lv3\nlocal RunState = CLASS(State)\nlocal JumpState = CLASS(State)\nlocal ClimbState = CLASS(State)\n-- debug prupose\nlocal WanderState = CLASS(State)\n\n-- *************************************************\n-- *           \t\tabstract state                 *\n-- *************************************************\nState.name = \"basic\"\nState.parentMachine = nil\nState.childrenMachine = {}\nState.agent = nil\nState.entity = nil\n-- action when entering a state, should be override\nfunction State:enter() \n    assert(self.parentMachine)\n    assert(self.agent)\n    assert(self.entity)\n    self.childrenMachine = {}\nend\n\n-- routine of a state, should be override\nfunction State:execute(dt)\nend\n\n-- action when exiting a state, should be cascade exiting\n-- should be override if needed, but must call the base class exit in the end\nfunction State:exit()\n    for _,child in ipairs(self.childrenMachine) do\n        child:exitState()\n    end\nend\n\n-- *************************************************\n-- *                  root state  Lv0              *\n-- *************************************************\nRootState.name = \"root\"\nRootState.actionFsm = nil\nRootState.holes = nil\nRootState.passive = false\n-- ********************  override  *******************\nfunction RootState:enter() \n    State.enter(self)\n\n    self.actionFsm = FsmCtl.new()\n    self.actionFsm:attach(self)\n    table.insert(self.childrenMachine, self.actionFsm)\n\n    if self.entity.wander then\n        local wanderState = WanderState.new({entity = self.entity})\n        self.actionFsm:changeState(wanderState)\n    end\n\nend\n\nfunction RootState:execute(dt)\n    if self.entity.wander then\n        self.actionFsm:update(dt)\n        return\n    end\n    -- what to do next?\n    -- passive -> wait\n    if self.passive and self.actionFsm.currState and self.actionFsm.currState.name == \"passive\" then return end\n    if self.passive and (not self.actionFsm.currState or self.actionFsm.currState.name ~= \"passive\") then\n        local passiveState = PassiveState.new({entity = self.entity})\n        self.actionFsm:changeState(passiveState)\n        return\n    end\n    -- on air -> wait\n    local onground = self.entity:isOnGround()\n    if not ( onground ) and (not self.actionFsm.currState or self.actionFsm.currState.name ~= \"onair\") then\n        --self.entity:resetAnim()\n        return\n    end\n\n    -- enemy too close -> flee\n    -- should avoid jitter between flee and patrol\n    local threatened = self.entity:isThreatened()\n    if threatened and (not self.actionFsm.currState or self.actionFsm.currState.name ~= \"flee\") then\n        local fleeState = FleeState.new({entity = self.entity})\n        self.actionFsm:changeState(fleeState)\n        return\n    end\n\n    -- safe and on ground -> find holes   \n    -- sort the holes based on distance first\n    if onground and (not threatened) and (not self.actionFsm.currState or self.actionFsm.currState.name ~= \"patrol\") then\n        assert(self.holes)\n        local indice = {}\n        for i,h in ipairs(self.holes) do\n            table.insert(indice,h)\n        end\n        local patrolState = PatrolState.new({entity = self.entity, nodeIndice = indice})\n        self.actionFsm:changeState(patrolState)\n    end\n\n    self.actionFsm:update(dt)\nend\n\nfunction RootState:exit()\n    return State.exit(self)\nend\n\n-- *************************************************\n-- *                patrol state  Lv1              *\n-- *************************************************\nPatrolState.name = \"patrol\"\nPatrolState.nodeIndice = {}\nPatrolState.naviFsm = nil\n-- ********************  override  *******************\nfunction PatrolState:enter()\n    State.enter(self)\n\n    assert(self.nodeIndice and table.getn(self.nodeIndice)>=2)\n    self:sortTarget()\n\n    self.naviFsm = FsmCtl.new()\n    self.naviFsm:attach(self)\n    table.insert(self.childrenMachine, self.naviFsm)\n    \n    local naviState = NavigationState.new({entity = self.entity})\n    --naviState.start = self.nodeIndice[1]\n    naviState.start = world.navgraph:nearestNode(self.entity.px, self.entity.py)\n    naviState.goal = self.nodeIndice[1]\n    self.naviFsm:changeState(naviState)\n    \n    \nend\n\nfunction PatrolState:execute(dt)\n    if not self.naviFsm.currState.next then\n        table.insert(self.nodeIndice, table.remove(self.nodeIndice, 1))\n        local naviState = NavigationState.new({entity = self.entity})\n        naviState.start = world.navgraph:nearestNode(self.entity.px, self.entity.py)\n        naviState.goal = self.nodeIndice[1]\n        self.naviFsm:changeState(naviState)\n    end\n    self.naviFsm:update(dt)\nend\n\nfunction PatrolState:exit()\n    return State.exit(self)\nend\n\nfunction PatrolState:sortTarget()\n    local function sort(a,b)\n        local dista = {}\n        for _,e in ipairs(Entity._all) do\n            if e.class == \"Hunter\" then\n                table.insert(dista, eudist(e.px, e.py, world.navgraph.nodes[a].x, world.navgraph.nodes[a].y))\n            end\n        end \n        table.sort(dista)\n        local hunterdista = dista[1]\n\n        local distb = {}\n        for _,e in ipairs(Entity._all) do\n            if e.class == \"Hunter\" then\n                table.insert(distb, eudist(e.px, e.py, world.navgraph.nodes[b].x, world.navgraph.nodes[b].y))\n            end\n        end \n        table.sort(distb)\n        local hunterdistb = distb[1]\n\n        if hunterdista >= 1.5 * self.entity.threatBound and\n            hunterdistb >= 1.5 * self.entity.threatBound then\n            local entitydista = eudist(self.entity.px, self.entity.py, world.navgraph.nodes[a].x, world.navgraph.nodes[a].y)\n            local entitydistb = eudist(self.entity.px, self.entity.py, world.navgraph.nodes[b].x, world.navgraph.nodes[b].y)\n            return entitydista < entitydistb\n        else \n            return hunterdista < hunterdistb\n        end\n    end\n    table.sort(self.nodeIndice,sort)\nend\n-- *************************************************\n-- *                flee state  Lv1                *\n-- *************************************************\nFleeState.name = \"flee\"\nFleeState.moveFsm = nil\nFleeState.current = nil\nFleeState.next = nil\n-- ********************  override  *******************\nfunction FleeState:enter() \n    State.enter(self)\n    self.entity.body:setLinearVelocity(0,0)\n    self.moveFsm = FsmCtl.new()\n    self.moveFsm:attach(self)\n    table.insert(self.childrenMachine, self.moveFsm)\n    -- first goto a node\n    self.next = world.navgraph:nearestNode(self.entity.px, self.entity.py)\n    local run = RunState.new({entity = self.entity, target = world.navgraph.nodes[self.next]})\n    self.moveFsm:changeState(run)\nend\n\n\nfunction FleeState:execute(dt)\n    assert(self.next)\n    local currPosx = self.entity.px\n    local currPosy = self.entity.py   \n    if eudist(currPosx, currPosy, world.navgraph.nodes[self.next].x, world.navgraph.nodes[self.next].y)\n        <= 5 then\n\n        self.current = self.next\n        -- simply navigate to the reverse direction\n        local bestedge = self:calcEscapeRoute()\n\n        assert(bestedge)\n        self.next = bestedge.next\n        if bestedge.type == \"run\" then\n            local run = RunState.new({entity = self.entity, target = world.navgraph.nodes[self.next]})\n            self.moveFsm:changeState(run)\n        elseif bestedge.type == \"jump\" then\n            local jump = JumpState.new({entity = self.entity, target = world.navgraph.nodes[self.next]})\n            self.moveFsm:changeState(jump)\n        elseif type == \"climb\" then\n            local climb = ClimbState.new({entity = self.entity, target = world.navgraph.nodes[self.next]})\n            self.moveFsm:changeState(climb)\n        end\n\n    end\n\n    self.moveFsm:update(dt)\nend\n\n\nfunction FleeState:exit()\n    return State.exit(self)\nend\n\nfunction FleeState:calcEscapeRoute()\n    local maxheur = 0, bestedge \n    for k,edge in pairs(world.navgraph.nodes[self.current].neighbors) do\n        local heur =  self:fleeHeuristic(world.navgraph.nodes[edge.next])\n        if heur > maxheur then\n            maxheur = heur\n            bestedge = edge\n        end\n    end\n    return bestedge\nend\n\nfunction FleeState:fleeHeuristic(node)\n    local dist = {}\n    for _,e in ipairs(Entity._all) do\n        if e.class == \"Hunter\" then\n            table.insert(dist, eudist(e.px, e.py, node.x, node.y))\n        end\n    end \n    table.sort(dist)\n    return dist[1]\nend\n\n-- *************************************************\n-- *                passive state         Lv1      *\n-- *************************************************\nPassiveState.name = \"passive\"\n-- ********************  override  *******************\nfunction PassiveState:enter() \n    State.enter(self)\n    self.entity:resetAnim()\n    self.entity.body:setType(\"kinematic\")\n    self.entity.body:setLinearVelocity(0,0)\nend\n\nfunction PassiveState:execute(dt)\n    -- body\nend\n\nfunction PassiveState:exit()\n    -- body\n     self.entity.body:setType(\"dynamic\") -- TODO: maybe fail to set it back?\n     return State.exit(self)\nend\n\n-- *************************************************\n-- *             navigation state Lv2              *\n-- *************************************************\nNavigationState.name = \"navigation\"\nNavigationState.start = nil\nNavigationState.goal = nil\nNavigationState.current = nil\nNavigationState.next = nil\nNavigationState.type = nil\nNavigationState.path = nil\nNavigationState.moveFsm = nil \n-- ********************  override  *******************\nfunction NavigationState:enter()\n    State.enter(self)\n    assert(self.start, \"start is nil\")\n    assert(self.goal, \"goal is nil\")\n    self.path = world.navgraph:findPath(self.start,self.goal)\n    assert(self.path, \"path is nil\")\n\n    self.entity.body:setLinearVelocity(0,0)\n    if not self.path[self.start] then -- alrealy at goal\n        return -- self.parentMachine:changeState(WanderState.new())\n    else\n        self.current = nil\n        self.next = self.start\n        self.moveFsm = FsmCtl.new()\n        self.moveFsm:attach(self)\n        table.insert(self.childrenMachine, self.moveFsm)\n        self.type = self.path[self.start].type\n        local run = RunState.new({entity = self.entity, target = world.navgraph.nodes[self.next]})\n        self.moveFsm:changeState(run)\n    end\nend\n\nfunction NavigationState:execute(dt)\n    local currPosx = self.entity.px\n    local currPosy = self.entity.py\n    if self:endCondition() then\n        -- arrived at next node \n        self.current = self.next\n        self.next = self.path[self.next]\n        if not self.next then -- arrived at goal\n            return \n        else\n            self.type = self.next.type\n            self.next = self.next.idx\n\n            -- next action is run\n            if self.type == \"run\" then\n                local run = RunState.new({entity = self.entity, target = world.navgraph.nodes[self.next]})\n                self.moveFsm:changeState(run)\n            -- next action is jump\n            elseif self.type == \"jump\" then\n                local jump = JumpState.new({entity = self.entity, target = world.navgraph.nodes[self.next]})\n                self.moveFsm:changeState(jump)\n            -- next action is climb\n            elseif self.type == \"climb\" then\n                local climb = ClimbState.new({entity = self.entity, target = world.navgraph.nodes[self.next]})\n                self.moveFsm:changeState(climb)\n            end\n        end\n\n    end\n \n    self.moveFsm:update(dt)\nend\n\nfunction NavigationState:exit()\n    NavigationState.start = nil\n    NavigationState.goal = nil\n    NavigationState.next = nil\n    NavigationState.path = nil\n    return State.exit(self)\nend\n\nfunction NavigationState:endCondition()\n    local currPosx = self.entity.px\n    local currPosy = self.entity.py\n    return eudist(currPosx, currPosy, world.navgraph.nodes[self.next].x, world.navgraph.nodes[self.next].y) <= 5\nend\n-- *************************************************\n-- *                run state   Lv3                *\n-- *************************************************\nRunState.name = \"run\"\nRunState.target = nil\nRunState.maxSpeed = 200\n-- ********************  override  *******************\nfunction RunState:enter()\n    State.enter(self)\n    assert(self.target)\n    self.entity:resetAnim()\nend\n\nfunction RunState:execute(dt)\n    local entity = self.entity\n    local currPosx = entity.px\n    local currPosy = entity.py\n\n    local _, g = world.physics:getGravity()\n    local angle = angle(currPosx, currPosy, self.target.x, self.target.y)\n    local currVelox, currVeloy = entity.body:getLinearVelocity()\n    if currVelox * currVelox + currVeloy * currVeloy <= self.maxSpeed * self.maxSpeed then\n        entity.body:applyForce(math.cos(angle) * 200, math.sin(angle) * 200 - g)\n    else\n        entity.body:setLinearVelocity(math.cos(angle) * self.maxSpeed, math.sin(angle) * self.maxSpeed)\n    end\n\n    -- animation\n    if currVelox >= 0 then\n        self.entity:setAnimDirection(\"right\")\n    else self.entity:setAnimDirection(\"left\")\n    end\n\nend\n\nfunction RunState:exit()\n  return State.exit(self)\nend\n\n-- *************************************************\n-- *                jump state     Lv3             *\n-- *************************************************\nJumpState.name = \"jump\"\nJumpState.target = nil\nfunction JumpState:enter()\n    State.enter(self)\n    assert(self.target)\n    self.entity:resetAnim()\n    --self.entity:playSound(\"jump\")\n    self.entity.body:setLinearVelocity(0,0)\n\n    local entity = self.entity\n    local currx = entity.px\n    local curry = entity.py\n    local _, g = world.physics:getGravity()\n    local m = entity.body:getMass()\n    \n    local fx,fy = self:calcJump(currx, curry, self.target.x, self.target.y,25, m, g)\n\n    entity.body:applyLinearImpulse(fx,fy)\n\nend\n\nfunction JumpState:execute(dt)\n    local entity = self.entity\n    local currPosx = entity.px\n    local currPosy = entity.py\n    local currVelox, currVeloy = entity.body:getLinearVelocity()\n    -- animation\n    if currVelox >= 0 and currVeloy <= 0 then\n        self.entity:setAnimDirection(\"jumpupright\")\n    elseif currVelox >= 0 and currVeloy > 0 then \n        self.entity:setAnimDirection(\"jumpdownright\")\n    elseif currVelox <0 and currVeloy <=0 then\n        self.entity:setAnimDirection(\"jumpupleft\")\n    else self.entity:setAnimDirection(\"jumpdownleft\")\n    end\n\n    -- don't do anything when on air\n    local objBelowleft = world:castRay(currPosx - 16, currPosy, currPosx - 16, currPosy + 20)\n    local objBelowright = world:castRay(currPosx + 16, currPosy, currPosx + 16, currPosy + 20)\n    if table.getn(objBelowleft) == 0 and table.getn(objBelowright) == 0 then\n        return\n    end\nend\n\nfunction JumpState:exit()\n    return State.exit(self)\nend\n\nfunction JumpState:calcJump(currx, curry, targetx, targety, peakdh, m, g)\n    local peaky = math.min(curry, targety) - peakdh\n    local y1, y2, t1, t2\n    local vx0, vy0\n    local fx, fy\n    \n    y1 = curry - peaky\n    y2 = targety - peaky\n\n    vy0 = math.sqrt(2 * g * y1)\n    t1 = math.sqrt(2 * y1 / g)\n    t2 = math.sqrt(2 * y2 / g)\n    vx0 = (targetx - currx) / (t1 + t2)\n\n    fx = getImpulseForce(m,0,vx0)\n    fy = getImpulseForce(m,0,vy0)\n    \n    return fx, -fy\nend\n\n-- *************************************************\n-- *                climb state   Lv3              *\n-- *************************************************\nClimbState.name = \"climb\"\nClimbState.target = nil\nClimbState.speed = 100\n-- ********************  override  *******************\nfunction ClimbState:enter() \n    State.enter(self)\n    assert(self.target)\n    self.entity:resetAnim()\n    self.entity.body:setLinearVelocity(0,0)\nend\n\nfunction ClimbState:execute(dt)\n    local entity = self.entity\n    local currPosx = entity.px\n    local currPosy = entity.py\n    local angle = angle(currPosx, currPosy, self.target.x, self.target.y)\n    --entity.body:setLinearVelocity(math.cos(angle) * self.speed, math.sin(angle) * self.speed)\n    --entity.body:setLinearVelocity(0,-200)\n    local _,g = world.physics:getGravity()\n    local m = self.entity.body:getMass()\n    entity.body:applyForce(0,-g * m * 30)\n\n    if self.target.y <= self.entity.py then\n        self.entity:setAnimDirection(\"climbup\")\n    else\n        self.entity:setAnimDirection(\"climbdown\")\n    end\nend\n\nfunction ClimbState:exit()\n    return State.exit(self)\nend\n\n-- *************************************************\n-- *          wander state (debug prupose)         *\n-- *************************************************\nWanderState.name = \"wander\"\n\n-- ********************  override  *******************\nfunction WanderState:enter()\n    State.enter(self)\n\n    self.entity.vx = clamp(self.entity.vx, -400, 200)\n    self.entity.vy = clamp(self.entity.vy, -400, 200)\nend\n\nfunction WanderState:execute(dt)\n    --here we are going to create some keyboard events\n    if love.keyboard.isDown(\"right\") then --press the right arrow key to push the ball to the right\n        self.entity.body:applyForce(1000,0)\n    elseif love.keyboard.isDown(\"left\") then --press the left arrow key to push the ball to the left\n        self.entity.body:applyForce(-1000,0)\n    end   \n    if love.keyboard.isDown(\"up\") then --press the up arrow key to fly\n        self.entity.body:applyForce(0,-1000)\n    elseif love.keyboard.isDown(\"down\") then --press the left arrow key to push the ball to the left\n        self.entity.body:applyForce(0,1000)\n    end\n\n    if love.keyboard.isDown(\"r\") then\n         self.entity:release(\"random\")\n    end\n\n    if love.keyboard.isDown(\"c\") then\n         self.entity:setCarried()\n    end\n\n    if love.keyboard.isDown(\"h\") then\n         self.entity:setHooked()\n    end\n    self.entity.vx = clamp(self.entity.vx, -400, 200)\n    self.entity.vy = clamp(self.entity.vy, -400, 200)\n    self.entity.body:setLinearVelocity(self.entity.vx, self.entity.vy)\nend\n\nfunction WanderState:exit()\n    return State.exit(self)\nend\n\nlocal states = \n    {\n        rootState = RootState,\n        patrolState = PatrolState,\n        passiveState = PassiveState,\n\n        navigationState = NavigationState,\n        \n        wanderState = WanderState,\n    }\n\nreturn states", "meta": {"content_hash": "f07487ea974e27f10cd8bff352ff6442", "timestamp": "", "source": "github", "line_count": 576, "max_line_length": 124, "avg_line_length": 31.897569444444443, "alnum_prop": 0.6046372394274206, "repo_name": "MangoSister/Grabbit", "id": "13905773457a9af84e0d75e7cbb25b9b358563b2", "size": "18529", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "State.lua", "mode": "33188", "license": "mit", "language": [{"name": "Lua", "bytes": "228163"}]}}
{"text": "\"\"\"Add a new patient to the xpacsdb.patient_info table\n\nUsage:\n    add_patient.py [options]\n    add_patient.py -h\n\nOptions:\n    -h, --help              Show this screen\n    -d, --debug             Show some debug information\n    -s <host>               The MySQL server host IP address.\n    -p <port>               MySQL port. Default is 3306.\n    -u <user>               User name.\n    --password=<password>   User password.\n    --db=<database>         Database name. Default is xpacs.\n    -f <csv_file>           Read list of patients from a CSV file (see below)\n\nBatch addition of patients\n^^^^^^^^^^^^^^^^^^^^^^^^^^\nIf -f option is given, then patients are added in from a CSV file in a batch\nmode. This file should have the following headers:\n'patient_id', 'gender', 'cohort', 'ethnicity', 'primary_diagnosis\n\nIf there are existing patient_ids in the database, then the existing rows\nwill be updated.\n\nAuthor: Avan Suinesiaputra - University of Auckland (2017)\n\"\"\"\n\n# Docopt is a library for parsing command line arguments\nimport docopt\nimport getpass\nimport mysql.connector\nimport termutils as tu\nimport sqlutils as su\n\n\nif __name__ == '__main__':\n\n    try:\n        # Parse arguments, use file docstring as a parameter definition\n        arguments = docopt.docopt(__doc__)\n\n        # Default values\n        if not arguments['-s']:\n            arguments['-s'] = '127.0.0.1'\n\n        if not arguments['-p']:\n            arguments['-p'] = 3306\n\n        if not arguments['--db']:\n            arguments['--db'] = 'xpacs'\n\n        # Check user & password\n        if not arguments['-u']:\n            arguments['-u'] = raw_input('Username: ')\n\n        if arguments['--password'] is None:\n            arguments['--password'] = getpass.getpass('Password: ')\n\n        # print arguments for debug\n        if arguments['--debug']:\n            tu.debug(str(arguments))\n\n    # Handle invalid options\n    except docopt.DocoptExit as e:\n        tu.error(e.message)\n        exit()\n\n# connecting\nprint 'Connecting to mysql://' + arguments['-s'] + ':' + str(arguments['-p']) + ' ...'\n\ntry:\n    cnx = mysql.connector.connect(user=arguments['-u'],\n                                  host=arguments['-s'],\n                                  port=arguments['-p'],\n                                  password=arguments['--password'],\n                                  database=arguments['--db'])\n\nexcept mysql.connector.Error as err:\n    print(err)\n    exit()\n\nexisting_patients = su.get_all_patient_ids(cnx)\n\n\n# it's either by CSV file or interactive\nif arguments['-f'] is None:\n\n    # First question: who is the patient?\n    patientID = raw_input('Patient ID: ')\n    if patientID in existing_patients:\n        tu.error(\"Patient \" + patientID + \" already exists.\")\n        exit()\n\n    # Remaining questions\n    cohort = raw_input('Cohort [press <enter> to skip]: ')\n    ethnicity = raw_input('Ethnicity [press <enter> to skip]: ')\n    gender = raw_input('Cohort [M/F/U=unknown (default)]: ')\n    if str.lower(gender) == 'f':\n        gender = 'female'\n    elif str.lower(gender) == 'm':\n        gender = 'male'\n    else:\n        gender = 'unknown'\n    primary_diagnosis = raw_input('Primary diagnosis [press <enter> to skip]: ')\n\n    query = su.insert_new_patient_info(cnx, {\n        'patient_id': patientID,\n        'cohort': cohort,\n        'ethnicity': ethnicity,\n        'gender': gender,\n        'primary_diagnosis': primary_diagnosis\n    })\n\n    if arguments['--debug']:\n        tu.debug(query)\n    tu.ok(\"Patient \" + patientID + \" added to the database\")\n\n    # don't forget to close the connection\n    cnx.close()\n\nelse:\n\n    try:\n        for row in su.read_csv(arguments['-f']):\n            # fix gender\n            g = str.lower(row['gender'])\n            if g == 'male' or g == 'm':\n                row['gender'] = 'male'\n            elif g == 'female' or g == 'f':\n                row['gender'] = 'female'\n            else:\n                row['gender'] = 'unknown'\n\n            # update or insert\n            if row['patient_id'] in existing_patients:\n                if arguments['--debug']:\n                    tu.warn('Updating ' + row['patient_id'])\n                query = su.update_patient_info(cnx, row)\n\n            else:\n                if arguments['--debug']:\n                    tu.debug('Inserting ' + row['patient_id'])\n                query = su.insert_new_patient_info(cnx, row)\n\n            if arguments['--debug']:\n                print query\n\n\n    except Exception, e:\n        tu.error(str(e))\n        exit()\n\n    tu.ok(\"SUCCESS\")\n", "meta": {"content_hash": "2f2e3aa5f6e304d045d4a15052a73347", "timestamp": "", "source": "github", "line_count": 154, "max_line_length": 86, "avg_line_length": 29.48701298701299, "alnum_prop": 0.5463554283197534, "repo_name": "CardiacAtlasProject/CAPServer2.0", "id": "a99a3ece7c9f12ec8a34f174a147734dbb5907ca", "size": "4541", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "dbase/utils/add_patient.py", "mode": "33188", "license": "apache-2.0", "language": [{"name": "Batchfile", "bytes": "5036"}, {"name": "CSS", "bytes": "10248"}, {"name": "Gherkin", "bytes": "179"}, {"name": "HTML", "bytes": "182082"}, {"name": "Java", "bytes": "446416"}, {"name": "JavaScript", "bytes": "271433"}, {"name": "Python", "bytes": "13917"}, {"name": "Scala", "bytes": "20977"}, {"name": "Shell", "bytes": "9179"}]}}
{"text": "class AddStationableToStations < ActiveRecord::Migration\n  def change\n    add_column :stations, :stationable_id, :integer\n    add_column :stations, :stationable_type, :string\n  end\nend\n", "meta": {"content_hash": "80c0ff8c762470cc89cfc150ef5158a7", "timestamp": "", "source": "github", "line_count": 6, "max_line_length": 56, "avg_line_length": 30.833333333333332, "alnum_prop": 0.7567567567567568, "repo_name": "soarpatriot/price", "id": "c2249e0848aed18601535db37892c2ea428b524f", "size": "185", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "db/migrate/20150830064509_add_stationable_to_stations.rb", "mode": "33188", "license": "bsd-2-clause", "language": [{"name": "CSS", "bytes": "26603"}, {"name": "HTML", "bytes": "90684"}, {"name": "JavaScript", "bytes": "65422"}, {"name": "Ruby", "bytes": "301736"}]}}
{"text": "from feature_format import featureFormat, targetFeatureSplit\nimport pickle\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.cross_validation import StratifiedShuffleSplit\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.grid_search import GridSearchCV\nimport numpy as np\n\n# loading the enron data dictionary\nwith open(\"final_project_dataset.pkl\", \"r\") as data_file:\n    data_dict = pickle.load(data_file)\n\n# removing 'TOTAL' outlier\ndel data_dict['TOTAL']\n\n# creating new features\nfor name in data_dict:\n    if data_dict[name][\"total_payments\"] != \"NaN\" and\\\n    data_dict[name][\"total_stock_value\"] != \"NaN\":\n        data_dict[name][\"ttl_pay_stock\"] = \\\n        data_dict[name][\"total_payments\"] + \\\n        data_dict[name][\"total_stock_value\"]\n    else:\n        data_dict[name][\"ttl_pay_stock\"] = 0.0\n\n# list containing all labels and features except email\nfeat_list = ['poi',\n              'salary',\n              'to_messages',\n              'deferral_payments',\n              'total_payments',\n              'exercised_stock_options',\n              'bonus',\n              'restricted_stock',\n              'shared_receipt_with_poi',\n              'restricted_stock_deferred',\n              'total_stock_value',\n              'expenses',\n              'loan_advances',\n              'from_messages',\n              'other',\n              'from_this_person_to_poi',\n              'director_fees',\n              'deferred_income',\n              'long_term_incentive',\n              'from_poi_to_this_person',\n              'ttl_pay_stock']\n\n# Selecting the best features using GridSearchCV\ndata = featureFormat(data_dict, feat_list, sort_keys = True)\nlabels, features = targetFeatureSplit(data)\n\npipe = Pipeline([('KBest', SelectKBest()),\n                ('clf', GaussianNB())])\nK = [1,2,3,4,5]\nparam_grid = [{'KBest__k': K}]\n\ngs = GridSearchCV(estimator=pipe, param_grid=param_grid, scoring='f1')\ngs.fit(features, labels)\n\nkb = SelectKBest(k=gs.best_params_['KBest__k'])\nkb.fit(features, labels)\nbest_feat = list(kb.get_support(indices=True)+1)\n\nprint \"Best f1 score:\", gs.best_score_\nprint \"No. of features used for the best f1 score:\", gs.best_params_['KBest__k']\nprint \"Names of features used:\\n\", [feat_list[i] for i in best_feat]\n\nfinal_feat_list = ['poi',\n                    'salary',\n                    'exercised_stock_options',\n                    'bonus',\n                    'total_stock_value']\n\n# Computing evaluation metrics using the selected features\nfinal_data = featureFormat(data_dict, final_feat_list, sort_keys = True)\nfinal_labels, final_features = targetFeatureSplit(final_data)\n\nfinal_sss = StratifiedShuffleSplit(final_labels, 1000, random_state = 42)\n\naccuracy = []\nprecision = []\nrecall = []\nf1 = []\n\nfor train_indices, test_indices in final_sss:\n    features_train = [final_features[i] for i in train_indices]\n    features_test = [final_features[j] for j in test_indices]\n    labels_train = [final_labels[i] for i in train_indices]\n    labels_test = [final_labels[j] for j in test_indices]\n\n    clf = GaussianNB()\n    clf.fit(features_train, labels_train)\n    pred = clf.predict(features_test)\n\n    accuracy.append(accuracy_score(labels_test, pred))\n    precision.append(precision_score(labels_test, pred))\n    recall.append(recall_score(labels_test, pred))\n    f1.append(f1_score(labels_test, pred))\n\nprint \"Evaluation results of GaussianNB using best features:\"\nprint \"Mean Accuracy:\", np.mean(accuracy)\nprint \"Mean Precision:\", np.mean(precision)\nprint \"Mean Recall:\", np.mean(recall)\nprint \"Mean f1 score:\", np.mean(f1)\n", "meta": {"content_hash": "a24100f845e24b23ac5195d51edbcdfb", "timestamp": "", "source": "github", "line_count": 107, "max_line_length": 83, "avg_line_length": 34.570093457943926, "alnum_prop": 0.6455798864557989, "repo_name": "rjegankumar/enron_email_fraud_identification", "id": "a8a6242d389ca5b999f731ba8fcc8cd50ed1ed98", "size": "3699", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "nb_classifier.py", "mode": "33188", "license": "mit", "language": [{"name": "Python", "bytes": "29136"}]}}
{"text": "import sys, os.path\n\nsys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))\n\nimport skameyka\n    \nskameyka.app.run(port=5001, debug=True)", "meta": {"content_hash": "46e7e46b32bc29d3febdd5955ac83d41", "timestamp": "", "source": "github", "line_count": 7, "max_line_length": 66, "avg_line_length": 21.285714285714285, "alnum_prop": 0.697986577181208, "repo_name": "baverman/skameyka", "id": "063e358e784f1830e802c72c9208e82e93e7f679", "size": "172", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "run.py", "mode": "33261", "license": "mit", "language": [{"name": "Python", "bytes": "4845"}]}}
{"text": "package beans;\n\nimport java.io.Serializable;\n\n@SuppressWarnings(\"serial\")\npublic class CharacteristicBean implements Serializable{\n\tpublic static final int DEPRECATED_COLOUR[] = {200, 200, 200};\n\tpublic static final int EXPERIMENTAL_COLOUR[] = {238, 130, 238};\n\t\n\tprivate String name;\n\tprivate String nameHoverText;\n\tprivate int numOccurrences;\n\tprivate double bits;\n\tprivate double inX;\n\tprivate String value;\n\tprivate int colour[];\n\n\tpublic CharacteristicBean(){\n\t\tname = \"\";\n\t\tnameHoverText = \"\";\n\t\tnumOccurrences = 0;\n\t\tbits = 0;\n\t\tinX = 0;\n\t\tvalue = \"\";\n\t\tcolour = null;\n\t}\n\t\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\t\n\tpublic String getNameHoverText() {\n\t\treturn nameHoverText;\n\t}\n\n\tpublic void setNameHoverText(String nameHoverText) {\n\t\tthis.nameHoverText = nameHoverText;\n\t}\n\n\tpublic int getNumOccurrences() {\n\t\treturn numOccurrences;\n\t}\n\n\tpublic void setNumOccurrences(int numOccurrences) {\n\t\tthis.numOccurrences = numOccurrences;\n\t}\n\n\tpublic double getBits() {\n\t\treturn bits;\n\t}\n\n\tpublic void setBits(double bits) {\n\t\tthis.bits = bits;\n\t}\n\n\tpublic double getInX() {\n\t\treturn inX;\n\t}\n\n\tpublic void setInX(double inX) {\n\t\tthis.inX = inX;\n\t}\n\n\tpublic String getValue() {\n\t\treturn value;\n\t}\n\n\tpublic void setValue(String value) {\n\t\tthis.value = value;\n\t}\n\n\tpublic int[] getColour() {\n\t\treturn colour;\n\t}\n\n\tpublic void setColour(int[] colour) {\n\t\tthis.colour = colour;\n\t}\n}\n", "meta": {"content_hash": "8516c68aa53e59b7ffa880b709ec7293", "timestamp": "", "source": "github", "line_count": 83, "max_line_length": 65, "avg_line_length": 17.3855421686747, "alnum_prop": 0.6964656964656964, "repo_name": "qqTYXn7/browserprint", "id": "5686b6abee5a9fa5516845a87dd31a55963a32af", "size": "1443", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "src/beans/CharacteristicBean.java", "mode": "33188", "license": "mit", "language": [{"name": "ActionScript", "bytes": "2748"}, {"name": "CSS", "bytes": "2021"}, {"name": "HTML", "bytes": "153"}, {"name": "Java", "bytes": "531770"}, {"name": "JavaScript", "bytes": "47809"}]}}
{"text": "import java.util.HashMap;\n\npublic class Alexandra {\n    public String gameID;\n    public Pubsub pubsub;\n    public HashMap config;\n\n    public Alexandra(String gameID) {\n\tthis.gameID = gameID;\n\tString pubsubURL = System.getenv(\"ALEXANDRA_PUBSUB\");\n\tpubsub = new Pubsub(pubsubURL, \"games-\" + gameID);\n\tconfig = null;\n\twhile (config == null) {\n\t    config = pubsub.getCurrentMessage(\"game.json\");\n\t}\n    }\n}", "meta": {"content_hash": "37b78248190f8f0e743c8e163d1d75c6", "timestamp": "", "source": "github", "line_count": 17, "max_line_length": 54, "avg_line_length": 23.823529411764707, "alnum_prop": 0.6864197530864198, "repo_name": "douglassquirrel/alexandra", "id": "a3e05824c6f982e57a212374abd2ea0f73aab804", "size": "405", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "libraries/Alexandra.java", "mode": "33188", "license": "mit", "language": [{"name": "Java", "bytes": "6828"}, {"name": "Python", "bytes": "67866"}, {"name": "Ruby", "bytes": "10592"}]}}
{"text": "#!/usr/bin/env node\n/*eslint-env node */\n/*eslint no-process-exit: 0 */\n'use strict';\n\nvar chalk = require('chalk');\nvar program = require('commander');\nvar fs = require('fs');\nvar glob = require('glob');\nvar bootlint = require('./bootlint.js');\nvar packageJson = require('./../package.json');\n\nprogram\n    .version(packageJson.version)\n    .usage('[options] [files...]')\n    .option('-d, --disable <IDs>', 'Comma-separated list of disabled lint problem IDs', function (val) {\n        return val.split(',');\n    })\n    .parse(process.argv);\nvar disabledIds = program.disable === undefined ? [] : program.disable;\n\nvar totalErrCount = 0;\nvar totalFileCount = 0;\nprogram.args.forEach(function (pattern) {\n    var filenames = glob.sync(pattern);\n\n    filenames.forEach(function (filename) {\n        var reporter = function (lint) {\n            var lintId = (lint.id[0] === 'E') ? chalk.bgGreen.white(lint.id) : chalk.bgRed.white(lint.id);\n            console.log(filename + \":\", lintId, lint.message);\n            totalErrCount++;\n        };\n\n        var html = null;\n        try {\n            html = fs.readFileSync(filename, {encoding: 'utf8'});\n        }\n        catch (err) {\n            console.log(filename + \":\", err);\n            return;\n        }\n        bootlint.lintHtml(html, reporter, disabledIds);\n        totalFileCount++;\n    });\n});\n\nconsole.log(\"\");\n\nif (totalErrCount > 0) {\n    console.log(\"For details, look up the lint problem IDs in the Bootlint wiki: https://github.com/twbs/bootlint/wiki\");\n}\n\nconsole.log(\"\" + totalErrCount + \" lint error(s) found across \" + totalFileCount + \" file(s).\");\nif (totalErrCount) {\n    process.exit(1);\n}\n", "meta": {"content_hash": "1cc436c9a398eff9157e386c78c2a690", "timestamp": "", "source": "github", "line_count": 56, "max_line_length": 121, "avg_line_length": 29.589285714285715, "alnum_prop": 0.6022933011466506, "repo_name": "mubassirhayat/bootlint", "id": "9eac89133e09bda69ea11608025811abe8012c3d", "size": "1657", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "src/cli.js", "mode": "33261", "license": "mit", "language": []}}
{"text": "ACCEPTED\n\n#### According to\nInternational Plant Names Index\n\n#### Published in\nnull\n\n#### Original name\nnull\n\n### Remarks\nnull", "meta": {"content_hash": "0ad259eb7798be0cfac85244d170d7e2", "timestamp": "", "source": "github", "line_count": 13, "max_line_length": 31, "avg_line_length": 9.692307692307692, "alnum_prop": 0.7063492063492064, "repo_name": "mdoering/backbone", "id": "a12eefd49ba9f48729899594ec4ce4985692a387", "size": "178", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "life/Plantae/Magnoliophyta/Magnoliopsida/Rosales/Rosaceae/Potentilla/Potentilla hoelzli/README.md", "mode": "33188", "license": "apache-2.0", "language": []}}
{"text": "package servicenowPrep;\n\npublic class _031DeleteLL {\n\n\tstatic class ListNode{\n\t\tint value;\n\t\tpublic ListNode(int value) {\n\t\t\tthis.value=value;\n\t\t}\n\t\tListNode next;\n\n\t}\n\tpublic static void main(String[] args) {\n\t\tListNode ln = new ListNode(0);\n        ln.next = new ListNode(1);\n        ln.next.next = new ListNode(2);\n        ln.next.next.next = new ListNode(3);\n        ln.next.next.next.next = new ListNode(4);\n        ln.next.next.next.next.next = new ListNode(5);\n        ln.next.next.next.next.next.next = new ListNode(6);\n        ln.next.next.next.next.next.next.next = new ListNode(7);\n        ln.next.next.next.next.next.next.next.next = new ListNode(8);\n        ln=deleteLL(ln);\n        \n        while(ln!=null)\n        {\n        \tSystem.out.println(ln.value);ln=ln.next;\n        }\n\t}\n\tprivate static ListNode deleteLL(ListNode ln) {\n\t\twhile(ln!=null)\n\t\t{\n\t\t\tListNode temp=ln.next;\n\t\t\tln=null;\n\t\t\tln=temp;\n\t\t}\n\t\treturn ln;\n\t}\n\t\n}\n", "meta": {"content_hash": "2e7b5091b4994c7c3465bc4356fb6a27", "timestamp": "", "source": "github", "line_count": 40, "max_line_length": 69, "avg_line_length": 23.475, "alnum_prop": 0.6048988285410011, "repo_name": "darshanhs90/Java-Coding", "id": "1c99999f11b82cec02a5390eaab4c3684a73afc3", "size": "939", "binary": false, "copies": "2", "ref": "refs/heads/master", "path": "src/servicenowPrep/_031DeleteLL.java", "mode": "33188", "license": "mit", "language": [{"name": "Java", "bytes": "1895320"}]}}
{"text": "ACCEPTED\n\n#### According to\nInternational Plant Names Index\n\n#### Published in\nnull\n\n#### Original name\nnull\n\n### Remarks\nnull", "meta": {"content_hash": "f63b8253d6b9557cc5eaa8a19731c0b3", "timestamp": "", "source": "github", "line_count": 13, "max_line_length": 31, "avg_line_length": 9.692307692307692, "alnum_prop": 0.7063492063492064, "repo_name": "mdoering/backbone", "id": "a5709c5f5b8cf2089167e7890182cf7f124e9751", "size": "190", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "life/Plantae/Magnoliophyta/Magnoliopsida/Gentianales/Rubiaceae/Argocoffea/Argocoffea lemblini/README.md", "mode": "33188", "license": "apache-2.0", "language": []}}
{"text": "\ufeffusing Windows.UI.Xaml;\nusing Windows.UI.Xaml.Controls;\n\nusing AvansApp.ViewModels;\n\nnamespace AvansApp.Views\n{\n    public sealed partial class ResultsPageDetailControl : UserControl\n    {\n        public ResultVM MasterMenuItem\n        {\n            get { return GetValue(MasterMenuItemProperty) as ResultVM; }\n            set { SetValue(MasterMenuItemProperty, value); }\n        }\n\n        public static DependencyProperty MasterMenuItemProperty = DependencyProperty.Register(\"MasterMenuItem\", typeof(ResultVM), typeof(ResultsPageDetailControl), new PropertyMetadata(null));\n\n        public ResultsPageDetailControl()\n        {\n            InitializeComponent();\n        }\n    }\n}\n", "meta": {"content_hash": "c2aca4787940d7c3cbbbcb595b5a0eed", "timestamp": "", "source": "github", "line_count": 23, "max_line_length": 192, "avg_line_length": 29.652173913043477, "alnum_prop": 0.6906158357771262, "repo_name": "Tostifrosti/AvansApp", "id": "6c9cd13e3724a4a07f4835aae0fd58b0747df745", "size": "684", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "Views/ResultsPageDetailControl.xaml.cs", "mode": "33188", "license": "mit", "language": [{"name": "C#", "bytes": "312804"}]}}
{"text": "using namespace std;\n\nnamespace scivey {\nnamespace goosepp {\n\nusing namespace scivey::goosepp::contentExtraction;\n\nstring extractBody(const string &htmlText) {\n    auto url = \"http://www.nonsense.com\";\n    GooseExtractor extractor(url, htmlText);\n    return extractor.getBody();\n}\n\n} // goosepp\n} // scivey\n\n\n", "meta": {"content_hash": "2d030c2bce6f79a3b869a21dbd8da9c7", "timestamp": "", "source": "github", "line_count": 17, "max_line_length": 51, "avg_line_length": 18.176470588235293, "alnum_prop": 0.7184466019417476, "repo_name": "scivey/goosepp", "id": "053b2f388a5c5284ec9d5796fb845974849b5220", "size": "711", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "src/goosepp.cpp", "mode": "33188", "license": "mit", "language": [{"name": "C++", "bytes": "69770"}, {"name": "CMake", "bytes": "7765"}, {"name": "Makefile", "bytes": "816"}, {"name": "Python", "bytes": "648"}]}}
{"text": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<feed><tipo>Rua</tipo><logradouro>E</logradouro><bairro>Dezoito do Forte</bairro><cidade>Aracaju</cidade><uf>SE</uf><cep>49072029</cep></feed>\n", "meta": {"content_hash": "f06e7e81949fb21659fc8495cf61074c", "timestamp": "", "source": "github", "line_count": 2, "max_line_length": 142, "avg_line_length": 99.5, "alnum_prop": 0.7135678391959799, "repo_name": "chesarex/webservice-cep", "id": "0dcf5069ffa3d0da41898d852a9b882f041cd1ae", "size": "199", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "public/ceps/49/072/029/cep.xml", "mode": "33188", "license": "apache-2.0", "language": []}}
{"text": "var dbModules = require('./db');\n\nexports.getList = function(res) {\n  query = dbModules.queryDatabase(\"SELECT first_name, last_name, reserve_list FROM participants WHERE cancelled='false' AND timestamp>'2019-02-01 12:00:00' ORDER BY id;\")\n    .then(function (data) {\n      res.render('list', { title: 'Deltagare', data: data });\n    })\n    .catch(function (error)\u00a0{\n      console.log(\"Database error: \" + error);\n      var err = new Error(error);\n      res.status(500);\n      res.render('error', { error: err });\n    });\n};\n", "meta": {"content_hash": "30644b272e97a4cfb914eefec00e5ad8", "timestamp": "", "source": "github", "line_count": 14, "max_line_length": 170, "avg_line_length": 37.42857142857143, "alnum_prop": 0.6240458015267175, "repo_name": "noletreni/nodefest", "id": "597624fbf2534cf8a080f77b8b659fda69147e97", "size": "525", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "modules/list.js", "mode": "33188", "license": "mit", "language": [{"name": "CSS", "bytes": "2167"}, {"name": "HTML", "bytes": "5553"}, {"name": "JavaScript", "bytes": "9803"}]}}
{"text": "<?php\n\nnamespace FormHandler\\Field;\n\nuse FormHandler\\Form;\n\nabstract class AbstractFormButton extends Element\n{\n    /**\n     * The form object where this image button is located in.\n     *\n     * @var Form\n     */\n    protected Form $form;\n\n    /**\n     * Is this button disabled?\n     *\n     * @var bool\n     */\n    protected bool $disabled = false;\n\n    /**\n     * The name of the button\n     *\n     * @var string\n     */\n    protected string $name = '';\n\n    /**\n     * The size of the button\n     *\n     * @var int|null\n     */\n    protected ?int $size = null;\n\n    /**\n     * Return if this field is disabled\n     *\n     * @return bool\n     */\n    public function isDisabled(): bool\n    {\n        return $this->disabled;\n    }\n\n    /**\n     * Set if this field is disabled and return the ImageButton reference\n     *\n     * @param bool $disabled\n     *\n     * @return $this\n     */\n    public function setDisabled(bool $disabled): self\n    {\n        $this->disabled = $disabled;\n\n        return $this;\n    }\n\n    /**\n     * Return the name of the ImageButton\n     *\n     * @return string\n     */\n    public function getName(): string\n    {\n        return $this->name;\n    }\n\n    /**\n     * Set the name of the field and return the ImageButton reference\n     *\n     * @param string $name\n     *\n     * @return $this\n     */\n    public function setName(string $name): self\n    {\n        $this->name = $name;\n\n        return $this;\n    }\n\n    /**\n     * Return the size of the field\n     *\n     * @return int|null\n     */\n    public function getSize(): ?int\n    {\n        return $this->size;\n    }\n\n    /**\n     * Set the size of the field and return the ImageButton reference\n     *\n     * @param int $size\n     *\n     * @return $this\n     */\n    public function setSize(int $size): self\n    {\n        $this->size = $size;\n\n        return $this;\n    }\n\n    /**\n     * Return string representation of this button\n     *\n     * @return string\n     */\n    public function render(): string\n    {\n        return $this->getForm()->getRenderer()->render($this);\n    }\n\n    /**\n     * Return the form instance of this field\n     *\n     * @return Form\n     */\n    public function getForm(): Form\n    {\n        return $this->form;\n    }\n}\n", "meta": {"content_hash": "b2f3885d310ee449ccae5bf74c43745b", "timestamp": "", "source": "github", "line_count": 128, "max_line_length": 73, "avg_line_length": 17.4375, "alnum_prop": 0.517921146953405, "repo_name": "FormHandler/FormHandler", "id": "45343c532b825abe21f9f261a0043ea2818dec5e", "size": "2232", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "src/Field/AbstractFormButton.php", "mode": "33188", "license": "mit", "language": [{"name": "PHP", "bytes": "369912"}]}}
{"text": "<?php\n\n/* TwigBundle:Exception:logs.html.twig */\nclass __TwigTemplate_94e492f92ba3ec55e1d4fb998d576f06a5a2e114d697c90222bddcbde287f4bd extends Twig_Template\n{\n    public function __construct(Twig_Environment $env)\n    {\n        parent::__construct($env);\n\n        $this->parent = false;\n\n        $this->blocks = array(\n        );\n    }\n\n    protected function doDisplay(array $context, array $blocks = array())\n    {\n        // line 1\n        echo \"<ol class=\\\"traces logs\\\">\n    \";\n        // line 2\n        $context['_parent'] = $context;\n        $context['_seq'] = twig_ensure_traversable((isset($context[\"logs\"]) ? $context[\"logs\"] : null));\n        foreach ($context['_seq'] as $context[\"_key\"] => $context[\"log\"]) {\n            // line 3\n            echo \"        <li\";\n            if (($this->getAttribute($context[\"log\"], \"priority\", array()) >= 400)) {\n                echo \" class=\\\"error\\\"\";\n            } elseif (($this->getAttribute($context[\"log\"], \"priority\", array()) >= 300)) {\n                echo \" class=\\\"warning\\\"\";\n            }\n            echo \">\n            \";\n            // line 4\n            echo twig_escape_filter($this->env, $this->getAttribute($context[\"log\"], \"priorityName\", array()), \"html\", null, true);\n            echo \" - \";\n            echo $this->env->getExtension('Symfony\\Bridge\\Twig\\Extension\\CodeExtension')->formatLogMessage($this->getAttribute($context[\"log\"], \"message\", array()), $this->getAttribute($context[\"log\"], \"context\", array()));\n            echo \"\n        </li>\n    \";\n        }\n        $_parent = $context['_parent'];\n        unset($context['_seq'], $context['_iterated'], $context['_key'], $context['log'], $context['_parent'], $context['loop']);\n        $context = array_intersect_key($context, $_parent) + $_parent;\n        // line 7\n        echo \"</ol>\n\";\n    }\n\n    public function getTemplateName()\n    {\n        return \"TwigBundle:Exception:logs.html.twig\";\n    }\n\n    public function isTraitable()\n    {\n        return false;\n    }\n\n    public function getDebugInfo()\n    {\n        return array (  46 => 7,  35 => 4,  26 => 3,  22 => 2,  19 => 1,);\n    }\n\n    /** @deprecated since 1.27 (to be removed in 2.0). Use getSourceContext() instead */\n    public function getSource()\n    {\n        @trigger_error('The '.__METHOD__.' method is deprecated since version 1.27 and will be removed in 2.0. Use getSourceContext() instead.', E_USER_DEPRECATED);\n\n        return $this->getSourceContext()->getCode();\n    }\n\n    public function getSourceContext()\n    {\n        return new Twig_Source(\"\", \"TwigBundle:Exception:logs.html.twig\", \"/home/pi/www/vendor/symfony/symfony/src/Symfony/Bundle/TwigBundle/Resources/views/Exception/logs.html.twig\");\n    }\n}\n", "meta": {"content_hash": "d9c2d04e0d340819e1a9e1e6a24e1da9", "timestamp": "", "source": "github", "line_count": 77, "max_line_length": 223, "avg_line_length": 35.27272727272727, "alnum_prop": 0.5589101620029455, "repo_name": "themayna/crawler", "id": "58650f3c79eb7a68dbe0b4e150db360023c69168", "size": "2716", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "var/cache/prod/twig/16/161576f8e375354c9afa45d6add2ab4c06fcf1188a72e541ac4ed52c678025e7.php", "mode": "33188", "license": "bsd-3-clause", "language": [{"name": "ApacheConf", "bytes": "286"}, {"name": "HTML", "bytes": "10841"}, {"name": "JavaScript", "bytes": "1107"}, {"name": "PHP", "bytes": "62896"}]}}
{"text": "/*\n * ESTGF - Escola Superior de Tecnologia e Gest\u00e3o de Felgueiras */\n/* IPP - Instituto Polit\u00e9cnico do Porto */\n/* LEI - Licenciatura em Engenharia Inform\u00e1tica*/\n/* Projeto Final 2013/2014 /*\n */\npackage model;\n\nimport java.util.ArrayList;\nimport javafx.beans.property.SimpleIntegerProperty;\nimport javafx.beans.property.SimpleStringProperty;\nimport validation.Validator;\n\n/**\n * Esta classe tem como objectivo criar um sub Or\u00e7amento\n *\n * @author Lu\u00eds Sousa - 8090228\n */\npublic class SubOrcamento {\n\n    private SimpleIntegerProperty id = new SimpleIntegerProperty();\n    private SimpleStringProperty nome = new SimpleStringProperty();\n    private SimpleIntegerProperty idOrcamento = new SimpleIntegerProperty();\n    private SimpleStringProperty data = new SimpleStringProperty();\n\n    public Integer getId() {\n        return id.get();\n    }\n\n    public String getNome() {\n        return nome.get();\n    }\n\n    public int getIdOrcamento() {\n        return idOrcamento.get();\n    }\n\n    public String getData() {\n        return data.get();\n    }\n\n    public void setId(int id) {\n        this.id.set(id);\n    }\n\n    public void setNome(String nome) {\n        this.nome.set(nome);\n    }\n    \n     public void setIdOrcamento(int id) {\n        this.idOrcamento.set(id);\n    }\n\n    public void setData(String data) {\n        this.data.set(data);\n    }\n\n    /**\n     * M\u00e9todo que devolve uma lista com os errors que prov\u00eam de campos que foram\n     * mal introduzidos\n     *\n     * @return array com erros\n     */\n    public ArrayList<String> validate() {\n        ArrayList<String> errors = new ArrayList<>();\n        Validator validator = new Validator();\n        errors.clear();\n\n        if (!validator.nomeSubOrcamento(this.getNome())) {\n            errors.add(\"nome\");\n        }\n\n        if (!validator.data(this.getData())) {\n            errors.add(\"data\");\n        }\n        return errors;\n    }\n\n    /**\n     * M\u00e9todo que devolve uma string com a informa\u00e7\u00e3o de um Sub Or\u00e7amento\n     *\n     * @return informa\u00e7\u00e3o de um Or\u00e7amento\n     */\n    @Override\n    public String toString() {\n        return \"\" + nome.get();\n    }\n}\n", "meta": {"content_hash": "d9f6ac732d859dc1621359452c616f6b", "timestamp": "", "source": "github", "line_count": 88, "max_line_length": 80, "avg_line_length": 24.113636363636363, "alnum_prop": 0.6258246936852027, "repo_name": "luis-sousa/GC-v1.1b", "id": "ad2d120cf6e6a3ed31ddf88fd4e709ef2e4c1fa7", "size": "2136", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "src/model/SubOrcamento.java", "mode": "33188", "license": "mit", "language": [{"name": "CSS", "bytes": "1780"}, {"name": "HTML", "bytes": "31770"}, {"name": "Java", "bytes": "694177"}]}}
{"text": "An old portfolio built with Express, jQuery, handlebars, and page\n", "meta": {"content_hash": "2cbcff9cc5741929bc5f9d43278fc1ae", "timestamp": "", "source": "github", "line_count": 1, "max_line_length": 65, "avg_line_length": 66.0, "alnum_prop": 0.803030303030303, "repo_name": "themarquisdesheric/portfolio-project", "id": "cd5bd103999f4e17cc30c45329fff989aa0b7bbe", "size": "87", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "README.md", "mode": "33188", "license": "mit", "language": [{"name": "CSS", "bytes": "3242"}, {"name": "HTML", "bytes": "2822"}, {"name": "JavaScript", "bytes": "2739"}]}}
{"text": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!--\nCopyright 2014 Microsoft Open Technologies, Inc.\n \nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \nhttp://www.apache.org/licenses/LICENSE-2.0\n \nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n--><preferencesets version=\"2.5.0\" default=\"windowsazure.com\">\n\t<preferenceset \n\t\tname=\"windowsazure.com\" \n\t\tblob=\"http://${storage-service-name}.blob.core.windows.net\" \n\t\tmanagement=\"https://management.core.windows.net/${subscription-id}\" \n\t\tportalURL=\"https://manage.windowsazure.com\" \n\t\tpublishsettings=\"http://go.microsoft.com/fwlink/?LinkId=296861\"/>\n\n\t<preferenceset \n\t\tname=\"windowsazure.cn (China)\"\n\t\tblob=\"http://${storage-service-name}.blob.core.chinacloudapi.cn\" \n\t\tmanagement=\"https://management.core.chinacloudapi.cn/${subscription-id}\"  \n\t\tportalURL=\"http://windowsazure.cn\" \n\t\tpublishsettings=\"https://manage.windowsazure.cn/publishsettings/index?schemaversion=1.0\"/>\n</preferencesets>\n", "meta": {"content_hash": "b0145d93d3ab1fd8e7aba574962a8b56", "timestamp": "", "source": "github", "line_count": 30, "max_line_length": 92, "avg_line_length": 44.46666666666667, "alnum_prop": 0.7593703148425787, "repo_name": "nandhanurrevanth/msopentech-tools-for-intellij", "id": "3ee5449616a45db3af52d5d748fe40e54f892574", "size": "1334", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "resources/preferencesets.xml", "mode": "33188", "license": "apache-2.0", "language": [{"name": "C#", "bytes": "5380"}, {"name": "HTML", "bytes": "83848"}, {"name": "Java", "bytes": "1317633"}, {"name": "JavaScript", "bytes": "254"}]}}
{"text": "import tigre\nimport numpy as np\nfrom tigre.utilities import sample_loader\nimport tigre.algorithms as algs\n\n#%% Geometry\ngeo = tigre.geometry_default(high_resolution=False)\n\n\n# Offsets\n## ####################################################################################\n# Lets try simnple offset: The detector gets completelly displaced\ngeo.offOrigin = np.array([0, 0, 0])  # Offset of image from origin   (mm)\ngeo.offDetector = np.array([200, 200])  # Offset of Detector            (mm)\n## ####################################################################################\n# Auxiliary\ngeo.accuracy = 0.5\n# Accuracy of FWD proj          (vx/sample)\n\n## Load data and generate projections\n# see previous demo for explanation\nangles = np.linspace(0, 2 * np.pi, 100)\n\n# Load thorax phatom data\nhead = sample_loader.load_head_phantom(geo.nVoxel)\nprojections = tigre.Ax(head, geo, angles)\n\n\n#%% lets see it\ntigre.plotproj(projections, angles)\n\n## we will skip reconstruction of this tests because the image is outside the detector\n\n\n## #####################################################################\n\n#%% Second test: lets test variying offsets:\n\ngeo.offDetector = np.vstack(\n    [10 * np.sin(angles), 20 * np.cos(angles)]\n).T  # Offset of Detector            (mm)\nprojections2 = tigre.Ax(head, geo, angles)\n## lets see it\ntigre.plotproj(projections2, angles)\n## reconstruction\nres = algs.sart(projections2, geo, angles, 10)\ntigre.plotimg(res, dim=\"z\")\n\n#%% Third test: lets vary everything\n\n# Lets make the image smaller\ngeo.nVoxel = np.array([128, 128, 128])  # number of voxels              (vx)\ngeo.sVoxel = np.array([256, 256, 256]) / 2  # total size of the image       (mm)\ngeo.dVoxel = geo.sVoxel / geo.nVoxel  # size of each voxel            (mm)\nhead = sample_loader.load_head_phantom(geo.nVoxel)\n\ngeo.offDetector = np.vstack(\n    [10 * np.sin(angles), 10 * np.cos(angles)]\n).T  # Offset of Detector            (mm)\ngeo.offOrigin = np.vstack(\n    [40 * np.sin(angles), np.linspace(-30, 30, 100), 40 * np.cos(angles)]\n).T  # Offset of image from origin   (mm)\n\nprojections3 = tigre.Ax(head, geo, angles)\n## lets see it\ntigre.plotproj(projections3, angles)\n## reconstruction\nres = algs.sart(projections3, geo, angles, 10)\ntigre.plotimg(res, dim=\"z\")\n", "meta": {"content_hash": "fe2ae2f5642346af4245e7cb1ce54657", "timestamp": "", "source": "github", "line_count": 69, "max_line_length": 87, "avg_line_length": 32.78260869565217, "alnum_prop": 0.610079575596817, "repo_name": "CERN/TIGRE", "id": "f61ba7bcef144cb08d79cb8bfc6a99ff3faaadfd", "size": "3177", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "Python/demos/d14_Offsets.py", "mode": "33188", "license": "bsd-3-clause", "language": [{"name": "C++", "bytes": "108432"}, {"name": "Cuda", "bytes": "453981"}, {"name": "Cython", "bytes": "28212"}, {"name": "MATLAB", "bytes": "636785"}, {"name": "Python", "bytes": "281064"}, {"name": "Shell", "bytes": "761"}, {"name": "TeX", "bytes": "32165"}]}}
{"text": "package controller;\r\n\r\npublic class PlayerObs implements ObsEntity {\r\n\r\n\tprivate String msg;\r\n\t@Override\r\n\tpublic void update(String msg) {\r\n\t\tthis.msg = msg;\r\n\t\t\r\n\t}\r\n\r\n\t@Override\r\n\tpublic String getState() {\r\n\t\tString tmp = msg;\r\n\t\tmsg = \"\";\r\n\t\treturn tmp;\r\n\t}\r\n\r\n}\r\n", "meta": {"content_hash": "49ab7cb1913e8b146fca341bdfc1e632", "timestamp": "", "source": "github", "line_count": 19, "max_line_length": 45, "avg_line_length": 14.157894736842104, "alnum_prop": 0.620817843866171, "repo_name": "MustafaAlsaid2022/1dv607", "id": "2f6f5c33fe92b35594d4499b68682cd1a70f3137", "size": "269", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "workshop3/grade2/src/main/java/controller/PlayerObs.java", "mode": "33188", "license": "mit", "language": [{"name": "Java", "bytes": "91427"}]}}
{"text": "BUILD_REFLECTION(willow::Animation);\n\nBUILD_ENUM_REFLECTION(willow::Animation::ClipMode)\n.Value(\"Stop\", willow::Animation::ClipMode::Stop)\n.Value(\"Loop\", willow::Animation::ClipMode::Loop)\n.Value(\"Ping_Pong\", willow::Animation::ClipMode::Ping_Pong);\n\nnamespace willow\n{\n\t////////////////////////\n\t///   Constructors   ///\n\n\tAnimation::Animation(const Path& path)\n\t{\n\t\tBinaryData data{ path };\n\t\tauto* cursor = data.get_data();\n\t\t\n\t\t// Get the number of frames in this animation\n\t\tthis->num_frames = *reinterpret_cast<uint32*>(cursor);\n\t\tcursor += sizeof(uint32);\n\n\t\t// Load x position frames\n\t\tbool hasXFrames = static_cast<bool>(*cursor);\n\t\tcursor += 1;\n\t\tif (hasXFrames)\n\t\t{\n\t\t\tthis->pos_x_frames = Array<float>(reinterpret_cast<float*>(cursor), num_frames);\n\t\t\tcursor += sizeof(float) * num_frames;\n\t\t}\n\n\t\t// Load y position frames\n\t\tbool hasYFrames = static_cast<bool>(*cursor);\n\t\tcursor += 1;\n\t\tif (hasYFrames)\n\t\t{\n\t\t\tthis->pos_y_frames = Array<float>(reinterpret_cast<float*>(cursor), num_frames);\n\t\t\tcursor += sizeof(float) * num_frames;\n\t\t}\n\n\t\t// Load z position frames\n\t\tbool hasZFrames = static_cast<bool>(*cursor);\n\t\tcursor += 1;\n\t\tif (hasZFrames)\n\t\t{\n\t\t\tthis->pos_z_frames = Array<float>(reinterpret_cast<float*>(cursor), num_frames);\n\t\t\tcursor += sizeof(float) * num_frames;\n\t\t}\n\t}\n\n\t///////////////////\n\t///   Methods   ///\n\n\tuint32 Animation::clip_frame(int32 frame, ClipMode mode) const\n\t{\n\t\tswitch (mode)\n\t\t{\n\t\tcase ClipMode::Stop:\n\t\t\treturn std::max<uint32>(0, std::min<uint32>(frame, num_frames));\n\t\t\t\n\t\tcase ClipMode::Loop:\n\t\t\treturn frame % num_frames;\n\n\t\tcase ClipMode::Ping_Pong:\n\t\t\tauto div = std::div(frame, num_frames); // Gives quotient and remainder\n\t\t\tint32 mult = (int32)std::pow(-1, div.quot); // Alternates between '1' and '-1'\n\n\t\t\tif (mult == -1)\n\t\t\t{\n\t\t\t\treturn num_frames - div.rem - 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn div.rem;\n\t\t\t}\n\t\t}\n\n\t\t// Not sure how else to handle case where 'mode' isn't valid\n\t\treturn 0;\n\t}\n\n\tVec3 Animation::sample_pos(int32 frame, ClipMode clip) const\n\t{\n\t\tVec3 result;\n\t\tauto clippedFrame = this->clip_frame(frame, clip);\n\n\t\tif (!this->pos_x_frames.IsEmpty())\n\t\t{\n\t\t\tresult.X = this->pos_x_frames[clippedFrame];\n\t\t}\n\n\t\tif (!this->pos_y_frames.IsEmpty())\n\t\t{\n\t\t\tresult.Y = this->pos_y_frames[clippedFrame];\n\t\t}\n\n\t\tif (!this->pos_z_frames.IsEmpty())\n\t\t{\n\t\t\tresult.Z = this->pos_z_frames[clippedFrame];\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tVec3 Animation::add_pos(int32 frame, ClipMode clip, const Vec3& pos) const\n\t{\n\t\tauto anim = this->sample_pos(frame, clip);\n\t\treturn pos + anim;\n\t}\n\n\tVec3 Animation::blend_pos(int32 frame, ClipMode clip, Vec3 pos, float influence) const\n\t{\n\t\tauto anim = this->sample_pos(frame, clip);\n\t\tinfluence = std::min(0.f, std::max(influence, 1.f));\n\n\t\t// Calculate influence\n\t\tanim *= influence;\n\t\tpos *= 1.f - influence;\n\n\t\treturn pos + anim;\n\t}\n\n\tQuat Animation::sample_rot(int32 frame, ClipMode clip) const\n\t{\n\t\tauto clippedFrame = this->clip_frame(frame, clip);\n\n\t\tif (!this->rot_frames.IsEmpty())\n\t\t{\n\t\t\treturn rot_frames[clippedFrame];\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn Quat();\n\t\t}\n\t}\n\n\tVec3 Animation::sample_scale(int32 frame, ClipMode clip) const\n\t{\n\t\tauto clippedFrame = this->clip_frame(frame, clip);\n\t\tVec3 result;\n\n\t\tif (!this->scale_x_frames.IsEmpty())\n\t\t{\n\t\t\tresult.X = scale_x_frames[clippedFrame];\n\t\t}\n\t\t\n\t\tif (!this->scale_y_frames.IsEmpty())\n\t\t{\n\t\t\tresult.Y = scale_y_frames[clippedFrame];\n\t\t}\n\n\t\tif (!this->scale_z_frames.IsEmpty())\n\t\t{\n\t\t\tresult.Z = scale_z_frames[clippedFrame];\n\t\t}\n\n\t\treturn result;\n\t}\n}\n", "meta": {"content_hash": "d1e758970ed16dc068397aff56323a53", "timestamp": "", "source": "github", "line_count": 158, "max_line_length": 87, "avg_line_length": 22.126582278481013, "alnum_prop": 0.6378718535469108, "repo_name": "willcassella/WillowEngine", "id": "711c1e851648538cf63ba9744033cc5b1339516e", "size": "3754", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "Modules/Engine/source/Resources/Animation.cpp", "mode": "33188", "license": "mit", "language": [{"name": "C", "bytes": "2007"}, {"name": "C++", "bytes": "630071"}, {"name": "CMake", "bytes": "4806"}, {"name": "GLSL", "bytes": "1810"}, {"name": "Python", "bytes": "10567"}, {"name": "Shell", "bytes": "1464"}]}}
{"text": "{-# LANGUAGE GADTs #-}\n-- | Bidirectional typechecking for higher-rank polymorphism\n--   Implementation of http://www.mpi-sws.org/~neelk/bidir.pdf\nmodule Type where\n\nimport Control.Applicative\nimport Control.Monad\nimport Data.Maybe\nimport Data.Monoid\nimport qualified Data.Set as S\n\nimport AST\nimport Context\nimport NameGen\nimport Pretty\n\n-- | Algorithmic subtyping:\n--   subtype \u0393 A B = \u0394 <=> \u0393 |- A <: B -| \u0394\nsubtype :: Context -> Polytype -> Polytype -> NameGen Context\nsubtype gamma typ1 typ2 =\n  traceNS \"subtype\" (gamma, typ1, typ2) $\n  checkwftype gamma typ1 $ checkwftype gamma typ2 $\n    case (typ1, typ2) of\n    -- <:Var\n    (TVar alpha, TVar alpha') | alpha == alpha' -> return gamma\n    -- <:Unit\n    (TUnit, TUnit) -> return gamma\n    -- <:Exvar\n    (TExists alpha, TExists alpha')\n      | alpha == alpha' && alpha `elem` existentials gamma -> return gamma\n    -- <:->\n    (TFun a1 a2, TFun b1 b2) -> do\n      theta <- subtype gamma b1 a1\n      subtype theta (apply theta a2) (apply theta b2)\n\n    -- <:forallR\n    (a, TForall alpha b) -> do\n      -- Do alpha conversion to avoid clashes\n      alpha' <- freshTVar\n      dropMarker (CForall alpha') <$>\n        subtype (gamma >: CForall alpha') a (typeSubst (TVar alpha') alpha b)\n      \n    -- <:forallL\n    (TForall alpha a, b) -> do\n      -- Do alpha conversion to avoid clashes\n      alpha' <- freshTVar\n      dropMarker (CMarker alpha') <$>\n        subtype (gamma >++ [CMarker alpha', CExists alpha'])\n                (typeSubst (TExists alpha') alpha a)\n                b\n\n    -- <:InstantiateL\n    (TExists alpha, a) | alpha `elem` existentials gamma\n                      && alpha `S.notMember` freeTVars a ->\n      instantiateL gamma alpha a\n    -- <:InstantiateR\n    (a, TExists alpha) | alpha `elem` existentials gamma\n                      && alpha `S.notMember` freeTVars a ->\n      instantiateR gamma a alpha\n    _ -> error $ \"subtype, don't know what to do with: \"\n                           ++ pretty (gamma, typ1, typ2)\n\n-- | Algorithmic instantiation (left):\n--   instantiateL \u0393 \u03b1 A = \u0394 <=> \u0393 |- \u03b1^ :=< A -| \u0394\ninstantiateL :: Context -> TVar -> Polytype -> NameGen Context\ninstantiateL gamma alpha a =\n  traceNS \"instantiateL\" (gamma, alpha, a) $\n  checkwftype gamma a $ checkwftype gamma (TExists alpha) $\n  case solve gamma alpha =<< monotype a of\n    -- InstLSolve\n    Just gamma' -> return gamma'\n    Nothing -> case a of\n      -- InstLReach\n      TExists beta \n        | ordered gamma alpha beta ->\n            return $ fromJust $ solve gamma beta (TExists alpha)\n        | otherwise ->\n            return $ fromJust $ solve gamma alpha (TExists beta)\n      -- InstLArr\n      TFun a1 a2   -> do\n        alpha1 <- freshTVar\n        alpha2 <- freshTVar\n        theta <- instantiateR (insertAt gamma (CExists alpha) $ context\n                                [ CExists alpha2\n                                , CExists alpha1\n                                , CExistsSolved alpha $ TFun (TExists alpha1)\n                                                             (TExists alpha2)\n                                ])\n                              a1 alpha1\n        instantiateL theta alpha2 (apply theta a2)\n      -- InstLAIIR\n      TForall beta b -> do\n        -- Do alpha conversion to avoid clashes\n        beta' <- freshTVar\n        dropMarker (CForall beta') <$>\n          instantiateL (gamma >++ [CForall beta'])\n                       alpha\n                       (typeSubst (TVar beta') beta b)\n      _ -> error $ \"The impossible happened! instantiateL: \"\n                ++ pretty (gamma, alpha, a)\n\n-- | Algorithmic instantiation (right):\n--   instantiateR \u0393 A \u03b1 = \u0394 <=> \u0393 |- A =:< \u03b1 -| \u0394\ninstantiateR :: Context -> Polytype -> TVar -> NameGen Context\ninstantiateR gamma a alpha =\n  traceNS \"instantiateR\" (gamma, a, alpha) $\n  checkwftype gamma a $ checkwftype gamma (TExists alpha) $\n  case solve gamma alpha =<< monotype a of\n    Just gamma' -> return gamma'\n    Nothing -> case a of\n      -- InstRReach\n      TExists beta \n        | ordered gamma alpha beta ->\n            return $ fromJust $ solve gamma beta (TExists alpha)\n        | otherwise ->\n            return $ fromJust $ solve gamma alpha (TExists beta)\n      -- InstRArr\n      TFun a1 a2   -> do\n        alpha1 <- freshTVar\n        alpha2 <- freshTVar\n        theta <- instantiateL (insertAt gamma (CExists alpha) $ context\n                                 [ CExists alpha2\n                                 , CExists alpha1\n                                 , CExistsSolved alpha $ TFun (TExists alpha1)\n                                                              (TExists alpha2)\n                                 ])\n                              alpha1\n                              a1\n        instantiateR theta (apply theta a2) alpha2\n      -- InstRAIIL\n      TForall beta b -> do\n        -- Do alpha conversion to avoid clashes\n        beta' <- freshTVar\n        dropMarker (CMarker beta') <$>\n          instantiateR (gamma >++ [CMarker beta', CExists beta'])\n                       (typeSubst (TExists beta') beta b)\n                       alpha\n      _ -> error $ \"The impossible happened! instantiateR: \"\n                ++ pretty (gamma, a, alpha)\n\n-- | Type checking:\n--   typecheck \u0393 e A = \u0394 <=> \u0393 |- e <= A -| \u0394\ntypecheck :: Context -> Expr -> Polytype -> NameGen Context\ntypecheck gamma expr typ =\n  traceNS \"typecheck\" (gamma, expr, typ) $\n  checkwftype gamma typ $ case (expr, typ) of\n    -- 1I\n    (EUnit, TUnit) -> return gamma\n    -- ForallI\n    (e, TForall alpha a) -> do\n      -- Do alpha conversion to avoid clashes\n      alpha' <- freshTVar\n      dropMarker (CForall alpha') <$>\n        typecheck (gamma >: CForall alpha') e (typeSubst (TVar alpha') alpha a)\n    -- ->I\n    (EAbs x e, TFun a b) -> do\n      x' <- freshVar\n      dropMarker (CVar x' a) <$>\n        typecheck (gamma >: CVar x' a) (subst (EVar x') x e) b\n    -- Sub\n    (e, b) -> do\n      (a, theta) <- typesynth gamma e\n      subtype theta (apply theta a) (apply theta b)\n\n-- | Type synthesising:\n--   typesynth \u0393 e = (A, \u0394) <=> \u0393 |- e => A -| \u0394\ntypesynth :: Context -> Expr -> NameGen (Polytype, Context)\ntypesynth gamma expr = traceNS \"typesynth\" (gamma, expr) $ checkwf gamma $\n  case expr of\n    -- Var\n    EVar x -> return\n      ( fromMaybe (error $ \"typesynth: not in scope \" ++ pretty (expr, gamma))\n                  (findVarType gamma x)\n      , gamma\n      )\n    -- Anno\n    EAnno e a -> do\n      delta <- typecheck gamma e a\n      return (a, delta)\n    -- 1I=>\n    EUnit -> return (TUnit, gamma)\n    {-\n    -- ->I=> Original rule\n    EAbs x e -> do\n      x'    <- freshVar\n      alpha <- freshTVar\n      beta  <- freshTVar\n      delta <- dropMarker (CVar x' (TExists alpha)) <$>\n        typecheck (gamma >++ [ CExists alpha\n                             , CExists beta\n                             , CVar x' (TExists alpha)\n                             ])\n                  (subst (EVar x') x e)\n                  (TExists beta)\n      return (TFun (TExists alpha) (TExists beta), delta)\n    -- -}\n    -- {-\n    -- ->I=> Full Damas-Milner type inference\n    EAbs x e -> do\n      x'    <- freshVar\n      alpha <- freshTVar\n      beta  <- freshTVar\n      (delta, delta')  <- breakMarker (CMarker alpha) <$>\n        typecheck (gamma >++ [ CMarker alpha\n                             , CExists alpha\n                             , CExists beta\n                             , CVar x' (TExists alpha)\n                             ])\n                  (subst (EVar x') x e)\n                  (TExists beta)\n      let tau = apply delta' (TFun (TExists alpha) (TExists beta))\n      let evars = unsolved delta'\n      uvars <- replicateM (length evars) freshTVar\n      return ( tforalls uvars $ typeSubsts (zip (map TVar uvars) evars) tau\n             , delta)\n    -- -}\n    -- ->E\n    EApp e1 e2 -> do\n      (a, theta) <- typesynth gamma e1\n      typeapplysynth theta (apply theta a) e2\n\n-- | Type application synthesising\n--   typeapplysynth \u0393 A e = (C, \u0394) <=> \u0393 |- A . e =>> C -| \u0394\ntypeapplysynth :: Context -> Polytype -> Expr -> NameGen (Polytype, Context)\ntypeapplysynth gamma typ e = traceNS \"typeapplysynth\" (gamma, typ, e) $\n  checkwftype gamma typ $\n  case typ of\n    -- ForallApp\n    TForall alpha a -> do\n      -- Do alpha conversion to avoid clashes\n      alpha' <- freshTVar\n      typeapplysynth (gamma >: CExists alpha')\n                     (typeSubst (TExists alpha') alpha a)\n                     e\n    -- alpha^App\n    TExists alpha -> do\n      alpha1 <- freshTVar\n      alpha2 <- freshTVar\n      delta <- typecheck (insertAt gamma (CExists alpha) $ context\n                            [ CExists alpha2\n                            , CExists alpha1\n                            , CExistsSolved alpha $ TFun (TExists alpha1)\n                                                         (TExists alpha2)\n                            ])\n                         e\n                         (TExists alpha1)\n      return (TExists alpha2, delta)\n    -- ->App\n    TFun a c -> do\n      delta <- typecheck gamma e a\n      return (c, delta)\n\n    _ -> error $ \"typeapplysynth: don't know what to do with: \"\n              ++ pretty (gamma, typ, e)\n\ntypesynthClosed :: Expr -> (Polytype, Context)\ntypesynthClosed e = let (a, gamma) = evalNameGen $ typesynth mempty e\n                     in (apply gamma a, gamma)\n\n-- Examples\neid :: Expr -- (\u03bbx. x) : \u2200 t. t \u2192 t\neid = eabs \"x\" (var \"x\") -: tforall \"t\" (tvar \"t\" --> tvar \"t\")\n-- Impredicative, so doesn't typecheck\nididunit :: Expr -- (\u03bbid. id id ()) ((\u03bbx. x) : \u2200 t. t \u2192 t)\nididunit = eabs \"id\" (((var \"id\" -: tforall \"t\" (tvar \"t\" --> tvar \"t\"))  $$ var \"id\") $$ eunit) $$ eid\nidunit :: Expr -- (\u03bbid. id ()) ((\u03bbx. x) : \u2200 t. t \u2192 t)\nidunit = eabs \"id\" (var \"id\" $$ eunit) $$ eid\nidid :: Expr -- id id\nidid = (eid $$ eid) -: tforall \"t\" (tvar \"t\" --> tvar \"t\")\n", "meta": {"content_hash": "43f2debd4a7e4abec8e9ac0865b6767b", "timestamp": "", "source": "github", "line_count": 269, "max_line_length": 103, "avg_line_length": 36.605947955390334, "alnum_prop": 0.5242205747943536, "repo_name": "ollef/Bidirectional", "id": "9073e5ffb4ddf2508ebe23021e39e7e47d775280", "size": "9892", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "Type.hs", "mode": "33188", "license": "bsd-3-clause", "language": [{"name": "Haskell", "bytes": "22658"}]}}
{"text": "\npackage org.apache.activemq.transport.udp;\n\nimport java.nio.ByteBuffer;\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * A default implementation of {@link SimpleBufferPool} which keeps a pool of direct\n * byte buffers.\n */\npublic class DefaultBufferPool extends SimpleBufferPool implements ByteBufferPool {\n\n    private List<ByteBuffer> buffers = new ArrayList<ByteBuffer>();\n    private Object lock = new Object();\n\n    public DefaultBufferPool() {\n        super(true);\n    }\n\n    public DefaultBufferPool(boolean useDirect) {\n        super(useDirect);\n    }\n\n    @Override\n    public synchronized ByteBuffer borrowBuffer() {\n        synchronized (lock) {\n            int size = buffers.size();\n            if (size > 0) {\n                return buffers.remove(size - 1);\n            }\n        }\n        return createBuffer();\n    }\n\n    @Override\n    public void returnBuffer(ByteBuffer buffer) {\n        synchronized (lock) {\n            buffers.add(buffer);\n        }\n    }\n\n    @Override\n    public void start() throws Exception {\n    }\n\n    @Override\n    public void stop() throws Exception {\n        synchronized (lock) {\n            /*\n             * for (Iterator iter = buffers.iterator(); iter.hasNext();) {\n             * ByteBuffer buffer = (ByteBuffer) iter.next(); }\n             */\n            buffers.clear();\n        }\n    }\n}\n", "meta": {"content_hash": "fc71225cc0726869de663cebb6c7b626", "timestamp": "", "source": "github", "line_count": 57, "max_line_length": 84, "avg_line_length": 23.80701754385965, "alnum_prop": 0.5902726602800294, "repo_name": "chirino/activemq", "id": "f4f6864bf0d331a574a5de2b024e8de70a8f5d30", "size": "2160", "binary": false, "copies": "2", "ref": "refs/heads/master", "path": "activemq-client/src/main/java/org/apache/activemq/transport/udp/DefaultBufferPool.java", "mode": "33188", "license": "apache-2.0", "language": [{"name": "Batchfile", "bytes": "17712"}, {"name": "C#", "bytes": "27536"}, {"name": "C++", "bytes": "17404"}, {"name": "CSS", "bytes": "34997"}, {"name": "HTML", "bytes": "158883"}, {"name": "Java", "bytes": "25304453"}, {"name": "JavaScript", "bytes": "438641"}, {"name": "PHP", "bytes": "3665"}, {"name": "Perl", "bytes": "4128"}, {"name": "Protocol Buffer", "bytes": "13867"}, {"name": "Python", "bytes": "14547"}, {"name": "Ruby", "bytes": "6594"}, {"name": "Scala", "bytes": "302023"}, {"name": "Shell", "bytes": "87001"}]}}
{"text": "`pypostalcode` is a fork of Nathan Van Gheem's excellent `pyzipcode` package. The zipcode database has been replaced with Canadian cities and their postal codes. The general usage is the same.\n\nCanadian postal codes are six characters with this format: `A1A 1A1`, where `A` is a letter and `1` is a digit, with a space separating the third and fourth characters. The first three digits are the Forward Sortation Area (FSA), and the last three are the Local Delivery Unit (LDU). The FSA information is available from the report \"Forward Sortation Area Boundary File, 2011 Census. Statistics Canada Catalogue no. 92-179-X\" retrieved from\nhttp://www12.statcan.gc.ca/census-recensement/2011/geo/bound-limit/bound-limit-2011-eng.cfm\n\nThis module only uses the FSA designator for location. There are over 800,000 FSA+LDU combinations, but the 1,645 unique FSA values provide coarse resolution for most applications.\n\nTo install:\n\n```\npip install pypostalcode\n```\n\nBasic usage:\n\n```pycon\n>>> from pypostalcode import PostalCodeDatabase\n>>> pcdb = PostalCodeDatabase()\n>>> pc = 'V5K'\n>>> location = pcdb[pc]\n>>> location.postalcode\n'V5K'\n>>> location.city\n'Vancouver (North Hastings- Sunrise)'\n>>> location.province\n'British Columbia'\n>>> location.longitude\n-123.0489\n>>> location.latitude\n49.293\n>>> location.timezone\n-8.0\n>>> location.dst\n1\n```\n\nGet a list of postal codes given a radius in kilometers:\n\n```pycon\n>>> from pypostalcode import PostalCodeDatabase\n>>> pcdb = PostalCodeDatabase()\n>>> pc = 'T3Z'\n>>> radius = 25\n>>> results = pcdb.get_postalcodes_around_radius(pc, radius)\n>>> for r in results:\n...     print(f'{r.postalcode}: {r.city}, {r.province}')\n... \nT3B: Calgary (Montgomery / Bowness / Silver Springs / Greenwood), Alberta\nT3G: Calgary (Hawkwood / Arbour Lake / Royal Oak / Rocky Ridge), Alberta\nT3H: Calgary (Discovery Ridge / Signal Hill / Aspen Woods / Patterson / Cougar Ridge), Alberta\nT3L: Calgary (Tuscany / Scenic Acres), Alberta\nT3R: Calgary Northwest, Alberta\nT3Z: Redwood Meadows, Alberta\nT4C: Cochrane, Alberta\n```\n\n\u00a9 This data includes information copied with permission from Canada Post Corporation\n\nThis data includes data from [GeoNames](https://www.geonames.org/), which is distributed under a [CC BY 4.0](https://creativecommons.org/licenses/by/4.0/) license\n", "meta": {"content_hash": "dbdf9289eebeac5efd13a96dfe9b4c66", "timestamp": "", "source": "github", "line_count": 59, "max_line_length": 441, "avg_line_length": 38.83050847457627, "alnum_prop": 0.7468354430379747, "repo_name": "inkjet/pypostalcode", "id": "796a0b98070f427de9c1276ff0dc1622c9b0427c", "size": "2310", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "README.md", "mode": "33188", "license": "mit", "language": [{"name": "Python", "bytes": "5940"}]}}
{"text": "\ufeffusing System;\nusing MicrosoftResearch.Infer;\nusing MicrosoftResearch.Infer.Distributions;\nusing MicrosoftResearch.Infer.Maths;\nusing MicrosoftResearch.Infer.Models;\n\nnamespace AVPTM\n{\n    /// <summary>\n    /// Latent Dirichlet Allocation (LDA) prediction model implemented in Infer.NET.\n    /// Use this class for obtaining predictive distributions over words for\n    /// documents with known topic distributions\n    /// </summary>\n    public class LDAPredictionModel\n    {\n        /// <summary>\n        /// Size of vocabulary\n        /// </summary>\n        public int SizeVocab { get; protected set; }\n        /// <summary>\n        /// Number of Topics\n        /// </summary>\n        public int NumTopics { get; protected set; }\n        /// <summary>\n        /// Sparsity specification for predictive distributions over words\n        /// </summary>\n        public Sparsity PredictionSparsity { get; protected set; }\n        /// <summary>\n        /// Inference engine\n        /// </summary>\n        public InferenceEngine Engine { get; protected set; }\n\n        /// <summary>\n        /// A predicted word\n        /// </summary>\n        protected Variable<int> Word;\n        /// <summary>\n        /// Per document distribution over topics (to be inferred)\n        /// </summary>\n        protected Variable<Vector> Theta;\n        /// <summary>\n        /// Per topic distribution over words (to be inferred)\n        /// </summary>\n        protected VariableArray<Vector> Phi;\n        /// <summary>\n        /// Prior for <see cref=\"Theta\"/>\n        /// </summary>\n        protected Variable<Dirichlet> ThetaPrior;\n        /// <summary>\n        /// Prior for <see cref=\"Phi\"/>\n        /// </summary>\n        protected VariableArray<Dirichlet> PhiPrior;\n\n        /// <summary>\n        /// Constructs an LDA model\n        /// </summary>\n        /// <param name=\"sizeVocab\">Size of vocabulary</param>\n        /// <param name=\"numTopics\">Number of topics</param>\n        public LDAPredictionModel(int sizeVocab, int numTopics)\n        {\n            SizeVocab = sizeVocab;\n            NumTopics = numTopics;\n            PredictionSparsity = Sparsity.Sparse;\n\n            //---------------------------------------------\n            // The model\n            //---------------------------------------------\n            var W = new Range(SizeVocab).Named(\"W\");\n            var T = new Range(NumTopics).Named(\"T\");\n\n            ThetaPrior = Variable.New<Dirichlet>().Named(\"ThetaPrior\");\n            PhiPrior = Variable.Array<Dirichlet>(T).Named(\"PhiPrior\").Attrib(new ValueRange(W));\n            Theta = Variable.New<Vector>().Named(\"Theta\");\n            Phi = Variable.Array<Vector>(T).Named(\"Phi\");\n            Theta = Variable.Random<Vector, Dirichlet>(ThetaPrior);\n            Phi[T] = Variable.Random<Vector, Dirichlet>(PhiPrior[T]);\n\n            Word = Variable.New<int>().Named(\"Word\");\n            Word.SetSparsity(PredictionSparsity);\n            var topic = Variable.Discrete(Theta).Attrib(new ValueRange(T)).Named(\"topic\");\n            using (Variable.Switch(topic))\n            {\n                Word.SetTo(Variable.Discrete(Phi[topic]));\n            }\n\n            Engine = new InferenceEngine(new VariationalMessagePassing());\n            Engine.Compiler.ShowWarnings = false;\n        }\n\n        /// <summary>\n        /// Gets the predictive distributions for a set of documents\n        /// <para>\n        /// Topic distributions per document (<see cref=\"Theta\"/>) and word distributions\n        /// per topic (<see cref=\"Phi\"/>) are observed, document distributions over words\n        /// are inferred.\n        /// </para>\n        /// </summary>\n        /// <param name=\"postTheta\">The posterior document topic distributions</param>\n        /// <param name=\"postPhi\">The posterior topic word distributions</param>\n        /// <returns>The predictive distribution over words for each document</returns>\n        public virtual Discrete[] Predict(Dirichlet[] postTheta, Dirichlet[] postPhi)\n        {\n            int numDocs = postTheta.Length;\n            var result = new Discrete[numDocs];\n            bool showProgress = Engine.ShowProgress;\n            Engine.ShowProgress = false;\n            try\n            {\n                for (int i = 0; i < numDocs; i++)\n                {\n                    ThetaPrior.ObservedValue = postTheta[i];\n                    PhiPrior.ObservedValue = postPhi;\n                    result[i] = Engine.Infer<Discrete>(Word);\n                    if (showProgress)\n                    {\n                        if (i % 80 == 0) Console.WriteLine(\"\");\n                        Console.Write(\".\");\n                    }\n                }\n            }\n            finally\n            {\n                Engine.ShowProgress = showProgress;\n            }\n\n            if (showProgress)\n            {\n                Console.WriteLine();\n            }\n\n            return result;\n        }\n    }\n}\n", "meta": {"content_hash": "0029552c614a72deaaf1271f96330270", "timestamp": "", "source": "github", "line_count": 134, "max_line_length": 96, "avg_line_length": 36.75373134328358, "alnum_prop": 0.5342131979695431, "repo_name": "IntelligentSystemsLaboratory/JGI-PURE-Challenge", "id": "749d17e5d47ffeaaf3963cce83f5ecda0b4445bb", "size": "4927", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "AVPTM/LDAPredictionModel.cs", "mode": "33188", "license": "mit", "language": [{"name": "C#", "bytes": "46056"}, {"name": "CSS", "bytes": "2347"}, {"name": "HTML", "bytes": "38674"}, {"name": "JavaScript", "bytes": "66601"}, {"name": "Jupyter Notebook", "bytes": "103549"}, {"name": "Python", "bytes": "1811"}, {"name": "Ruby", "bytes": "13"}]}}
{"text": "@implementation JSZVCRResourceManager\n\n#pragma mark - Class File Path Helper Methods\n\n+ (NSString *)pathForFile:(NSString *)fileName inBundleForClass:(Class)classInBundle {\n    NSBundle *bundle = [NSBundle bundleForClass:classInBundle];\n    return [self pathForFile:fileName inBundle:bundle];\n}\n\n+ (NSString *)pathForFile:(NSString *)fileName inBundle:(NSBundle *)bundle {\n    return [bundle pathForResource:fileName.stringByDeletingPathExtension\n                            ofType:fileName.pathExtension];\n}\n\n+ (NSString *)pathForFileMatchingTest:(XCTestCase *)testCase inBundle:(NSBundle *)bundle {\n    NSString *currentTestCaseMethod = NSStringFromSelector(testCase.invocation.selector);\n    NSString *filePath = [NSString stringWithFormat:@\"%@.plist\", currentTestCaseMethod];\n    return [self pathForFile:filePath inBundle:bundle];\n}\n\n+ (NSBundle *)bundleWithName:(NSString *)bundleName containingClass:(Class)classInBundle {\n    NSBundle *classBundle = [NSBundle bundleForClass:classInBundle];\n    return [NSBundle bundleWithPath:[classBundle pathForResource:bundleName ofType:@\"bundle\"]];\n}\n\n+ (NSString *)pathForFileMatchingTest:(XCTestCase *)testCase {\n    return [self pathForFileMatchingTest:testCase inBundle:[self bundleWithName:[self nameFromClass:testCase.class] containingClass:testCase.class]];\n}\n\n+ (NSArray *)networkResponsesForFilePath:(NSString *)filePath {\n    NSParameterAssert(filePath);\n    return [[NSArray alloc] initWithContentsOfFile:filePath];\n}\n\n+ (NSArray *)networkResponsesForTest:(XCTestCase *)testCase {\n    NSParameterAssert(testCase);\n    return [self networkResponsesForFilePath:[self pathForFileMatchingTest:testCase]];\n}\n\n+ (NSBundle *)bundleForTestInDocumentsDirectory:(XCTestCase *)testCase {\n    NSParameterAssert(testCase);\n    NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);\n    NSString *documentsPath = [paths objectAtIndex:0]; //Get the docs directory\n    NSString *bundleName = [NSString stringWithFormat:@\"%@.bundle\", [self nameFromClass:testCase.class]];\n    NSString *bundlePath = [documentsPath stringByAppendingPathComponent:bundleName];\n    BOOL isDir;\n    if (![[NSFileManager defaultManager] fileExistsAtPath:bundlePath isDirectory:&isDir]) {\n        NSError *bundleCreationError = nil;\n        [[NSFileManager defaultManager] createDirectoryAtPath:bundlePath withIntermediateDirectories:YES attributes:nil error:&bundleCreationError];\n        NSLog(@\"bundleCreationError: %@\", bundleCreationError);\n    }\n    return [NSBundle bundleWithPath:bundlePath];\n}\n\n// This is intended for differentiating between Swift and Objective-C\n// runtimes.In Swift, the class name is <Module Name>.<Class Name> whereas\n// in Objective-C the class name is <Class Name>\n+ (NSString *)nameFromClass:(Class)cls {\n    NSString *className = NSStringFromClass(cls);\n    NSRange dotRange = [className rangeOfString:@\".\" options:NSBackwardsSearch];\n    if (dotRange.location == NSNotFound) {\n        return className;\n    } else {\n        return [className substringFromIndex:(dotRange.location + 1)];\n    }\n}\n\n+ (BOOL)saveToDisk:(JSZVCRRecorder *)recorder withFilePath:(NSString *)filePath {\n    // should assert that documents directory isn't automatically appended!\n    NSParameterAssert(filePath);\n    NSAssert([filePath.pathExtension isEqualToString:@\"plist\"], @\"filePath extension must be .plist not %@\", filePath.pathExtension);\n    NSLog(@\"filePath = %@\", filePath);\n    NSArray *dumpArray = recorder.allRecordingsForPlist;\n    return [dumpArray writeToFile:filePath atomically:YES];\n}\n\n+ (BOOL)saveToDisk:(JSZVCRRecorder *)recorder forTest:(XCTestCase *)testCase {\n    NSBundle *documentsBundle = [self bundleForTestInDocumentsDirectory:testCase];\n    NSString *currentTestCaseMethod = NSStringFromSelector(testCase.invocation.selector);\n    NSString *fileName = [NSString stringWithFormat:@\"%@.plist\", currentTestCaseMethod];\n    NSString *filePath = [documentsBundle.bundlePath stringByAppendingPathComponent:fileName];\n    return [self saveToDisk:recorder withFilePath:filePath];\n}\n\n@end\n", "meta": {"content_hash": "e57c777d7f6f790a830469387bc705f6", "timestamp": "", "source": "github", "line_count": 85, "max_line_length": 149, "avg_line_length": 48.01176470588236, "alnum_prop": 0.7608429306542515, "repo_name": "minddistrict/JSZVCR", "id": "c62003fec327bf060f552d5e10ba2ab54fc88170", "size": "4288", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "JSZVCR/Classes/Resources/JSZVCRResourceManager.m", "mode": "33188", "license": "mit", "language": [{"name": "Objective-C", "bytes": "110147"}, {"name": "Ruby", "bytes": "4675"}]}}
{"text": "// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {DefaultUpdater, UpdateOptions} from '../default';\nimport {logger as defaultLogger, Logger} from '../../util/logger';\n\nconst INLINE_UPDATE_REGEX = /{x-version-update:([\\w\\-_]+):(current|released)}/;\nconst BLOCK_START_REGEX =\n  /{x-version-update-start:([\\w\\-_]+):(current|released)}/;\nconst BLOCK_END_REGEX = /{x-version-update-end}/;\nconst VERSION_REGEX = /\\d+\\.\\d+\\.\\d+(-\\w+(\\.\\d+)?)?(-SNAPSHOT)?/;\n\ninterface JavaUpdateOptions extends UpdateOptions {\n  isSnapshot?: boolean;\n}\n\n/**\n * Updates a file annotated with region markers. These region markers are\n * either denoted inline with `{x-version-update:<component-name>:current|released}`\n * or with a `{x-version-update-start:<component-name>}` and `{x-version-update-end}`.\n */\nexport class JavaUpdate extends DefaultUpdater {\n  isSnapshot: boolean;\n  constructor(options: JavaUpdateOptions) {\n    super(options);\n    this.isSnapshot = !!options.isSnapshot;\n  }\n  /**\n   * Given initial file contents, return updated contents.\n   * @param {string} content The initial content\n   * @returns {string} The updated content\n   */\n  updateContent(content: string, logger: Logger = defaultLogger): string {\n    if (!this.versionsMap) {\n      logger.warn('missing versions map');\n      return content;\n    }\n    const newLines: string[] = [];\n    let blockPackageName: string | null = null;\n    content.split(/\\r?\\n/).forEach(line => {\n      let match = line.match(INLINE_UPDATE_REGEX);\n      if (match && (!this.isSnapshot || match[2] === 'current')) {\n        const newVersion = this.versionsMap!.get(match[1]);\n        if (newVersion) {\n          newLines.push(line.replace(VERSION_REGEX, newVersion.toString()));\n        } else {\n          newLines.push(line);\n        }\n      } else if (blockPackageName) {\n        const newVersion = this.versionsMap!.get(blockPackageName);\n        if (newVersion) {\n          newLines.push(line.replace(VERSION_REGEX, newVersion.toString()));\n        } else {\n          newLines.push(line);\n        }\n        if (line.match(BLOCK_END_REGEX)) {\n          blockPackageName = null;\n        }\n      } else {\n        match = line.match(BLOCK_START_REGEX);\n        if (match && (!this.isSnapshot || match[2] === 'current')) {\n          blockPackageName = match[1];\n        }\n        newLines.push(line);\n      }\n    });\n    return newLines.join('\\n');\n  }\n}\n", "meta": {"content_hash": "5b5d6167f07f1a405e4485aaed729ad7", "timestamp": "", "source": "github", "line_count": 80, "max_line_length": 86, "avg_line_length": 36.7125, "alnum_prop": 0.6475995914198162, "repo_name": "googleapis/release-please", "id": "b88bdda3d223de4d0438d8b9a3413533d7be3df4", "size": "2937", "binary": false, "copies": "1", "ref": "refs/heads/main", "path": "src/updaters/java/java-update.ts", "mode": "33188", "license": "apache-2.0", "language": [{"name": "Elixir", "bytes": "613"}, {"name": "Go", "bytes": "626"}, {"name": "HCL", "bytes": "856"}, {"name": "Handlebars", "bytes": "562"}, {"name": "Java", "bytes": "3207"}, {"name": "JavaScript", "bytes": "210854"}, {"name": "PHP", "bytes": "1722"}, {"name": "Python", "bytes": "4849"}, {"name": "Ruby", "bytes": "1350"}, {"name": "TypeScript", "bytes": "1192232"}]}}
{"text": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://www.netbeans.org/ns/project/1\">\n    <type>org.netbeans.modules.java.j2seproject</type>\n    <configuration>\n        <data xmlns=\"http://www.netbeans.org/ns/j2se-project/3\">\n            <name>AutumnCompiler</name>\n            <source-roots>\n                <root id=\"src.dir\"/>\n            </source-roots>\n            <test-roots>\n                <root id=\"test.src.dir\"/>\n            </test-roots>\n        </data>\n        <references xmlns=\"http://www.netbeans.org/ns/ant-project-references/1\"/>\n        <spellchecker-wordlist xmlns=\"http://www.netbeans.org/ns/spellchecker-wordlist/1\">\n            <word>ArgumentStack</word>\n            <word>bd</word>\n            <word>bi</word>\n            <word>BigInteger</word>\n            <word>bool</word>\n            <word>ConcreteFunctionalList</word>\n            <word>CtorTester</word>\n            <word>ds</word>\n            <word>eq</word>\n            <word>executionTime</word>\n            <word>expectField</word>\n            <word>expectMethod</word>\n            <word>FallingSky</word>\n            <word>filesOf</word>\n            <word>FloatTypes</word>\n            <word>getAnnotation</word>\n            <word>getClass</word>\n            <word>getCompareTo</word>\n            <word>getDeclaredConstructors</word>\n            <word>getEquals</word>\n            <word>getHashCode</word>\n            <word>getInterfaces</word>\n            <word>getIterator</word>\n            <word>getMethod</word>\n            <word>getName</word>\n            <word>getSimpleName</word>\n            <word>getSuperclass</word>\n            <word>getSuperinterfaces</word>\n            <word>getToString</word>\n            <word>InaccessibleClass</word>\n            <word>incrementAndGet</word>\n            <word>IntegerTypes</word>\n            <word>intValue</word>\n            <word>invoke</word>\n            <word>isAnnotation</word>\n            <word>isAnnotationPresent</word>\n            <word>isAssignableFrom</word>\n            <word>isClass</word>\n            <word>isEnum</word>\n            <word>isInterface</word>\n            <word>isLocalClass</word>\n            <word>listIterator</word>\n            <word>Ljava</word>\n            <word>MalformedTestException</word>\n            <word>MethodCompareTo</word>\n            <word>MethodEquals</word>\n            <word>moduleAnnotationDefinitions</word>\n            <word>moduleDesignDefinitions</word>\n            <word>moduleExceptionDefinitions</word>\n            <word>moduleFunctions</word>\n            <word>ModuleInfo</word>\n            <word>modulos</word>\n            <word>newArray</word>\n            <word>parameterTypes</word>\n            <word>readBytes</word>\n            <word>readLines</word>\n            <word>readText</word>\n            <word>ReflectionTester</word>\n            <word>ReflectiveTester</word>\n            <word>RetentionPolicy</word>\n            <word>returnType</word>\n            <word>shiftLeft</word>\n            <word>SpecialMethods</word>\n            <word>StaticFieldTester</word>\n            <word>str</word>\n            <word>superclasses</word>\n            <word>TestCase</word>\n            <word>ThisTypeDoesNotExist</word>\n            <word>toMap</word>\n            <word>TypedFunctor</word>\n            <word>UnitTester</word>\n            <word>valueOf</word>\n            <word>writeBytes</word>\n            <word>writeLines</word>\n            <word>writeText</word>\n            <word>XA</word>\n            <word>XE</word>\n        </spellchecker-wordlist>\n    </configuration>\n</project>\n", "meta": {"content_hash": "dcc6b9b8d521b7fd6c1ccb728132d4f3", "timestamp": "", "source": "github", "line_count": 95, "max_line_length": 90, "avg_line_length": 37.747368421052634, "alnum_prop": 0.5303959843837145, "repo_name": "Mackenzie-High/autumn", "id": "f4f305e7535afd5ece3193855b86ab0ba57433dd", "size": "3586", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "nbproject/project.xml", "mode": "33188", "license": "apache-2.0", "language": [{"name": "Java", "bytes": "2604069"}, {"name": "Shell", "bytes": "1208"}]}}
{"text": "Sample app to demonstrate dependency injection using AutoFac IoC container\n", "meta": {"content_hash": "3f033be974f7397f571d26faf4891f3f", "timestamp": "", "source": "github", "line_count": 1, "max_line_length": 74, "avg_line_length": 75.0, "alnum_prop": 0.8666666666666667, "repo_name": "andygjp/DepInjAndInvOfContSample", "id": "83dbbb396e6f501ccd4ebc52de07109731f20d77", "size": "102", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "README.md", "mode": "33188", "license": "mit", "language": [{"name": "ASP", "bytes": "115"}, {"name": "C#", "bytes": "11514"}, {"name": "CSS", "bytes": "513"}, {"name": "HTML", "bytes": "5127"}, {"name": "JavaScript", "bytes": "19979"}]}}
{"text": "package es.npatarino.android.gotchallenge.chat.message.usecases;\n\nimport es.npatarino.android.gotchallenge.base.detail.usecases.UseCase;\nimport es.npatarino.android.gotchallenge.chat.conversation.model.Conversation;\nimport es.npatarino.android.gotchallenge.chat.message.MessageDomain;\nimport es.npatarino.android.gotchallenge.chat.message.model.Message;\nimport rx.Observable;\nimport rx.Scheduler;\n\npublic class SubscribeToMessage extends UseCase<Message> {\n\n  private MessageDomain.Repository repository;\n  private Conversation conversation;\n\n  public SubscribeToMessage(MessageDomain.Repository repository,\n                            Scheduler uiThread,\n                            Scheduler executorThread) {\n    super(uiThread, executorThread);\n    this.repository = repository;\n  }\n\n  public Observable<Message> execute(Conversation conversation) {\n    this.conversation = conversation;\n    return execute();\n  }\n\n  @Override\n  protected Observable<Message> buildUseCaseObservable() {\n    return scheduleOn(repository.subscribeToMessages(conversation));\n  }\n}\n", "meta": {"content_hash": "feb006d5446ca8d307411eb803a6706c", "timestamp": "", "source": "github", "line_count": 31, "max_line_length": 78, "avg_line_length": 34.354838709677416, "alnum_prop": 0.7671361502347418, "repo_name": "tonilopezmr/Game-of-Thrones", "id": "b37cdc0a4acb8f4da363642dc3902638c13c5b0e", "size": "1065", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "app/src/main/java/es/npatarino/android/gotchallenge/chat/message/usecases/SubscribeToMessage.java", "mode": "33188", "license": "apache-2.0", "language": [{"name": "Java", "bytes": "271383"}]}}
{"text": "import type { IRowWrapperRenderer } from '../../types';\nimport { DATAGRID_CHECK_SELECT_ATTR, SelectionType } from '../../constants';\nimport { normalizedCellRenderer } from '../normalizers';\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport const rowWrapper: IRowWrapperRenderer = (node, options, state, index, columns) => {\n  const el = document.createElement('ul');\n  el.className = 'list-group list-group-flush sf-table__collapsed sf-table__collapsable border-bottom';\n  const elHeader = document.createElement('li');\n  const elHeaderRow = document.createElement('div');\n  elHeaderRow.className = 'row';\n  elHeader.className = 'list-group-item bg-light sf-table__group';\n\n  node.appendChild(el);\n\n  let col = 12;\n\n  if (options.selectable) {\n    col = 11;\n    const td = document.createElement('div');\n    td.className = 'col-1';\n    const checkbox = document.createElement('input');\n    checkbox.setAttribute(DATAGRID_CHECK_SELECT_ATTR, '');\n    checkbox.type = options.selectable.type === SelectionType.MULTIPLE ? 'checkbox' : 'radio';\n    checkbox.value = state.data[index][options.selectable.id];\n    checkbox.checked = state.isSelected(checkbox.value);\n    checkbox.addEventListener('change', () => {\n      state.parent.toggleSelection(checkbox.value, checkbox.checked);\n    });\n    td.classList.add('sf-table__select');\n    td.appendChild(checkbox);\n    elHeaderRow.appendChild(td);\n  }\n\n  const data = state.data[index];\n  if (options.renderAsList) {\n    const { summaryColumn } = options.renderAsList;\n    const d = document.createElement('div');\n    d.className = `col-${col}`;\n    const cI = columns.find((c) => c.id === summaryColumn)!;\n    const cell = data[summaryColumn];\n    const renderer = normalizedCellRenderer((options.cells || {})[summaryColumn], true);\n    const r = renderer.render(cell, data, cI, options, index, state);\n    if (r) {\n      if (typeof r === 'string') {\n        d.innerHTML = r;\n      } else {\n        d.appendChild(r);\n      }\n    }\n    elHeaderRow.appendChild(d);\n  }\n  elHeader.addEventListener('click', () => {\n    el.classList.toggle('sf-table__collapsed');\n  });\n  elHeader.appendChild(elHeaderRow);\n  el.appendChild(elHeader);\n  return el;\n};\n", "meta": {"content_hash": "a71608327f7b3ccca49bcedb0677c03b", "timestamp": "", "source": "github", "line_count": 59, "max_line_length": 103, "avg_line_length": 37.47457627118644, "alnum_prop": 0.6734509271822705, "repo_name": "spiral/toolkit", "id": "960ca356282df221b25554fce04f88c579ccb52a", "size": "2211", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "packages/datagrid/src/render/list/rowWrapper.ts", "mode": "33188", "license": "mit", "language": [{"name": "CSS", "bytes": "400"}, {"name": "Hack", "bytes": "21252"}, {"name": "JavaScript", "bytes": "73222"}, {"name": "PHP", "bytes": "9011"}, {"name": "SCSS", "bytes": "22888"}, {"name": "TypeScript", "bytes": "299930"}]}}
{"text": "/**\n * canvasInteractor.js (c) 2018 Stefan Goessner\n * @file interaction manager for html `canvas`.\n * @author Stefan Goessner\n * @license MIT License\n */\n/* jshint -W014 */\n// Managing multiple canvases per static interactor as singleton ... \n// .. using a single requestAnimationFrame loop !\nconst canvasInteractor = {\n    create() {\n        const o = Object.create(this.prototype);\n        o.constructor.apply(o,arguments); \n        return o; \n    },\n    // global static tickTimer properties\n    fps: '?',\n    fpsOrigin: 0,\n    frames: 0,\n    rafid: 0,\n    instances: [],\n    // global static timer methods\n    tick(time) {\n        canvasInteractor.fpsCount(time);\n        for (const instance of canvasInteractor.instances) {\n            instance.notify('tick',{t:time,dt:(time-instance.t)/1000,dirty:instance.dirty});  // notify listeners .. \n            instance.t = time;\n            instance.dirty = false;\n        }\n        canvasInteractor.rafid = requestAnimationFrame(canvasInteractor.tick);   // request next animation frame ...\n    },\n    add(instance) {\n        canvasInteractor.instances.push(instance);\n        if (canvasInteractor.instances.length === 1)  // first instance added ...\n            canvasInteractor.tick(canvasInteractor.fpsOrigin = performance.now());\n    },\n    remove(instance) {\n        canvasInteractor.instances.splice(canvasInteractor.instances.indexOf(instance),1);\n        if (canvasInteractor.instances.length === 0)   // last instance removed ...\n            cancelAnimationFrame(canvasInteractor.rafid);\n    },\n    fpsCount(time) {\n        if (time - canvasInteractor.fpsOrigin > 1000) {  // one second interval reached ...\n            const fps = ~~(canvasInteractor.frames*1000/(time - canvasInteractor.fpsOrigin) + 0.5); // ~~ as Math.floor()\n            if (fps !== canvasInteractor.fps)\n                for (const instance of canvasInteractor.instances)\n                    instance.notify('fps',canvasInteractor.fps=fps);\n            canvasInteractor.fpsOrigin = time;\n            canvasInteractor.frames = 0;\n        }\n        canvasInteractor.frames++;\n    },\n\n    prototype: {\n        constructor(ctx, {x,y,scl,cartesian}) {\n            // canvas interaction properties\n            this.ctx = ctx;\n            this.view = {x:x||0,y:y||0,scl:scl||1,cartesian:cartesian||false};\n            this.evt = {\n                type: false,\n                basetype: false,\n                x: -2, y:-2,\n                xi: 0, yi:0,\n                dx: 0, dy: 0,\n                btn: 0,\n                xbtn: 0, ybtn: 0,\n                xusr: -2, yusr: -2,\n                dxusr: 0, dyusr: 0,\n                delta: 0,\n                inside: false,\n                hit: false,  // something hit by pointer ...\n                dscl: 1,     // for zooming ...\n                eps: 5       // some pixel tolerance ...\n            };\n            this.dirty = true;\n            // event handler registration\n            const canvas = ctx.canvas;\n            canvas.addEventListener(\"pointermove\", this, false);\n            canvas.addEventListener(\"pointerdown\", this, false);\n            canvas.addEventListener(\"pointerup\", this, false);\n            canvas.addEventListener(\"pointerenter\", this, false);\n            canvas.addEventListener(\"pointerleave\", this, false);\n            canvas.addEventListener(\"wheel\", this, false);\n            canvas.addEventListener(\"pointercancel\", this, false);\n        },\n        deinit() {\n            const canvas = this.ctx.canvas;\n\n            canvas.removeEventListener(\"pointermove\", this, false);\n            canvas.removeEventListener(\"pointerdown\", this, false);\n            canvas.removeEventListener(\"pointerup\", this, false);\n            canvas.removeEventListener(\"pointerenter\", this, false);\n            canvas.removeEventListener(\"pointerleave\", this, false);\n            canvas.removeEventListener(\"wheel\", this, false);\n            canvas.removeEventListener(\"pointercancel\", this, false);\n\n            this.endTimer();\n\n            delete this.signals;\n            delete this.evt;\n            delete this.ctx;\n\n            return this;\n        },\n        // canvas interaction interface\n        handleEvent(e) {\n            if (e.type in this && (e.isPrimary || e.type === 'wheel')) {  // can I handle events of type e.type .. ?\n                const bbox = e.target.getBoundingClientRect && e.target.getBoundingClientRect() || {left:0, top:0},\n                      x = e.clientX - Math.floor(bbox.left),\n                      y = e.clientY - Math.floor(bbox.top),\n                      btn = e.buttons !== undefined ? e.buttons : e.button || e.which;\n\n                this.evt.type = e.type;\n                this.evt.basetype = e.type;  // obsolete now ... ?\n                this.evt.xi = this.evt.x;    // interim coordinates ...\n                this.evt.yi = this.evt.y;    // ... of previous event.\n                this.evt.dx = this.evt.dy = 0;\n                this.evt.x = x;\n                this.evt.y = this.view.cartesian ? this.ctx.canvas.height - y : y;\n                this.evt.xusr = (this.evt.x - this.view.x)/this.view.scl;\n                this.evt.yusr = (this.evt.y - this.view.y)/this.view.scl;\n                this.evt.dxusr = this.evt.dyusr = 0;\n                this.evt.dbtn = btn - this.evt.btn;\n                this.evt.btn = btn;\n                this.evt.delta = Math.max(-1,Math.min(1,e.deltaY||e.wheelDelta)) || 0;\n\n                if (this.isDefaultPreventer(e.type))\n                    e.preventDefault();\n                this[e.type]();  // handle specific event .. !\n                this.notify(this.evt.type,this.evt);  // .. tell the world .. !\n            }\n            else\n                console.log(e)\n        },\n        pointermove() {\n            this.evt.dx = this.evt.x - this.evt.xi;\n            this.evt.dy = this.evt.y - this.evt.yi;\n            if (this.evt.btn === 1) {    // pointerdown state ...\n                this.evt.dxusr = this.evt.dx/this.view.scl;  // correct usr coordinates ...\n                this.evt.dyusr = this.evt.dy/this.view.scl;\n                this.evt.xusr -= this.evt.dxusr;  // correct usr coordinates ...\n                this.evt.yusr -= this.evt.dyusr;\n                if (!this.evt.hit) {      // let outer app perform panning ...\n                    this.evt.type = 'pan';\n                }\n                else\n                    this.evt.type = 'drag';\n            }\n            // view, geometry or graphics might be modified ...\n            this.dirty = true;\n        },\n        pointerdown() { \n            this.evt.xbtn = this.evt.x;\n            this.evt.ybtn = this.evt.y;\n        },\n        pointerup() { \n            this.evt.type = this.evt.x===this.evt.xbtn && this.evt.y===this.evt.ybtn ? 'click' : 'pointerup';\n            this.evt.xbtn = this.evt.x;\n            this.evt.ybtn = this.evt.y;\n        },\n        pointerleave() { \n            this.evt.inside = false;\n        },\n        pointerenter() { \n            this.evt.inside = true;\n        },\n        wheel() {\n            this.evt.dscl = this.evt.delta>0?8/10:10/8;\n            this.evt.eps /= this.evt.dscl;\n            this.dirty = true;\n        },\n        isDefaultPreventer(type) {\n            return ['pointermove','pointerdown','pointerup','wheel'].includes(type);\n        },\n        pntToUsr: function(p) { \n            let vw = this.view; \n            p.x = (p.x - vw.x)/vw.scl; \n            p.y = (p.y - vw.y)/vw.scl; \n            return p; \n        },\n        // tickTimer interface\n        startTimer() {  // shouldn't there be a global startTimer method ?\n            canvasInteractor.add(this);\n            this.notify('timerStart',this);                    // notify potential listeners .. \n            return this;\n        },\n        endTimer() {\n            this.notify('timerEnd',this.t/1000);              // notify potential listeners .. \n            canvasInteractor.remove(this);      \n            return this;\n        },\n        // observable interface\n        notify(key,val) {\n            if (this.signals && this.signals[key]) \n                for (let hdl of this.signals[key]) \n                    hdl(val);\n            return this;\n        },\n        on(key,handler) {   // support array of keys as first argument.\n            if (Array.isArray(key))\n                for (let k of key) \n                    this.on(k,handler);\n            else\n                ((this.signals || (this.signals = {})) && this.signals[key] || (this.signals[key]=[])).push(handler);\n            \n            return this;\n        },\n        remove(key,handler) {\n            const idx = (this.signals && this.signals[key]) ? this.signals[key].indexOf(handler) : -1;\n            if (idx >= 0)\n                this.signals[key].splice(idx,1);\n        }\n    }\n};\n", "meta": {"content_hash": "9b7510ace65db730bcb9301684e97068", "timestamp": "", "source": "github", "line_count": 214, "max_line_length": 121, "avg_line_length": 41.16355140186916, "alnum_prop": 0.5143603133159269, "repo_name": "goessner/g2", "id": "2c2787e5d0a1b893ba32d7c2883c7e12ce0928bd", "size": "8809", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "bin/canvasInteractor.js", "mode": "33188", "license": "mit", "language": [{"name": "JavaScript", "bytes": "176680"}]}}
{"text": "Imports DTIServerControls\nImports System.Text.RegularExpressions\n\n''' <summary>\n''' control to navigate search of DTI-managed media objects.  Sorted by relevancy, submitted, or rating\n''' </summary>\n''' <remarks></remarks>\n#If DEBUG Then\nPublic Class MediaSearcher\n    Inherits DTIServerControl\n#Else\n    <ComponentModel.EditorBrowsable(ComponentModel.EditorBrowsableState.Never), ComponentModel.ToolboxItem(False)> _\n    Public Class MediaSearcher\n        Inherits DTIServerControl\n#End If\n        Public btnSearch As New HtmlInputButton\n        Public tbSearch As New TextBox\n        Friend tbSort As New TextBox\n        Public btnNewest As New HtmlAnchor\n        Public btnOldest As New HtmlAnchor\n        Public btnRating As New HtmlAnchor\n        Friend pnlButtons As New Panel\n        Public commonWords As String() = {\"the\", \"of\", \"to\", \"and\", \"a\", \"in\", \"is\", \"it\"}\n        Public commonWordsList As New ArrayList(commonWords)\n\n        Protected TitleWeight As Double = 5\n        Protected DescWeight As Double = 4\n        Protected TagWeight As Double = 3\n        Protected ContentWeight As Double = 2\n\n        Private _words As String()\n        Public ReadOnly Property SearchWords() As String()\n            Get\n                If _words Is Nothing Then\n                    _words = Regex.Split(tbSearch.Text, \"\\W+\")\n                    Dim wordList As New List(Of String)\n                    For Each word As String In _words\n                        If word <> \"\" Then\n                            wordList.Add(word)\n                        End If\n                    Next\n                    _words = wordList.ToArray\n                End If\n                Return _words\n            End Get\n        End Property\n\n        Private _word_soup As String()\n        Public ReadOnly Property WordSoup() As String()\n            Get\n                If _word_soup Is Nothing Then\n                    Dim _wordSoupList As New List(Of String)\n                    For Each word As String In SearchWords\n                        If Not commonWordsList.Contains(word) Then\n                            _wordSoupList.Add(\"%\" & word & \"%\")\n                        End If\n                    Next\n                    _word_soup = _wordSoupList.ToArray\n                End If\n                Return _word_soup\n            End Get\n        End Property\n\n        Private _use_search_rank As Boolean = True\n        Public Property UseSearchRank() As Boolean\n            Get\n                Return _use_search_rank\n            End Get\n            Set(ByVal value As Boolean)\n                _use_search_rank = value\n                pnlButtons.Visible = Not value\n            End Set\n        End Property\n\n        Public Property UseSortButtons() As Boolean\n            Get\n                Return pnlButtons.Visible\n            End Get\n            Set(ByVal value As Boolean)\n                pnlButtons.Visible = value\n                _use_search_rank = Not value\n            End Set\n        End Property\n\n        Public Property ShowRatingSortButton() As Boolean\n            Get\n                Return btnRating.Visible\n            End Get\n            Set(ByVal value As Boolean)\n                If value Then UseSortButtons = value\n                btnRating.Visible = value\n            End Set\n        End Property\n\n        Public Property ShowNewestOldestSortButtons() As Boolean\n            Get\n                Return btnNewest.Visible\n            End Get\n            Set(ByVal value As Boolean)\n                If value Then UseSortButtons = value\n                btnNewest.Visible = value\n                btnOldest.Visible = value\n            End Set\n        End Property\n\n        Public ReadOnly Property SortButtons() As ControlCollection\n            Get\n                Return pnlButtons.Controls\n            End Get\n        End Property\n\n        Public Property SearchOnClick() As String\n            Get\n                Return btnSearch.Attributes(\"onclick\")\n            End Get\n            Set(ByVal value As String)\n                btnSearch.Attributes(\"onclick\") = value\n            End Set\n        End Property\n\n        Public Property SearchText() As String\n            Get\n                Return tbSearch.Text\n            End Get\n            Set(ByVal value As String)\n                tbSearch.Text = value\n            End Set\n        End Property\n\n        Private _add_query As String = \"\"\n        Public Property AdditionalQuery() As String\n            Get\n                Return _add_query\n            End Get\n            Set(ByVal value As String)\n                _add_query = value\n            End Set\n        End Property\n\n        Public ReadOnly Property QueryFilter() As String\n            Get\n                For Each mediaType As mediaSearchTable In mediaSearchTableEntries\n                    If Not Content_Types.Contains(mediaType.ContentType) Then\n                        Content_Types.Add(mediaType.ContentType)\n                    End If\n                Next\n                Dim returnStatement As String = \" User_Id = '\" & MainID & \"' AND Published <> 0 and Removed <> 1 \" & _\n                        \" and Component_Type = '\" & Component_Type & \"' and (\" & _\n                        comp_string(\"Content_Type\", \"=\", Content_Types.ToArray) & \")\"\n\n                If UseSearchRank Then\n                    returnStatement &= \" and (\" & CountExecString & \" > 0)\"\n                ElseIf UseSortButtons AndAlso tbSearch.Text <> \"\" Then\n\n                    returnStatement &= \" and ((\" & comp_string(\"Title\", \"like\", WordSoup) & \") or (\" & _\n                        comp_string(\"Description\", \"like\", WordSoup) & \") or Id in (select Content_Id from \" & _\n                        \"DTI_Content_Tag_Pivot where Component_Type = '\" & Component_Type & \"' and Tag_Id in \" & _\n                        \"(select Id from DTI_Content_Tags where \" & comp_string(\"Tag_Name\", \"like\", WordSoup) & \"))\"\n\n                    For Each mediaSearch As mediaSearchTable In mediaSearchTableEntries\n                        If Not mediaSearch.TableName Is Nothing Then\n                            returnStatement &= \" or (Content_Type = '\" & mediaSearch.ContentType & \"' and Content_Id\" & _\n                                \"in (select Id from \" & mediaSearch.TableName & \" where \" & _\n                                comp_string(mediaSearch.VarCharColumnName, \"like\", WordSoup) & \"))\"\n                        End If\n                    Next\n                    returnStatement &= \")\"\n                End If\n\n                If AdditionalQuery <> \"\" Then\n                    returnStatement &= \" and (\" & AdditionalQuery & \")\"\n                End If\n                '\" and User_Id in (select Id from from Users where MaindId = \" & MainId & \")\"\n\n                Return returnStatement\n            End Get\n        End Property\n\n        '***fixme database specific\n        Private ReadOnly Property CountExecString() As String\n            Get\n                Dim returnValue As String = \"1\"\n                If tbSearch.Text <> \"\" AndAlso UseSearchRank Then\n                    Dim titleString As String = \"0\"\n                    Dim descString As String = \"0\"\n                    Dim tagString As String = \"0\"\n                    Dim mediaString As String = \"0\"\n                    For Each word As String In SearchWords\n                        If Not commonWordsList.Contains(word) Then\n                            titleString &= \" + CountString(isnull(Title, ''), '\" & word & \"')\"\n                            descString &= \" + CountString(isnull(Description, ''), '\" & word & \"')\"\n                            tagString &= \" + HasTag(Id, '\" & Component_Type & \"', '\" & word & \"')\"\n\n                            For Each mediaSearch As mediaSearchTable In mediaSearchTableEntries\n                                mediaString &= \" + case when Content_Type = '\" & mediaSearch.ContentType & _\n                                \"' then CountString((select CONVERT(varchar(8000), isnull(\" & _\n                                mediaSearch.VarCharColumnName & \",'')) from \" & mediaSearch.TableName & _\n                                \" where Id = Content_Id), '\" & word & \"') else 0 end\"\n                            Next\n                        End If\n                    Next\n                    titleString = \"(\" & titleString & \") * \" & TitleWeight\n                    descString = \"(\" & descString & \") * \" & DescWeight\n                    tagString = \"(\" & tagString & \") * \" & TagWeight\n                    mediaString = \"(\" & mediaString & \") * \" & ContentWeight\n                    returnValue = \"isnull(Rating, 1) * (\" & titleString & \" + \" & descString & \" + \" & tagString & _\n                        \" + \" & mediaString & \")\"\n                End If\n                Return returnValue\n            End Get\n        End Property\n\n        Public Property Sort() As String\n            Get\n                If tbSort.Text = \"\" Then\n                    tbSort.Text = \"Date_added Desc\"\n                End If\n                If UseSearchRank Then\n                    Return CountExecString & \" desc, \" & tbSort.Text\n                ElseIf UseSortButtons Then\n                    Return tbSort.Text\n                Else\n                    Return tbSort.Text\n                End If\n            End Get\n            Set(ByVal value As String)\n                tbSort.Text = value\n            End Set\n        End Property\n\n        Public ReadOnly Property SearchSelectStatement() As String\n            Get\n                Return \"select \" & SearchColumns & \" from DTIMediaManager where \" & QueryFilter & \" order by \" & Sort\n            End Get\n        End Property\n\n        Public ReadOnly Property SearchColumns() As String\n            Get\n                Return \"*\"\n            End Get\n        End Property\n\n        Public Class mediaSearchTable\n            Public ContentType As String\n            Public TableName As String\n            Public VarCharColumnName As String\n\n            Public Sub New(ByVal cont_type As String, ByVal table_name As String, ByVal var_char_col_name As String)\n                ContentType = cont_type\n                TableName = table_name\n                VarCharColumnName = var_char_col_name\n            End Sub\n        End Class\n\n        Public mediaSearchTableEntries As New List(Of mediaSearchTable)\n\n        Private _cont_types As New List(Of String)\n        Public ReadOnly Property Content_Types() As List(Of String)\n            Get\n                Return _cont_types\n            End Get\n        End Property\n\n        Public ReadOnly Property comp_string(ByVal colName As String, ByVal op As String, ByVal values As String()) As String\n            Get\n                Dim retString As String = colName & \" \" & op & \" '\"\n                Dim concatString As String = \"' or \" & colName & \" \" & op & \" '\"\n                For Each comp As String In values\n                    retString &= comp & concatString\n                Next\n                If retString.LastIndexOf(concatString) > -1 Then\n                    Return retString.Substring(0, retString.LastIndexOf(\" or\"))\n                Else\n                    Return \"1=1\"\n                End If\n            End Get\n        End Property\n\n        Private Sub MediaSearcher_Init(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Init\n            UseSortButtons = False\n            tbSort.Text = \"Date_added Desc\"\n        End Sub\n\n        Private Sub MediaSearcher_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load\n            tbSearch.ID = \"tbMediaSearch\"\n            tbSearch.CssClass = \"MediaSearchTextBox\"\n            btnSearch.Attributes(\"class\") = \"MediaSearchButton\"\n            tbSort.ID = \"tbMediaSort\"\n            tbSort.CssClass = \"MediaSortTextBox\"\n            jQueryLibrary.jQueryInclude.RegisterJQuery(Me.Page)\n            registerClientScriptBlock(\"queryInit\", \"$.query = { prefix: false };\", True)\n            registerClientScriptFile(\"JQQ\", BaseClasses.Scripts.ScriptsURL(True) & \"jQueryLibrary/jquery.query.js\")\n\n            If Page.Request.Params(\"SearchCompType\") <> \"\" Then\n                Component_Type = Page.Request.Params(\"SearchCompType\")\n            End If\n            If Page.Request.Params(\"SearchContTypes\") <> \"\" Then\n                For Each contType As String In Page.Request.Params(\"SearchContTypes\").Split(\"+\")\n                    Content_Types.Add(contType)\n                Next\n            End If\n            If Page.Request.Params(\"SearchQuery\") <> \"\" Then\n                For Each contType As String In Page.Request.Params(\"SearchQuery\").Split(\"+\")\n                    Content_Types.Add(contType)\n                Next\n            End If\n        End Sub\n\n        Private Sub MediaSearcher_LoadControls(ByVal modeChanged As Boolean) Handles Me.LoadControls\n            Controls.Add(tbSearch)\n            Controls.Add(btnSearch)\n            Controls.Add(New LiteralControl(\"<br />\"))\n            Controls.Add(tbSort)\n            pnlButtons.Controls.Add(btnNewest)\n            pnlButtons.Controls.Add(btnOldest)\n            pnlButtons.Controls.Add(btnRating)\n            Controls.Add(pnlButtons)\n        End Sub\n\n        Private Sub MediaSearcher_PreRender(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.PreRender\n            tbSort.Style(\"display\") = \"none\"\n\n            btnSearch.Attributes.Add(\"value\", \"Search\")\n\n            btnNewest.Attributes.Add(\"href\", \"#\")\n            btnNewest.InnerHtml = \"Newest\"\n            btnNewest.Style(\"padding-right\") = \"30px\"\n            btnNewest.Attributes.Add(\"onclick\", \"$('#\" & tbSort.ClientID & \"').val('Date_Added Desc');$('#\" & btnSearch.ClientID & \"').click();return false;\")\n\n            btnOldest.Attributes.Add(\"href\", \"#\")\n            btnOldest.InnerHtml = \"Oldest\"\n            btnOldest.Style(\"padding-right\") = \"30px\"\n            btnOldest.Attributes.Add(\"onclick\", \"$('#\" & tbSort.ClientID & \"').val('Date_Added Asc');$('#\" & btnSearch.ClientID & \"').click();return false;\")\n\n            btnRating.Attributes.Add(\"href\", \"#\")\n            btnRating.InnerHtml = \"Rating\"\n            btnRating.Attributes.Add(\"onclick\", \"if($('#\" & tbSort.ClientID & \"').val().indexOf('Rating D') > -1){$('#\" & tbSort.ClientID & \"').val('Rating Asc');} else{$('#\" & tbSort.ClientID & \"').val('Rating Desc');}$('#\" & btnSearch.ClientID & \"').click();return false;\")\n\n            'Dim script As String = \"$(function() { if($.query.load(window.location.href).get('\" & Me.ClientID & _\n            '    \"') != '') { $('#\" & Me.ClientID & \"').val($.query.load(window.location.href).get('\" & Me.ClientID & _\n            '    \"'));}});\"\n            'Page.ClientScript.RegisterStartupScript(Me.GetType, \"searcherInit_\" & Me.ClientID, script, True)\n        End Sub\n\n        '***fixme database specific - Poss remove\n        Public Shared Function getCreateSqlFunctionsScript() As Hashtable\n            Dim script1 As String = \"CREATE  FUNCTION [HasTag] \" & vbCrLf & _\n            \"( @media_id INT, @comp_type VARCHAR(100), @tag_name VARCHAR(100) ) \" & vbCrLf & _\n            \"RETURNS INT \" & vbCrLf & _\n            \"BEGIN \" & vbCrLf & _\n            \"    RETURN  (select count(*)  \" & vbCrLf & _\n            \"\tfrom DTI_Content_Tag_Pivot  \" & vbCrLf & _\n            \"\twhere Content_Id = @media_id and Component_Type = @comp_type and Tag_Id in  \" & vbCrLf & _\n            \"\t(select Id from DTI_Content_Tags where Tag_Name like '%' + @tag_name + '%')) \" & vbCrLf & _\n            \"END \"\n            Dim script2 As String = \"CREATE FUNCTION [CountString] \" & vbCrLf & _\n            \"( @pInput VARCHAR(8000), @pSearchString VARCHAR(100) ) \" & vbCrLf & _\n            \"RETURNS INT \" & vbCrLf & _\n            \"BEGIN \" & vbCrLf & _\n            \"    RETURN (LEN(@pInput) -  \" & vbCrLf & _\n            \"            LEN(REPLACE(@pInput, @pSearchString, ''))) / \" & vbCrLf & _\n            \"            LEN(@pSearchString) \" & vbCrLf & _\n            \"END \"\n\n            Dim ret As New Hashtable\n            ret(\"HasTag\") = script1\n            ret(\"CountString\") = script2\n            Return ret\n\n        End Function\n\n        Public Sub createSqlFunctions()\n            Dim hash As Hashtable = getCreateSqlFunctionsScript()\n            For Each obj As String In hash.Keys\n                Try\n                    If Not sqlhelper.checkDBObjectExists(obj) Then\n                        sqlhelper.ExecuteNonQuery(hash(obj))\n                    End If\n                Catch ex As Exception\n\n                End Try\n            Next\n        End Sub\n\n        Private Sub MediaSearcher_typeFirstInitialized(ByVal t As System.Type) Handles Me.typeFirstInitialized\n            Try\n                createSqlFunctions()\n            Catch ex As Exception\n\n            End Try\n\n        End Sub\n    End Class\n", "meta": {"content_hash": "150e5f4dae6123728f9fde48502f26b8", "timestamp": "", "source": "github", "line_count": 393, "max_line_length": 275, "avg_line_length": 42.62086513994911, "alnum_prop": 0.5244776119402985, "repo_name": "Micmaz/DTIControls", "id": "b1a55f4493e63d08c783ff2e0e2a550b888e988a", "size": "16750", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "DTIContentManagement/DTIMediaManager/MediaSearcher.vb", "mode": "33188", "license": "mit", "language": [{"name": "ASP.NET", "bytes": "1111353"}, {"name": "Batchfile", "bytes": "2442"}, {"name": "C#", "bytes": "59872"}, {"name": "CSS", "bytes": "1689439"}, {"name": "HTML", "bytes": "19388303"}, {"name": "JavaScript", "bytes": "3417429"}, {"name": "Less", "bytes": "48637"}, {"name": "SCSS", "bytes": "24889"}, {"name": "Shell", "bytes": "2881"}, {"name": "VBScript", "bytes": "1265"}, {"name": "Visual Basic .NET", "bytes": "2738884"}, {"name": "XSLT", "bytes": "24694"}]}}
{"text": "\ufeffusing System.Collections.Generic;\nusing System.Linq;\nusing NuGet.ProjectModel;\n\nnamespace Microsoft.DotNet.ProjectModel.Graph\n{\n    public class ExportFile\n    {\n        public static readonly string ExportFileName = \"project.fragment.lock.json\";\n\n        public int Version { get; }\n        public string ExportFilePath { get; }\n\n        public IList<LockFileTargetLibrary> Exports { get; }\n\n        public ExportFile(string exportFilePath, int version, IList<LockFileTargetLibrary> exports)\n        {\n            ExportFilePath = exportFilePath;\n            Version = version;\n            Exports = exports.Any() ? exports : new List<LockFileTargetLibrary>(0);\n        }\n    }\n}", "meta": {"content_hash": "a801a3d2386b8a971f4ec79ad4eca06a", "timestamp": "", "source": "github", "line_count": 23, "max_line_length": 99, "avg_line_length": 29.608695652173914, "alnum_prop": 0.6681350954478708, "repo_name": "naamunds/cli", "id": "226bd0d5f021c8378ede8fd5af47bca54c357906", "size": "683", "binary": false, "copies": "1", "ref": "refs/heads/rel/1.0.0", "path": "src/Microsoft.DotNet.ProjectModel/Graph/ExportFile.cs", "mode": "33188", "license": "mit", "language": [{"name": "Batchfile", "bytes": "1842"}, {"name": "C#", "bytes": "2842646"}, {"name": "CSS", "bytes": "827"}, {"name": "F#", "bytes": "2062"}, {"name": "Groovy", "bytes": "2391"}, {"name": "HTML", "bytes": "27944"}, {"name": "JavaScript", "bytes": "1179"}, {"name": "PowerShell", "bytes": "39627"}, {"name": "Python", "bytes": "9745"}, {"name": "Shell", "bytes": "49243"}]}}
{"text": "\npackage com.prowidesoftware.swift.model.field;\n\nimport com.prowidesoftware.swift.model.Tag;\nimport com.prowidesoftware.Generated;\nimport com.prowidesoftware.deprecation.ProwideDeprecated;\nimport com.prowidesoftware.deprecation.TargetYear;\n\nimport java.io.Serializable;\nimport java.util.Locale;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.util.HashMap;\n\nimport com.prowidesoftware.swift.model.BIC;\n\nimport com.prowidesoftware.swift.model.field.MultiLineField;\nimport com.prowidesoftware.swift.model.field.BICContainer;\nimport com.prowidesoftware.swift.model.field.BICResolver;\n\nimport org.apache.commons.lang3.StringUtils;\n\nimport com.prowidesoftware.swift.model.field.SwiftParseUtils;\nimport com.prowidesoftware.swift.model.field.Field;\nimport com.prowidesoftware.swift.model.*;\nimport com.prowidesoftware.swift.utils.SwiftFormatUtils;\n\nimport com.google.gson.JsonObject;\nimport com.google.gson.JsonParser;\n\n/**\n * SWIFT MT Field 51A.\n * <p>\n * Model and parser for field 51A of a SWIFT MT message.\n *\n * <p>Subfields (components) Data types\n * <ol>\n * \t\t<li><code>String</code></li>\n * \t\t<li><code>String</code></li>\n * \t\t<li><code>BIC</code></li>\n * </ol>\n *\n * <p>Structure definition\n * <ul>\n * \t\t<li>validation pattern: <code>[[/&lt;DC&gt;][/34x]$]&lt;BIC&gt;</code></li>\n * \t\t<li>parser pattern: <code>[[/c][/S]$]S</code></li>\n * \t\t<li>components pattern: <code>SSB</code></li>\n * </ul>\n *\n * <p>\n * This class complies with standard release <strong>SRU2022</strong>\n */\n@SuppressWarnings(\"unused\")\n@Generated\npublic class Field51A extends OptionAPartyField implements Serializable, BICContainer, MultiLineField {\n\t/**\n\t * Constant identifying the SRU to which this class belongs to.\n\t */\n\tpublic static final int SRU = 2022;\n\n\tprivate static final long serialVersionUID = 1L;\n\t/**\n\t * Constant with the field name 51A.\n\t */\n    public static final String NAME = \"51A\";\n    /**\n     * Same as NAME, intended to be clear when using static imports.\n     */\n    public static final String F_51A = \"51A\";\n\n    /**\n     * Default constructor. Creates a new field setting all components to null.\n     */\n    public Field51A() {\n        super();\n    }\n\n    /**\n     * Creates a new field and initializes its components with content from the parameter value.\n     * @param value complete field value including separators and CRLF\n     */\n    public Field51A(final String value) {\n        super(value);\n    }\n\n    /**\n     * Creates a new field and initializes its components with content from the parameter tag.\n     * The value is parsed with {@link #parse(String)}\n     * @throws IllegalArgumentException if the parameter tag is null or its tagname does not match the field name\n     * @since 7.8\n     */\n    public Field51A(final Tag tag) {\n        this();\n        if (tag == null) {\n            throw new IllegalArgumentException(\"tag cannot be null.\");\n        }\n        if (!StringUtils.equals(tag.getName(), \"51A\")) {\n            throw new IllegalArgumentException(\"cannot create field 51A from tag \"+tag.getName()+\", tagname must match the name of the field.\");\n        }\n        parse(tag.getValue());\n    }\n\n    /**\n     * Copy constructor.\n     * Initializes the components list with a deep copy of the source components list.\n     * @param source a field instance to copy\n     * @since 7.7\n     */\n    public static Field51A newInstance(Field51A source) {\n        Field51A cp = new Field51A();\n        cp.setComponents(new ArrayList<>(source.getComponents()));\n        return cp;\n    }\n\n    /**\n     * Create a Tag with this field name and the given value.\n     * Shorthand for <code>new Tag(NAME, value)</code>\n     * @see #NAME\n     * @since 7.5\n     */\n    public static Tag tag(final String value) {\n        return new Tag(NAME, value);\n    }\n\n    /**\n     * Create a Tag with this field name and an empty string as value.\n     * Shorthand for <code>new Tag(NAME, \"\")</code>\n     * @see #NAME\n     * @since 7.5\n     */\n    public static Tag emptyTag() {\n        return new Tag(NAME, \"\");\n    }\n\n    /**\n     * Returns the field validator pattern.\n     */\n    @Override\n    public final String validatorPattern() {\n        return \"[[/<DC>][/34x]$]<BIC>\";\n    }\n\n    /**\n     * Set the component 1 (D/C Mark).\n     *\n     * @param component1 the D/C Mark to set\n     * @return the field object to enable build pattern\n     */\n    public Field51A setComponent1(String component1) {\n        setComponent(1, component1);\n        return this;\n    }\n\n    /**\n     * Set the D/C Mark (component 1).\n     *\n     * @param component1 the D/C Mark to set\n     * @return the field object to enable build pattern\n     */\n    public Field51A setDCMark(String component1) {\n        return setComponent1(component1);\n    }\n\n    /**\n     * Set the component 2 (Account).\n     *\n     * @param component2 the Account to set\n     * @return the field object to enable build pattern\n     */\n    public Field51A setComponent2(String component2) {\n        setComponent(2, component2);\n        return this;\n    }\n\n    /**\n     * Set the Account (component 2).\n     *\n     * @param component2 the Account to set\n     * @return the field object to enable build pattern\n     */\n    public Field51A setAccount(String component2) {\n        return setComponent2(component2);\n    }\n\n    /**\n     * Set the component 3 (Identifier Code).\n     *\n     * @param component3 the Identifier Code to set\n     * @return the field object to enable build pattern\n     */\n    public Field51A setComponent3(String component3) {\n        setComponent(3, component3);\n        return this;\n    }\n\n    /**\n     * Set the component3 from a BIC object.\n     *\n     * @param component3 the BIC with the Identifier Code content to set\n     * @return the field object to enable build pattern\n     */\n    public Field51A setComponent3(com.prowidesoftware.swift.model.BIC component3) {\n        setComponent(3, SwiftFormatUtils.getBIC(component3));\n        return this;\n    }\n\n    /**\n     * Set the Identifier Code (component 3).\n     *\n     * @param component3 the Identifier Code to set\n     * @return the field object to enable build pattern\n     */\n    public Field51A setIdentifierCode(String component3) {\n        return setComponent3(component3);\n    }\n\n    /**\n     * Set the Identifier Code (component 3) from a BIC object.\n     *\n     * @see #setComponent3(com.prowidesoftware.swift.model.BIC)\n     *\n     * @param component3 BIC with the Identifier Code content to set\n     * @return the field object to enable build pattern\n     */\n    public Field51A setIdentifierCode(com.prowidesoftware.swift.model.BIC component3) {\n        return setComponent3(component3);\n    }\n\n    /**\n     * Alternative <em>DEPRECATED</em> method setter for field's Identifier Code\n     *\n     * @see #setIdentifierCode(String)\n     *\n     * @param component3 the Identifier Code to set\n     * @return the field object to enable build pattern\n     */\n    @Deprecated\n    @ProwideDeprecated(phase3 = TargetYear.SRU2023)\n    public Field51A setBIC(String component3) {\n        return setIdentifierCode(component3);\n    }\n\n    /**\n     * Alternative <em>DEPRECATED</em> method setter for field's Identifier Code from a BIC object.\n     *\n     * @see #setComponent3(com.prowidesoftware.swift.model.BIC)\n     *\n     * @param component3 BIC with the Identifier Code content to set\n     * @return the field object to enable build pattern\n     */\n    @Deprecated\n    @ProwideDeprecated(phase3 = TargetYear.SRU2023)\n    public Field51A setBIC(com.prowidesoftware.swift.model.BIC component3) {\n        return setIdentifierCode(component3);\n    }\n\n\n    public List<BIC> bics() {\n        return BICResolver.bics(this);\n    }\n\n    public List<String> bicStrings () {\n        return BICResolver.bicStrings(this);\n    }\n\n\n    /**\n     * Returns the field's name composed by the field number and the letter option (if any).\n     * @return the static value of Field51A.NAME\n     */\n    @Override\n    public String getName() {\n        return NAME;\n    }\n\n    /**\n     * Gets the first occurrence form the tag list or null if not found.\n     * @return null if not found o block is null or empty\n     * @param block may be null or empty\n     */\n    public static Field51A get(final SwiftTagListBlock block) {\n        if (block == null || block.isEmpty()) {\n            return null;\n        }\n        final Tag t = block.getTagByName(NAME);\n        if (t == null) {\n            return null;\n        }\n        return new Field51A(t);\n    }\n\n    /**\n     * Gets the first instance of Field51A in the given message.\n     * @param msg may be empty or null\n     * @return null if not found or msg is empty or null\n     * @see #get(SwiftTagListBlock)\n     */\n    public static Field51A get(final SwiftMessage msg) {\n        if (msg == null || msg.getBlock4() == null || msg.getBlock4().isEmpty()) {\n            return null;\n        }\n        return get(msg.getBlock4());\n    }\n\n    /**\n     * Gets a list of all occurrences of the field Field51A in the given message\n     * an empty list is returned if none found.\n     * @param msg may be empty or null in which case an empty list is returned\n     * @see #getAll(SwiftTagListBlock)\n     */\n    public static List<Field51A> getAll(final SwiftMessage msg) {\n        if (msg == null || msg.getBlock4() == null || msg.getBlock4().isEmpty()) {\n            return java.util.Collections.emptyList();\n        }\n        return getAll(msg.getBlock4());\n    }\n\n    /**\n     * Gets a list of all occurrences of the field Field51A from the given block\n     * an empty list is returned if none found.\n     *\n     * @param block may be empty or null in which case an empty list is returned\n     */\n    public static List<Field51A> getAll(final SwiftTagListBlock block) {\n        final List<Field51A> result = new ArrayList<>();\n        if (block == null || block.isEmpty()) {\n            return result;\n        }\n        final Tag[] arr = block.getTagsByName(NAME);\n        if (arr != null && arr.length > 0) {\n            for (final Tag f : arr) {\n                result.add(new Field51A(f));\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Returns a specific line from the field's value.\n     *\n     * @see MultiLineField#getLine(int)\n     * @param line a reference to a specific line in the field, first line being 1\n     * @return line content or null if not present or if line number is above the expected\n     * @since 7.7\n     */\n    public String getLine(int line) {\n        return getLine(line, 0);\n    }\n\n    /**\n     * Returns a specific line from the field's value.\n     *\n     * @see MultiLineField#getLine(int, int)\n     * @param line a reference to a specific line in the field, first line being 1\n     * @param offset an optional component number used as offset when counting lines\n     * @return line content or null if not present or if line number is above the expected\n     * @since 7.7\n     */\n    public String getLine(int line, int offset) {\n        Field51A cp = newInstance(this);\n        return getLine(cp, line, null, offset);\n    }\n\n    /**\n     * Returns the field value split into lines.\n     *\n     * @see MultiLineField#getLines()\n     * @return lines content or empty list if field's value is empty\n     * @since 7.7\n     */\n    public List<String> getLines() {\n        return SwiftParseUtils.getLines(getValue());\n    }\n\n    /**\n     * Returns the field value starting at the offset component, split into lines.\n     *\n     * @see MultiLineField#getLines(int)\n     * @param offset an optional component number used as offset when counting lines\n     * @return found lines or empty list if lines are not present or the offset is invalid\n     * @since 7.7\n     */\n    public List<String> getLines(int offset) {\n        Field51A cp = newInstance(this);\n        return SwiftParseUtils.getLines(getLine(cp, null, null, offset));\n    }\n\n    /**\n     * Returns a specific subset of lines from the field's value, given a range.\n     *\n     * @see MultiLineField#getLinesBetween(int, int )\n     * @param start a reference to a specific line in the field, first line being 1\n     * @param end a reference to a specific line in the field, must be greater than start\n     * @return found lines or empty list if value is empty\n     * @since 7.7\n     */\n    public List<String> getLinesBetween(int start, int end) {\n        return getLinesBetween(start, end, 0);\n    }\n\n    /**\n     * Returns a specific subset of lines from the field's value, starting at the offset component.\n     *\n     * @see MultiLineField#getLinesBetween(int start, int end, int offset)\n     * @param start a reference to a specific line in the field, first line being 1\n     * @param end a reference to a specific line in the field, must be greater than start\n     * @param offset an optional component number used as offset when counting lines\n     * @return found lines or empty list if lines are not present or the offset is invalid\n     * @since 7.7\n     */\n    public List<String> getLinesBetween(int start, int end, int offset) {\n        Field51A cp = newInstance(this);\n        return SwiftParseUtils.getLines(getLine(cp, start, end, offset));\n    }\n\n    /**\n     * This method deserializes the JSON data into a Field51A object.\n     * @param json JSON structure including tuples with label and value for all field components\n     * @return a new field instance with the JSON data parsed into field components or an empty field id the JSON is invalid\n     * @since 7.10.3\n     * @see Field#fromJson(String)\n     */\n    public static Field51A fromJson(final String json) {\n\n        final Field51A field = new Field51A();\n\n        final JsonObject jsonObject = JsonParser.parseString(json).getAsJsonObject();\n\n        // **** COMPONENT 1 - D/C Mark\n\n        if (jsonObject.get(\"dCMark\") != null) {\n            field.setComponent1(jsonObject.get(\"dCMark\").getAsString());\n        }\n\n        // **** COMPONENT 2 - Account\n\n        if (jsonObject.get(\"account\") != null) {\n            field.setComponent2(jsonObject.get(\"account\").getAsString());\n        }\n\n        // **** COMPONENT 3 - Identifier Code\n\n        // first try using alias's names (including deprecated ones, if any)\n        if (jsonObject.get(\"bIC\") != null) {\n            field.setComponent3(jsonObject.get(\"bIC\").getAsString());\n        }\n\n        // last try using the official component's name (overwrites alternatives and DEPRECATED)\n        if (jsonObject.get(\"identifierCode\") != null) {\n            field.setComponent3(jsonObject.get(\"identifierCode\").getAsString());\n        }\n\n        return field;\n    }\n\n\n}\n", "meta": {"content_hash": "473c8af21c5d0417ded9e42b7e77897a", "timestamp": "", "source": "github", "line_count": 458, "max_line_length": 144, "avg_line_length": 31.87117903930131, "alnum_prop": 0.6375282592313489, "repo_name": "prowide/prowide-core", "id": "c7cc08903884ac41091d54e5d028b189ee29b351", "size": "15192", "binary": false, "copies": "1", "ref": "refs/heads/develop", "path": "src/generated/java/com/prowidesoftware/swift/model/field/Field51A.java", "mode": "33188", "license": "apache-2.0", "language": [{"name": "HTML", "bytes": "43156"}, {"name": "Java", "bytes": "25397388"}]}}
{"text": "namespace SparkDotNet\n{\n\n    public class XAPIStatusResultAudio : WebexObject\n    {\n        public int Volume { get; set; }\n    }\n}", "meta": {"content_hash": "33837c2c0c11d666cd58f02a7e727708", "timestamp": "", "source": "github", "line_count": 8, "max_line_length": 52, "avg_line_length": 16.375, "alnum_prop": 0.6412213740458015, "repo_name": "darrenparkinson/SparkDotNet", "id": "69138ce2631dda841214baaaa08bbf1a51b0f479", "size": "131", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "Models/XAPIStatusResultAudio.cs", "mode": "33188", "license": "mit", "language": [{"name": "C#", "bytes": "378169"}]}}
{"text": "\nconst path             = require('../../../shared/lib/path');\nconst dispatcher       = require('../../lib/dispatcher').dispatcher;\nconst errors           = require('../errors');\nconst err              = require('../errors').errors;\nconst Iterator         = require('../tokenizer/TokenIterator').Iterator;\nconst t                = require('../tokenizer/tokenizer');\nconst ProjectResources = require('../resources/ProjectResources').ProjectResources;\nconst FormResource     = require('../resources/FormResource').FormResource;\nconst Defines          = require('./Defines').Defines;\nconst MetaCompiler     = require('./MetaCompiler');\nconst Tokenizer        = t.Tokenizer;\n\nconst removePadding = function(s) {\n    return s.substr(1, s.length - 2);\n};\n\nexports.PreProcessor = class PreProcessor {\n    constructor(opts) {\n        this._projectPath         = path.getPathAndFilename(opts.projectFilename || '').path;\n        this._documentPath        = opts.documentPath  || '';\n        this._projectFilename     = opts.projectFilename;\n        this._linter              = opts.linter;\n        this._onGetFileData       = opts.onGetFileData;\n        this._onGetFileDataError  = opts.onGetFileDataError;\n        this._onGetEditorFileData = opts.onGetEditorFileData;\n        this._onError             = opts.onError;\n        this._onFinished          = opts.onFinished;\n        this._filesDone           = {};\n        this._fileCount           = 0;\n        this._sortedFiles         = null;\n        this._error               = false;\n        this._defines             = new Defines({globalDefines: opts.globalDefines || {}});\n        this._lineCount           = 0;\n        this._includeRoot         = {\n            filename: ''\n        };\n        this._resources           = new ProjectResources({\n            projectFilename:     this._projectFilename,\n            onGetEditorFileData: this._onGetEditorFileData,\n            onGetFileData:       this._onGetFileData\n        });\n    }\n\n    compileInclude(iterator, token, tokenFilename, includes) {\n        token.done = true;\n        token      = iterator.skipWhiteSpace().next();\n        token.done = true;\n        if (token.cls !== t.TOKEN_STRING) {\n            token.filename = tokenFilename;\n            throw errors.createError(err.FILENAME_EXPECTED, token, 'Filename expected.');\n        }\n        let filename = removePadding(token.lexeme);\n        includes.push({filename: filename, token: token});\n        if (this._onError) {\n            try {\n                MetaCompiler.checkRestTokens(iterator, 'include');\n            } catch (error) {\n                this._onError({\n                    type:    'Error',\n                    message: '<i class=\"error\">Invalid tokens after include.</i>',\n                    tolen:   token\n                });\n            }\n        } else {\n            MetaCompiler.checkRestTokens(iterator, 'include');\n        }\n    }\n\n    processIncludes(fileItem, data) {\n        let tokenizer    = new Tokenizer();\n        let tokens       = tokenizer.tokenize(data).getTokens();\n        let includes     = [];\n        let token        = true;\n        let iterator     = new Iterator({tokens: tokens, compiler: this});\n        let metaCompiler = new MetaCompiler.MetaCompiler({\n                defines:       this._defines,\n                resources:     this._resources,\n                linter:        this._linter\n            });\n        this._tokens = tokens;\n        this._lineCount += tokenizer.getLineNum();\n        if (this._linter) {\n            this._linter.addTokens(tokens);\n        }\n        while (token) {\n            token = iterator.skipWhiteSpace().next();\n            if (!token) {\n                break;\n            }\n            switch (token.cls) {\n                case t.TOKEN_META:\n                    switch (token.lexeme) {\n                        case t.LEXEME_META_INCLUDE:\n                            this.compileInclude(iterator, token, fileItem.filename, includes);\n                            break;\n                        case t.LEXEME_META_IFDEF:\n                            metaCompiler.compileIfdef(iterator, token, this._defines);\n                            break;\n                        case t.LEXEME_META_DEFINE:\n                            metaCompiler.compileDefine(iterator, token, fileItem.filename);\n                            break;\n                        case t.LEXEME_META_IMAGE:\n                            metaCompiler.compileImage(iterator, token, fileItem.filename);\n                            break;\n                        case t.LEXEME_META_TEXT:\n                            metaCompiler.compileText(iterator, token, fileItem.filename);\n                            break;\n                        case t.LEXEME_META_RESOURCE:\n                            metaCompiler.compileResource(iterator, token, fileItem.filename);\n                            break;\n                    }\n                    break;\n            }\n        }\n        fileItem.tokens   = tokens;\n        fileItem.includes = includes;\n    }\n\n    processFile(includeItem, includeNode) {\n        if (!includeNode) {\n            includeNode          = this._includeRoot;\n            includeNode.filename = includeItem.filename;\n        }\n        let filesDone = this._filesDone;\n        let filename  = this.getBaseFilename(includeItem.filename);\n        if (filename in filesDone) {\n            return;\n        }\n        this._fileCount++;\n        let fileItem = {\n                tokens:      null,\n                projectPath: this._projectPath,\n                filename:    filename\n            };\n        filesDone[filename] = fileItem;\n        this._onGetFileData(\n            filename,\n            includeItem.token,\n            this.onFileData.bind(this, fileItem, includeNode)\n        );\n    }\n\n    processResources() {\n        let filesDone    = this._filesDone;\n        let resources    = this._resources.getResources();\n        let projectPath  = this._projectPath;\n        let index        = 0;\n        let loadResource = () => {\n                let resource = resources[index++];\n                if (resource) {\n                    if (resource.neededBeforeCompile()) {\n                        resource\n                            .setProjectPath(projectPath)\n                            .getData(loadResource);\n                    } else {\n                        loadResource();\n                    }\n                } else {\n                    this.getSortedFiles();\n                    this._onFinished(filesDone, this._error);\n                }\n            };\n        loadResource();\n    }\n\n    onFileData(fileItem, includeNode, data) {\n        if (data === null) {\n            this._onGetFileDataError && this._onGetFileDataError(fileItem);\n            return;\n        }\n        this._fileCount--;\n        if (fileItem.tokens === null) {\n            this.processIncludes(fileItem, data);\n        }\n        let filesDone = this._filesDone;\n        let includes  = fileItem.includes;\n        includes.forEach((include) => {\n            if (include in filesDone) {\n                return;\n            }\n            let newNode = {filename: include.filename};\n            if (!includeNode.includes) {\n                includeNode.includes = [];\n            }\n            includeNode.includes.push(newNode);\n            this.processFile(include, newNode);\n        });\n        if (this._fileCount === 0) {\n            this.processResources(this._onFinished);\n        }\n    }\n\n    getDepth() {\n        return 0;\n    }\n\n    getBaseFilename(filename) {\n        let documentPath = this._documentPath;\n        let projectPath  = this._projectPath;\n        if ((documentPath === '') && (projectPath === '')) {\n            return filename;\n        }\n        if ((documentPath !== '') && filename.indexOf(documentPath) === 0) {\n            return filename.substr(documentPath.length + 1 - filename.length);\n        }\n        if (filename.indexOf('/') === -1) {\n            filename = path.join(projectPath.substr(documentPath.length + 1 - projectPath.length), filename);\n        }\n        return filename;\n    }\n\n    getTokens() {\n        return this._tokens;\n    }\n\n    getLineCount() {\n        return this._lineCount;\n    }\n\n    /**\n     * Build an include file tree and return the depth of the file relative to the root of the project...\n    **/\n    getDepthByFilename() {\n        let projectPath        = this._projectPath;\n        let includesByFilename = {};\n        let includeByFilename  = {}; // To check for circular includes...\n        let depthByFilename    = {};\n        const makeNodeByFilename = (node) => {\n                if (node.includes) {\n                    includesByFilename[node.filename] = node.includes;\n                    node.includes.forEach((node) => {\n                        makeNodeByFilename(node);\n                    });\n                }\n            };\n        const makeIncludes = (node) => {\n                if (this._error) {\n                    return;\n                }\n                if (node.includes) {\n                    node.includes.forEach((includeNode) => {\n                        let filename1 = path.removePath(projectPath, node.filename);\n                        let filename2 = includeNode.filename;\n                        let index1    = filename1 + '!' + filename2;\n                        let index2    = filename2 + '!' + filename1;\n                        if ((index1 in includeByFilename) || (index2 in includeByFilename)) {\n                            if (!this._error) {\n                                if (this._onError) {\n                                    this._onError({\n                                        type:    'Error',\n                                        message: 'Circular include in ' +\n                                            '<i class=\"error\">\"' + filename1 + '\"</i> and ' +\n                                            '<i class=\"error\">' + filename2 + '\"</i>.'\n                                    });\n                                }\n                                this._error = true;\n                            }\n                            return;\n                        }\n                        includeByFilename[index1] = true;\n                        makeIncludes(includeNode);\n                    });\n                } else if (node.filename in includesByFilename) {\n                    node.includes = includesByFilename[node.filename];\n                }\n            };\n        const makeIncludeOrder = (node, depth) => {\n                if (node.filename in depthByFilename) {\n                    depthByFilename[node.filename] = Math.max(depthByFilename[node.filename], depth);\n                } else {\n                    depthByFilename[node.filename] = depth;\n                }\n                if (node.includes) {\n                    node.includes.forEach((node) => {\n                        makeIncludeOrder(node, depth + 1);\n                    });\n                }\n            };\n        makeNodeByFilename(this._includeRoot);\n        makeIncludes(this._includeRoot);\n        if (!this._error) {\n            makeIncludeOrder(this._includeRoot, 0);\n        }\n        return this._error ? null : depthByFilename;\n    }\n\n    getSortedFiles() {\n        if (this._sortedFiles) {\n            return this._sortedFiles;\n        }\n        let depthByFilename = this.getDepthByFilename();\n        let documentPath    = this._documentPath;\n        let projectPath     = this._projectPath;\n        let filesDone       = this._filesDone;\n        let files           = [];\n        if (!depthByFilename) {\n            return [];\n        }\n        for (let i in filesDone) {\n            let fileDone = filesDone[i];\n            fileDone.toString = function() {\n                let depth    = 0;\n                let filename = this.filename;\n                if (this.filename in depthByFilename) {\n                    depth = depthByFilename[filename];\n                } else {\n                    filename = path.removePath(projectPath, path.join(documentPath, filename));\n                    if (filename in depthByFilename) {\n                        depth = depthByFilename[filename];\n                    }\n                }\n                this.sortIndex = ('00000000' + (99999999 - depth)).substr(-8);\n                return this.sortIndex;\n            };\n            files.push(fileDone);\n        }\n        files.sort();\n        this._sortedFiles = files;\n        return files;\n    }\n\n    getDefines() {\n        return this._defines;\n    }\n\n    getDefinedOffsetTokens(tokens, offset, fileIndex) {\n        if (!tokens) {\n            return [];\n        }\n        let defines = this._defines;\n        tokens.forEach((token) => {\n            token.index += offset;\n            if (token.cls === t.TOKEN_IDENTIFIER) {\n                let value = defines.get(token.lexeme);\n                if (value !== false) {\n                    if (!isNaN(parseInt(value, 10)) && (parseInt(value, 10) === value)) {\n                        token.value = parseInt(value, 10);\n                        token.cls   = t.TOKEN_NUMBER;\n                    } else if (!isNaN(parseFloat(value))) {\n                        token.value = parseFloat(value);\n                        token.cls   = t.TOKEN_NUMBER;\n                    } else {\n                        token.cls   = t.TOKEN_STRING;\n                    }\n                    token.lexeme = value;\n                }\n            }\n            token.fileIndex = fileIndex;\n        });\n        return tokens;\n    }\n\n    getDefinedConcatTokens() {\n        let tokens      = [];\n        let tokenOffset = 0;\n        let files       = this.getSortedFiles();\n        dispatcher.dispatch('PreProcessor.Database', {defines: this._defines, files: files});\n        files.forEach(\n            function(file, fileIndex) {\n                tokens = tokens.concat(this.getDefinedOffsetTokens(file.tokens || [], tokenOffset, fileIndex));\n                tokenOffset += file.tokens ? file.tokens.length : 0;\n            },\n            this\n        );\n        return tokens;\n    }\n\n    getResources() {\n        return this._resources;\n    }\n\n    getFormResources() {\n        let result = [];\n        this._resources.getResources().forEach((resource) => {\n            if (resource instanceof FormResource) {\n                result.push(resource);\n            }\n        });\n        return result;\n    }\n};\n", "meta": {"content_hash": "98a29e190c60c4766a9bef6fe00290f0", "timestamp": "", "source": "github", "line_count": 382, "max_line_length": 111, "avg_line_length": 37.774869109947645, "alnum_prop": 0.47574497574497576, "repo_name": "ArnoVanDerVegt/wheel", "id": "e1dfb0e2a65b94973a222ea022aee81e380ece8e", "size": "14585", "binary": false, "copies": "1", "ref": "refs/heads/main", "path": "js/frontend/compiler/preprocessor/PreProcessor.js", "mode": "33188", "license": "mit", "language": [{"name": "C", "bytes": "113289"}, {"name": "CSS", "bytes": "526894"}, {"name": "HTML", "bytes": "1657447"}, {"name": "JavaScript", "bytes": "4667529"}, {"name": "Rich Text Format", "bytes": "496"}]}}
{"text": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <title>extensible-records: Not compatible</title>\n    <link rel=\"shortcut icon\" type=\"image/png\" href=\"../../../../../favicon.png\" />\n    <link href=\"../../../../../bootstrap.min.css\" rel=\"stylesheet\">\n    <link href=\"../../../../../bootstrap-custom.css\" rel=\"stylesheet\">\n    <link href=\"//maxcdn.bootstrapcdn.com/font-awesome/4.2.0/css/font-awesome.min.css\" rel=\"stylesheet\">\n    <script src=\"../../../../../moment.min.js\"></script>\n    <!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries -->\n    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->\n    <!--[if lt IE 9]>\n      <script src=\"https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js\"></script>\n      <script src=\"https://oss.maxcdn.com/respond/1.4.2/respond.min.js\"></script>\n    <![endif]-->\n  </head>\n  <body>\n    <div class=\"container\">\n      <div class=\"navbar navbar-default\" role=\"navigation\">\n        <div class=\"container-fluid\">\n          <div class=\"navbar-header\">\n            <a class=\"navbar-brand\" href=\"../../../../..\"><i class=\"fa fa-lg fa-flag-checkered\"></i> Coq bench</a>\n          </div>\n          <div id=\"navbar\" class=\"collapse navbar-collapse\">\n            <ul class=\"nav navbar-nav\">\n              <li><a href=\"../..\">clean / released</a></li>\n              <li class=\"active\"><a href=\"\">8.9.0 / extensible-records - 1.0.0</a></li>\n            </ul>\n          </div>\n        </div>\n      </div>\n      <div class=\"article\">\n        <div class=\"row\">\n          <div class=\"col-md-12\">\n            <a href=\"../..\">\u00ab Up</a>\n            <h1>\n              extensible-records\n              <small>\n                1.0.0\n                <span class=\"label label-info\">Not compatible</span>\n              </small>\n            </h1>\n            <p><em><script>document.write(moment(\"2020-03-15 06:26:03 +0000\", \"YYYY-MM-DD HH:mm:ss Z\").fromNow());</script> (2020-03-15 06:26:03 UTC)</em><p>\n            <h2>Context</h2>\n            <pre># Packages matching: installed\n# Name              # Installed # Synopsis\nbase-bigarray       base\nbase-threads        base\nbase-unix           base\ncamlp5              7.11        Preprocessor-pretty-printer of OCaml\nconf-findutils      1           Virtual package relying on findutils\nconf-m4             1           Virtual package relying on m4\ncoq                 8.9.0       Formal proof management system\nnum                 1.3         The legacy Num library for arbitrary-precision integer and rational arithmetic\nocaml               4.09.0      The OCaml compiler (virtual package)\nocaml-base-compiler 4.09.0      Official release 4.09.0\nocaml-config        1           OCaml Switch Configuration\nocamlfind           1.8.1       A library manager for OCaml\n# opam file:\nopam-version: &quot;2.0&quot;\nmaintainer: &quot;gmalecha@gmail.com&quot;\nhomepage: &quot;https://github.com/gmalecha/coq-extensible-records&quot;\ndev-repo: &quot;git+https://github.com/gmalecha/coq-extensible-records.git&quot;\nbug-reports: &quot;https://github.com/gmalecha/coq-extensible-records/issues&quot;\nauthors: [&quot;Gregory Malecha&quot;]\nlicense: &quot;MIT&quot;\nbuild: [\n  [make &quot;-j%{jobs}%&quot;]\n]\ninstall: [\n  [make &quot;install&quot;]\n]\ndepends: [\n  &quot;ocaml&quot;\n  &quot;coq&quot; {&gt;= &quot;8.5.0&quot; &amp; &lt; &quot;8.9&quot;}\n]\nsynopsis: &quot;Definitional (canonical) extensible records in Coq with string keys and arbitrary (non-dependent) types&quot;\nurl {\n  src:\n    &quot;https://github.com/gmalecha/coq-extensible-records/archive/v0.5.0.tar.gz&quot;\n  checksum: &quot;md5=43211697cd961dafb8b8e5e1e7a94253&quot;\n}\n</pre>\n            <h2>Lint</h2>\n            <dl class=\"dl-horizontal\">\n              <dt>Command</dt>\n              <dd><code>true</code></dd>\n              <dt>Return code</dt>\n              <dd>0</dd>\n            </dl>\n            <h2>Dry install</h2>\n            <p>Dry install with the current Coq version:</p>\n            <dl class=\"dl-horizontal\">\n              <dt>Command</dt>\n              <dd><code>opam install -y --show-action coq-extensible-records.1.0.0 coq.8.9.0</code></dd>\n              <dt>Return code</dt>\n              <dd>5120</dd>\n              <dt>Output</dt>\n              <dd><pre>[NOTE] Package coq is already installed (current version is 8.9.0).\nThe following dependencies couldn&#39;t be met:\n  - coq-extensible-records -&gt; coq &lt; 8.9 -&gt; ocaml &lt; 4.06.0\n      base of this switch (use `--unlock-base&#39; to force)\nYour request can&#39;t be satisfied:\n  - No available version of coq satisfies the constraints\nNo solution found, exiting\n</pre></dd>\n            </dl>\n            <p>Dry install without Coq/switch base, to test if the problem was incompatibility with the current Coq/OCaml version:</p>\n            <dl class=\"dl-horizontal\">\n              <dt>Command</dt>\n              <dd><code>opam remove -y coq; opam install -y --show-action --unlock-base coq-extensible-records.1.0.0</code></dd>\n              <dt>Return code</dt>\n              <dd>0</dd>\n            </dl>\n            <h2>Install dependencies</h2>\n            <dl class=\"dl-horizontal\">\n              <dt>Command</dt>\n              <dd><code>true</code></dd>\n              <dt>Return code</dt>\n              <dd>0</dd>\n              <dt>Duration</dt>\n              <dd>0 s</dd>\n            </dl>\n            <h2>Install</h2>\n            <dl class=\"dl-horizontal\">\n              <dt>Command</dt>\n              <dd><code>true</code></dd>\n              <dt>Return code</dt>\n              <dd>0</dd>\n              <dt>Duration</dt>\n              <dd>0 s</dd>\n            </dl>\n            <h2>Installation size</h2>\n            <p>No files were installed.</p>\n            <h2>Uninstall</h2>\n            <dl class=\"dl-horizontal\">\n              <dt>Command</dt>\n              <dd><code>true</code></dd>\n              <dt>Return code</dt>\n              <dd>0</dd>\n              <dt>Missing removes</dt>\n              <dd>\n                none\n              </dd>\n              <dt>Wrong removes</dt>\n              <dd>\n                none\n              </dd>\n            </dl>\n          </div>\n        </div>\n      </div>\n      <hr/>\n      <div class=\"footer\">\n        <p class=\"text-center\">\n          <small>Sources are on <a href=\"https://github.com/coq-bench\">GitHub</a>. \u00a9 Guillaume Claret.</small>\n        </p>\n      </div>\n    </div>\n    <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js\"></script>\n    <script src=\"../../../../../bootstrap.min.js\"></script>\n  </body>\n</html>\n", "meta": {"content_hash": "38536a68bde1ccd750b5db305e5440d3", "timestamp": "", "source": "github", "line_count": 165, "max_line_length": 157, "avg_line_length": 40.412121212121214, "alnum_prop": 0.5358428314337133, "repo_name": "coq-bench/coq-bench.github.io", "id": "0ca2cf02f8dc11060ba2d6ecd338412ba15a0b3c", "size": "6670", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "clean/Linux-x86_64-4.09.0-2.0.5/released/8.9.0/extensible-records/1.0.0.html", "mode": "33188", "license": "mit", "language": []}}
{"text": "import {ArgumentsParser} from './ArgumentsParser'\n\nexport interface ArgumentsParserFactory {\n    createCommentsArgsParser(): ArgumentsParser;\n    createFromArgsParser(): ArgumentsParser;\n    createMaintainerArgsParser(): ArgumentsParser;\n    createRunArgsParser(): ArgumentsParser;\n    createCmdArgsParser(): ArgumentsParser;\n    createLabelArgsParser(): ArgumentsParser;\n    createExposeArgsParser(): ArgumentsParser;\n    createEnvArgsParser(): ArgumentsParser;\n    createAddArgsParser(): ArgumentsParser;\n    createCopyArgsParser(): ArgumentsParser;\n    createEntryPointArgsParser(): ArgumentsParser;\n    createVolumeArgsParser(): ArgumentsParser;\n    createUserArgsParser(): ArgumentsParser;\n    createWorkdirArgsParser(): ArgumentsParser;\n    createArgArgsParser(): ArgumentsParser;\n    createOnbuildArgsParser(): ArgumentsParser;\n    createStopSignalArgsParser(): ArgumentsParser;\n}\n", "meta": {"content_hash": "b731e951046d5d71b5c3856e222dfda4", "timestamp": "", "source": "github", "line_count": 21, "max_line_length": 50, "avg_line_length": 42.285714285714285, "alnum_prop": 0.7882882882882883, "repo_name": "guilhermevidal/ya-dockerfile-parser", "id": "4dfd70f3b72b063ad7d53b1c5e811ee3875c928e", "size": "888", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "src/ArgumentsParserFactory.ts", "mode": "33188", "license": "mit", "language": [{"name": "JavaScript", "bytes": "21959"}, {"name": "TypeScript", "bytes": "29316"}]}}
{"text": "/* \n * For Getting Article From Feed\n */\n\njQuery.browser = {};\n(function() {\n\n    jQuery.browser.msie = false;\n    jQuery.browser.version = 0;\n\n    if (navigator.userAgent.match(/MSIE ([0-9]+)\\./)) {\n        jQuery.browser.msie = true;\n        jQuery.browser.version = RegExp.$1;\n    }\n})();\n\njQuery.getFeed = function(options) {\n\n    options = jQuery.extend({\n\n        url: null,\n        data: null,\n        cache: true,\n        success: null,\n        failure: null,\n        error: null,\n        global: true\n\n    }, options);\n\n    if (options.url) {\n\n        if (jQuery.isFunction(options.failure) && jQuery.type(options.error) === 'null') {\n            // Handle legacy failure option\n            options.error = function(xhr, msg, e) {\n                options.failure(msg, e);\n            }\n        } else if (jQuery.type(options.failure) === jQuery.type(options.error) === 'null') {\n            // Default error behavior if failure & error both unspecified\n            options.error = function(xhr, msg, e) {\n                window.console && console.log('getFeed failed to load feed', xhr, msg, e);\n            }\n        }\n\n        return $.ajax({\n            type: 'GET',\n            url: options.url,\n            data: options.data,\n            cache: options.cache,\n            dataType: (jQuery.browser.msie) ? \"text\" : \"xml\",\n            success: function(xml) {\n                var feed = new JFeed(xml);\n                if (jQuery.isFunction(options.success)) options.success(feed);\n            },\n            error: options.error,\n            global: options.global\n        });\n    }\n};\n\nfunction JFeed(xml) {\n    if (xml) this.parse(xml);\n};\n\nJFeed.prototype = {\n\n    type: '',\n    version: '',\n    title: '',\n    link: '',\n    description: '',\n    media: '',\n    parse: function(xml) {\n\n        if (jQuery.browser.msie) {\n            var xmlDoc = new ActiveXObject(\"Microsoft.XMLDOM\");\n            xmlDoc.loadXML(xml);\n            xml = xmlDoc;\n        }\n\n        if (jQuery('channel', xml).length == 1) {\n\n            this.type = 'rss';\n            var feedClass = new JRss(xml);\n\n        } else if (jQuery('feed', xml).length == 1) {\n\n            this.type = 'atom';\n            var feedClass = new JAtom(xml);\n        }\n\n        if (feedClass) jQuery.extend(this, feedClass);\n    }\n};\n\nfunction JFeedItem() {};\n\nJFeedItem.prototype = {\n\n    title: '',\n    link: '',\n    description: '',\n    updated: '',\n    id: '',\n    media: ''\n};\n\nfunction JAtom(xml) {\n    this._parse(xml);\n};\n\nJAtom.prototype = {\n\n    _parse: function(xml) {\n\n        var channel = jQuery('feed', xml).eq(0);\n\n        this.version = '1.0';\n        this.title = jQuery(channel).find('title:first').text();\n        this.link = jQuery(channel).find('link:first').attr('href');\n        this.description = jQuery(channel).find('subtitle:first').text();\n        this.language = jQuery(channel).attr('xml:lang');\n        this.updated = jQuery(channel).find('updated:first').text();\n        //this.media = jQuery(channel).find('media:first').text();\n\n        this.items = new Array();\n\n        var feed = this;\n\n        jQuery('entry', xml).each(function() {\n\n            var item = new JFeedItem();\n\n            item.title = jQuery(this).find('title').eq(0).text();\n            item.link = jQuery(this).find('link').eq(0).attr('href');\n            item.description = jQuery(this).find('content').eq(0).text();\n            item.updated = jQuery(this).find('updated').eq(0).text();\n            item.id = jQuery(this).find('id').eq(0).text();\n\n            feed.items.push(item);\n        });\n    }\n};\n\nfunction JRss(xml) {\n    this._parse(xml);\n};\n\nJRss.prototype = {\n\n    _parse: function(xml) {\n\n        if (jQuery('rss', xml).length == 0) this.version = '1.0';\n        else this.version = jQuery('rss', xml).eq(0).attr('version');\n\n        var channel = jQuery('channel', xml).eq(0);\n\n        this.title = jQuery(channel).find('title:first').text();\n        this.link = jQuery(channel).find('link:first').text();\n        this.description = jQuery(channel).find('description:first').text();\n        this.language = jQuery(channel).find('language:first').text();\n        this.updated = jQuery(channel).find('lastBuildDate:first').text();\n\n        this.items = new Array();\n\n        var feed = this;\n\n        jQuery('item', xml).each(function() {\n\n            var item = new JFeedItem();\n\n            item.title = jQuery(this).find('title').eq(0).text();\n            item.link = jQuery(this).find('link').eq(0).text();\n            item.description = jQuery(this).find('description').eq(0).text();\n            item.updated = jQuery(this).find('pubDate').eq(0).text();\n            item.id = jQuery(this).find('guid').eq(0).text();\n            item.media = jQuery(this).find('media\\\\:content, content').eq(0).attr('url');\n\n            feed.items.push(item);\n        });\n\n    }\n};", "meta": {"content_hash": "bfe80e629369d97a6f7214c9525259f8", "timestamp": "", "source": "github", "line_count": 183, "max_line_length": 92, "avg_line_length": 26.53551912568306, "alnum_prop": 0.528830313014827, "repo_name": "mylex/matcha_tab", "id": "4dc3a9dce012fa7f20559ae8c07c5f531796ca7f", "size": "4856", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "js/jsoup_cl_mas.js", "mode": "33188", "license": "mit", "language": [{"name": "CSS", "bytes": "6532"}, {"name": "HTML", "bytes": "23251"}, {"name": "JavaScript", "bytes": "24513"}]}}
{"text": "package de.holisticon.showcase.ticketbooking.model\n\n/**\n * <p>\n * Contains price categories - each category represents the price for a ticket in a particular section at a particular venue for\n * a particular event, for a particular ticket category.\n * </p>\n *\n * <p>\n * The section, show and ticket category form the natural id of this entity, and therefore must be unique. JPA requires us to use the class level\n * <code>@Table</code> constraint\n * </p>\n *\n * @author Shane Bryzak\n * @author Pete Muir\n */\nobject TicketPrice {\n  type Id = Long\n}\n\nfinal case class TicketPrice(\n  id: TicketPrice.Id,\n  section: Section,\n  ticketCategory: TicketCategory,\n  price: Float\n)\n", "meta": {"content_hash": "1e4549574548c627df442357db647e31", "timestamp": "", "source": "github", "line_count": 26, "max_line_length": 145, "avg_line_length": 25.807692307692307, "alnum_prop": 0.7213114754098361, "repo_name": "holisticon/reactive-ticket-booking", "id": "f8d36bcd6e229c4676943ead67d005774c4ab340", "size": "671", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "src/main/scala/de/holisticon/showcase/ticketbooking/model/TicketPrice.scala", "mode": "33188", "license": "apache-2.0", "language": [{"name": "CSS", "bytes": "17991"}, {"name": "HTML", "bytes": "106838"}, {"name": "JavaScript", "bytes": "90415"}, {"name": "Scala", "bytes": "52848"}]}}
{"text": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<!-- NewPage -->\n<html lang=\"en\">\n<head>\n<!-- Generated by javadoc (1.8.0_73) on Mon Sep 19 13:35:20 PDT 2016 -->\n<title>BinaryCoOccurrenceReaderTest</title>\n<meta name=\"date\" content=\"2016-09-19\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"../../../../../stylesheet.css\" title=\"Style\">\n<script type=\"text/javascript\" src=\"../../../../../script.js\"></script>\n</head>\n<body>\n<script type=\"text/javascript\"><!--\n    try {\n        if (location.href.indexOf('is-external=true') == -1) {\n            parent.document.title=\"BinaryCoOccurrenceReaderTest\";\n        }\n    }\n    catch(err) {\n    }\n//-->\nvar methods = {\"i0\":10,\"i1\":10,\"i2\":10};\nvar tabs = {65535:[\"t0\",\"All Methods\"],2:[\"t2\",\"Instance Methods\"],8:[\"t4\",\"Concrete Methods\"]};\nvar altColor = \"altColor\";\nvar rowColor = \"rowColor\";\nvar tableTab = \"tableTab\";\nvar activeTableTab = \"activeTableTab\";\n</script>\n<noscript>\n<div>JavaScript is disabled on your browser.</div>\n</noscript>\n<!-- ========= START OF TOP NAVBAR ======= -->\n<div class=\"topNav\"><a name=\"navbar.top\">\n<!--   -->\n</a>\n<div class=\"skipNav\"><a href=\"#skip.navbar.top\" title=\"Skip navigation links\">Skip navigation links</a></div>\n<a name=\"navbar.top.firstrow\">\n<!--   -->\n</a>\n<ul class=\"navList\" title=\"Navigation\">\n<li><a href=\"../../../../../overview-summary.html\">Overview</a></li>\n<li><a href=\"package-summary.html\">Package</a></li>\n<li class=\"navBarCell1Rev\">Class</li>\n<li><a href=\"package-tree.html\">Tree</a></li>\n<li><a href=\"../../../../../deprecated-list.html\">Deprecated</a></li>\n<li><a href=\"../../../../../index-files/index-1.html\">Index</a></li>\n<li><a href=\"../../../../../help-doc.html\">Help</a></li>\n</ul>\n</div>\n<div class=\"subNav\">\n<ul class=\"navList\">\n<li><a href=\"../../../../../org/deeplearning4j/models/glove/count/BinaryCoOccurrenceReader.html\" title=\"class in org.deeplearning4j.models.glove.count\"><span class=\"typeNameLink\">Prev&nbsp;Class</span></a></li>\n<li><a href=\"../../../../../org/deeplearning4j/models/glove/count/BinaryCoOccurrenceWriter.html\" title=\"class in org.deeplearning4j.models.glove.count\"><span class=\"typeNameLink\">Next&nbsp;Class</span></a></li>\n</ul>\n<ul class=\"navList\">\n<li><a href=\"../../../../../index.html?org/deeplearning4j/models/glove/count/BinaryCoOccurrenceReaderTest.html\" target=\"_top\">Frames</a></li>\n<li><a href=\"BinaryCoOccurrenceReaderTest.html\" target=\"_top\">No&nbsp;Frames</a></li>\n</ul>\n<ul class=\"navList\" id=\"allclasses_navbar_top\">\n<li><a href=\"../../../../../allclasses-noframe.html\">All&nbsp;Classes</a></li>\n</ul>\n<div>\n<script type=\"text/javascript\"><!--\n  allClassesLink = document.getElementById(\"allclasses_navbar_top\");\n  if(window==top) {\n    allClassesLink.style.display = \"block\";\n  }\n  else {\n    allClassesLink.style.display = \"none\";\n  }\n  //-->\n</script>\n</div>\n<div>\n<ul class=\"subNavList\">\n<li>Summary:&nbsp;</li>\n<li>Nested&nbsp;|&nbsp;</li>\n<li>Field&nbsp;|&nbsp;</li>\n<li><a href=\"#constructor.summary\">Constr</a>&nbsp;|&nbsp;</li>\n<li><a href=\"#method.summary\">Method</a></li>\n</ul>\n<ul class=\"subNavList\">\n<li>Detail:&nbsp;</li>\n<li>Field&nbsp;|&nbsp;</li>\n<li><a href=\"#constructor.detail\">Constr</a>&nbsp;|&nbsp;</li>\n<li><a href=\"#method.detail\">Method</a></li>\n</ul>\n</div>\n<a name=\"skip.navbar.top\">\n<!--   -->\n</a></div>\n<!-- ========= END OF TOP NAVBAR ========= -->\n<!-- ======== START OF CLASS DATA ======== -->\n<div class=\"header\">\n<div class=\"subTitle\">org.deeplearning4j.models.glove.count</div>\n<h2 title=\"Class BinaryCoOccurrenceReaderTest\" class=\"title\">Class BinaryCoOccurrenceReaderTest</h2>\n</div>\n<div class=\"contentContainer\">\n<ul class=\"inheritance\">\n<li>java.lang.Object</li>\n<li>\n<ul class=\"inheritance\">\n<li>org.deeplearning4j.models.glove.count.BinaryCoOccurrenceReaderTest</li>\n</ul>\n</li>\n</ul>\n<div class=\"description\">\n<ul class=\"blockList\">\n<li class=\"blockList\">\n<hr>\n<br>\n<pre>public class <span class=\"typeNameLabel\">BinaryCoOccurrenceReaderTest</span>\nextends java.lang.Object</pre>\n<div class=\"block\">Created by fartovii on 25.12.15.</div>\n</li>\n</ul>\n</div>\n<div class=\"summary\">\n<ul class=\"blockList\">\n<li class=\"blockList\">\n<!-- ======== CONSTRUCTOR SUMMARY ======== -->\n<ul class=\"blockList\">\n<li class=\"blockList\"><a name=\"constructor.summary\">\n<!--   -->\n</a>\n<h3>Constructor Summary</h3>\n<table class=\"memberSummary\" border=\"0\" cellpadding=\"3\" cellspacing=\"0\" summary=\"Constructor Summary table, listing constructors, and an explanation\">\n<caption><span>Constructors</span><span class=\"tabEnd\">&nbsp;</span></caption>\n<tr>\n<th class=\"colOne\" scope=\"col\">Constructor and Description</th>\n</tr>\n<tr class=\"altColor\">\n<td class=\"colOne\"><code><span class=\"memberNameLink\"><a href=\"../../../../../org/deeplearning4j/models/glove/count/BinaryCoOccurrenceReaderTest.html#BinaryCoOccurrenceReaderTest--\">BinaryCoOccurrenceReaderTest</a></span>()</code>&nbsp;</td>\n</tr>\n</table>\n</li>\n</ul>\n<!-- ========== METHOD SUMMARY =========== -->\n<ul class=\"blockList\">\n<li class=\"blockList\"><a name=\"method.summary\">\n<!--   -->\n</a>\n<h3>Method Summary</h3>\n<table class=\"memberSummary\" border=\"0\" cellpadding=\"3\" cellspacing=\"0\" summary=\"Method Summary table, listing methods, and an explanation\">\n<caption><span id=\"t0\" class=\"activeTableTab\"><span>All Methods</span><span class=\"tabEnd\">&nbsp;</span></span><span id=\"t2\" class=\"tableTab\"><span><a href=\"javascript:show(2);\">Instance Methods</a></span><span class=\"tabEnd\">&nbsp;</span></span><span id=\"t4\" class=\"tableTab\"><span><a href=\"javascript:show(8);\">Concrete Methods</a></span><span class=\"tabEnd\">&nbsp;</span></span></caption>\n<tr>\n<th class=\"colFirst\" scope=\"col\">Modifier and Type</th>\n<th class=\"colLast\" scope=\"col\">Method and Description</th>\n</tr>\n<tr id=\"i0\" class=\"altColor\">\n<td class=\"colFirst\"><code>void</code></td>\n<td class=\"colLast\"><code><span class=\"memberNameLink\"><a href=\"../../../../../org/deeplearning4j/models/glove/count/BinaryCoOccurrenceReaderTest.html#setUp--\">setUp</a></span>()</code>&nbsp;</td>\n</tr>\n<tr id=\"i1\" class=\"rowColor\">\n<td class=\"colFirst\"><code>void</code></td>\n<td class=\"colLast\"><code><span class=\"memberNameLink\"><a href=\"../../../../../org/deeplearning4j/models/glove/count/BinaryCoOccurrenceReaderTest.html#testHasMoreObjects1--\">testHasMoreObjects1</a></span>()</code>&nbsp;</td>\n</tr>\n<tr id=\"i2\" class=\"altColor\">\n<td class=\"colFirst\"><code>void</code></td>\n<td class=\"colLast\"><code><span class=\"memberNameLink\"><a href=\"../../../../../org/deeplearning4j/models/glove/count/BinaryCoOccurrenceReaderTest.html#testHasMoreObjects2--\">testHasMoreObjects2</a></span>()</code>&nbsp;</td>\n</tr>\n</table>\n<ul class=\"blockList\">\n<li class=\"blockList\"><a name=\"methods.inherited.from.class.java.lang.Object\">\n<!--   -->\n</a>\n<h3>Methods inherited from class&nbsp;java.lang.Object</h3>\n<code>clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<div class=\"details\">\n<ul class=\"blockList\">\n<li class=\"blockList\">\n<!-- ========= CONSTRUCTOR DETAIL ======== -->\n<ul class=\"blockList\">\n<li class=\"blockList\"><a name=\"constructor.detail\">\n<!--   -->\n</a>\n<h3>Constructor Detail</h3>\n<a name=\"BinaryCoOccurrenceReaderTest--\">\n<!--   -->\n</a>\n<ul class=\"blockListLast\">\n<li class=\"blockList\">\n<h4>BinaryCoOccurrenceReaderTest</h4>\n<pre>public&nbsp;BinaryCoOccurrenceReaderTest()</pre>\n</li>\n</ul>\n</li>\n</ul>\n<!-- ============ METHOD DETAIL ========== -->\n<ul class=\"blockList\">\n<li class=\"blockList\"><a name=\"method.detail\">\n<!--   -->\n</a>\n<h3>Method Detail</h3>\n<a name=\"setUp--\">\n<!--   -->\n</a>\n<ul class=\"blockList\">\n<li class=\"blockList\">\n<h4>setUp</h4>\n<pre>public&nbsp;void&nbsp;setUp()\n           throws java.lang.Exception</pre>\n<dl>\n<dt><span class=\"throwsLabel\">Throws:</span></dt>\n<dd><code>java.lang.Exception</code></dd>\n</dl>\n</li>\n</ul>\n<a name=\"testHasMoreObjects1--\">\n<!--   -->\n</a>\n<ul class=\"blockList\">\n<li class=\"blockList\">\n<h4>testHasMoreObjects1</h4>\n<pre>public&nbsp;void&nbsp;testHasMoreObjects1()\n                         throws java.lang.Exception</pre>\n<dl>\n<dt><span class=\"throwsLabel\">Throws:</span></dt>\n<dd><code>java.lang.Exception</code></dd>\n</dl>\n</li>\n</ul>\n<a name=\"testHasMoreObjects2--\">\n<!--   -->\n</a>\n<ul class=\"blockListLast\">\n<li class=\"blockList\">\n<h4>testHasMoreObjects2</h4>\n<pre>public&nbsp;void&nbsp;testHasMoreObjects2()\n                         throws java.lang.Exception</pre>\n<dl>\n<dt><span class=\"throwsLabel\">Throws:</span></dt>\n<dd><code>java.lang.Exception</code></dd>\n</dl>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n</div>\n<!-- ========= END OF CLASS DATA ========= -->\n<!-- ======= START OF BOTTOM NAVBAR ====== -->\n<div class=\"bottomNav\"><a name=\"navbar.bottom\">\n<!--   -->\n</a>\n<div class=\"skipNav\"><a href=\"#skip.navbar.bottom\" title=\"Skip navigation links\">Skip navigation links</a></div>\n<a name=\"navbar.bottom.firstrow\">\n<!--   -->\n</a>\n<ul class=\"navList\" title=\"Navigation\">\n<li><a href=\"../../../../../overview-summary.html\">Overview</a></li>\n<li><a href=\"package-summary.html\">Package</a></li>\n<li class=\"navBarCell1Rev\">Class</li>\n<li><a href=\"package-tree.html\">Tree</a></li>\n<li><a href=\"../../../../../deprecated-list.html\">Deprecated</a></li>\n<li><a href=\"../../../../../index-files/index-1.html\">Index</a></li>\n<li><a href=\"../../../../../help-doc.html\">Help</a></li>\n</ul>\n</div>\n<div class=\"subNav\">\n<ul class=\"navList\">\n<li><a href=\"../../../../../org/deeplearning4j/models/glove/count/BinaryCoOccurrenceReader.html\" title=\"class in org.deeplearning4j.models.glove.count\"><span class=\"typeNameLink\">Prev&nbsp;Class</span></a></li>\n<li><a href=\"../../../../../org/deeplearning4j/models/glove/count/BinaryCoOccurrenceWriter.html\" title=\"class in org.deeplearning4j.models.glove.count\"><span class=\"typeNameLink\">Next&nbsp;Class</span></a></li>\n</ul>\n<ul class=\"navList\">\n<li><a href=\"../../../../../index.html?org/deeplearning4j/models/glove/count/BinaryCoOccurrenceReaderTest.html\" target=\"_top\">Frames</a></li>\n<li><a href=\"BinaryCoOccurrenceReaderTest.html\" target=\"_top\">No&nbsp;Frames</a></li>\n</ul>\n<ul class=\"navList\" id=\"allclasses_navbar_bottom\">\n<li><a href=\"../../../../../allclasses-noframe.html\">All&nbsp;Classes</a></li>\n</ul>\n<div>\n<script type=\"text/javascript\"><!--\n  allClassesLink = document.getElementById(\"allclasses_navbar_bottom\");\n  if(window==top) {\n    allClassesLink.style.display = \"block\";\n  }\n  else {\n    allClassesLink.style.display = \"none\";\n  }\n  //-->\n</script>\n</div>\n<div>\n<ul class=\"subNavList\">\n<li>Summary:&nbsp;</li>\n<li>Nested&nbsp;|&nbsp;</li>\n<li>Field&nbsp;|&nbsp;</li>\n<li><a href=\"#constructor.summary\">Constr</a>&nbsp;|&nbsp;</li>\n<li><a href=\"#method.summary\">Method</a></li>\n</ul>\n<ul class=\"subNavList\">\n<li>Detail:&nbsp;</li>\n<li>Field&nbsp;|&nbsp;</li>\n<li><a href=\"#constructor.detail\">Constr</a>&nbsp;|&nbsp;</li>\n<li><a href=\"#method.detail\">Method</a></li>\n</ul>\n</div>\n<a name=\"skip.navbar.bottom\">\n<!--   -->\n</a></div>\n<!-- ======== END OF BOTTOM NAVBAR ======= -->\n</body>\n</html>\n", "meta": {"content_hash": "e9531ec413654c0a6e36406c308c395e", "timestamp": "", "source": "github", "line_count": 311, "max_line_length": 391, "avg_line_length": 35.559485530546624, "alnum_prop": 0.6449046025861289, "repo_name": "YeewenTan/YeewenTan.github.io", "id": "c2361a70072799e975f99a0c7782c0c45f69293e", "size": "11059", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "doc/org/deeplearning4j/models/glove/count/BinaryCoOccurrenceReaderTest.html", "mode": "33261", "license": "apache-2.0", "language": [{"name": "CSS", "bytes": "133538"}, {"name": "HTML", "bytes": "32734320"}, {"name": "JavaScript", "bytes": "784456"}, {"name": "PHP", "bytes": "23949"}, {"name": "Ruby", "bytes": "11810"}, {"name": "Shell", "bytes": "122"}]}}
{"text": "ESEO - I3 - Design Pattern\n", "meta": {"content_hash": "92fc72731e16547212ed1a2d00dc46d4", "timestamp": "", "source": "github", "line_count": 1, "max_line_length": 26, "avg_line_length": 27.0, "alnum_prop": 0.7037037037037037, "repo_name": "percenuage/virtualOS", "id": "44bccc25c3433d56aee17645f252c07a8af3355a", "size": "40", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "README.md", "mode": "33188", "license": "mit", "language": [{"name": "Java", "bytes": "23842"}, {"name": "PostScript", "bytes": "67892"}, {"name": "TeX", "bytes": "40324"}]}}
{"text": "var chai = require('chai');\nvar promised = require('chai-as-promised');\nchai.use(promised)\n\nvar expect = chai.expect;\n\ndescribe('Poker hand evaluator', function () {\n\n  beforeEach(function () {\n    this.timeout(15000);\n    browser.get('/')\n    browser.waitForAngular();\n\n    var manual = element(by.css('a#manual-cards'));\n    manual.click();\n  });\n\n  describe('add a card manually page', function () {\n    it('should have a title in the browser tab', function () {\n      expect(browser.getTitle()).to.eventually.eq('Poker hand evaluator');\n    });\n\n    it('should have a royal flush button', function () {\n      expect(browser.isElementPresent(element(by.css('button#royal-flush')))).to.eventually.be.true;\n    });\n\n    it('should have a straight flush button', function () {\n      expect(browser.isElementPresent(element(by.css('button#straight-flush')))).to.eventually.be.true;\n    });\n\n    it('should have a four of a kind button', function () {\n      expect(browser.isElementPresent(element(by.css('button#four-of-a-kind')))).to.eventually.be.true;\n    });\n\n    it('should have a full house button', function () {\n      expect(browser.isElementPresent(element(by.css('button#full-house')))).to.eventually.be.true;\n    });\n\n    it('should have a flush button', function () {\n      expect(browser.isElementPresent(element(by.css('button#flush')))).to.eventually.be.true;\n    });\n\n    it('should have a straight button', function () {\n      expect(browser.isElementPresent(element(by.css('button#straight')))).to.eventually.be.true;\n    });\n\n    it('should have a three of a kind button', function () {\n      expect(browser.isElementPresent(element(by.css('button#three-of-a-kind')))).to.eventually.be.true;\n    });\n\n    it('should have a two pair button', function () {\n      expect(browser.isElementPresent(element(by.css('button#two-pair')))).to.eventually.be.true;\n    });\n\n    it('should have a pair button', function () {\n      expect(browser.isElementPresent(element(by.css('button#pair')))).to.eventually.be.true;\n    });\n\n    it('should have a high card button', function () {\n      expect(browser.isElementPresent(element(by.css('button#high-card')))).to.eventually.be.true;\n    });\n\n    it('should have a two of diamonds link', function () {\n      expect(browser.isElementPresent(element(by.css('a#add-2D')))).to.eventually.be.true;\n    });\n\n    it('should have a two of hearts link', function () {\n      expect(browser.isElementPresent(element(by.css('a#add-2H')))).to.eventually.be.true;\n    });\n\n    it('should have a two of clubs link', function () {\n      expect(browser.isElementPresent(element(by.css('a#add-2C')))).to.eventually.be.true;\n    });\n\n    it('should have a two of spades link', function () {\n      expect(browser.isElementPresent(element(by.css('a#add-2S')))).to.eventually.be.true;\n    });\n\n\n  });\n});\n", "meta": {"content_hash": "19023df892b3fdde5749836e56db38bd", "timestamp": "", "source": "github", "line_count": 81, "max_line_length": 104, "avg_line_length": 35.01234567901235, "alnum_prop": 0.6544428772919605, "repo_name": "bryangreen/poker-evaluator", "id": "524080f0d6429b2a0159a233f9a45e34e32055e9", "size": "2836", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "src/test/e2e/suite1/manual-elements.test.js", "mode": "33188", "license": "mit", "language": [{"name": "CSS", "bytes": "908"}, {"name": "HTML", "bytes": "6752"}, {"name": "JavaScript", "bytes": "7696"}, {"name": "TypeScript", "bytes": "52822"}]}}
{"text": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <parent>\n        <groupId>com.facebook.presto</groupId>\n        <artifactId>presto-root</artifactId>\n        <version>0.217-SNAPSHOT</version>\n    </parent>\n\n    <artifactId>presto-kafka</artifactId>\n    <description>Presto - Kafka Connector</description>\n    <packaging>presto-plugin</packaging>\n\n    <properties>\n        <air.main.basedir>${project.parent.basedir}</air.main.basedir>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>io.airlift</groupId>\n            <artifactId>bootstrap</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>io.airlift</groupId>\n            <artifactId>json</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>io.airlift</groupId>\n            <artifactId>log</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>io.airlift</groupId>\n            <artifactId>configuration</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>com.facebook.presto</groupId>\n            <artifactId>presto-record-decoder</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>com.google.guava</groupId>\n            <artifactId>guava</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>com.google.inject</groupId>\n            <artifactId>guice</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>javax.validation</groupId>\n            <artifactId>validation-api</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.apache.kafka</groupId>\n            <artifactId>kafka_2.10</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>joda-time</groupId>\n            <artifactId>joda-time</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>io.airlift</groupId>\n            <artifactId>joda-to-java-time-bridge</artifactId>\n            <scope>runtime</scope>\n        </dependency>\n\n        <dependency>\n            <groupId>javax.annotation</groupId>\n            <artifactId>javax.annotation-api</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>javax.inject</groupId>\n            <artifactId>javax.inject</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>com.fasterxml.jackson.core</groupId>\n            <artifactId>jackson-core</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>com.fasterxml.jackson.core</groupId>\n            <artifactId>jackson-databind</artifactId>\n        </dependency>\n\n        <!-- Presto SPI -->\n        <dependency>\n            <groupId>com.facebook.presto</groupId>\n            <artifactId>presto-spi</artifactId>\n            <scope>provided</scope>\n        </dependency>\n\n        <dependency>\n            <groupId>io.airlift</groupId>\n            <artifactId>slice</artifactId>\n            <scope>provided</scope>\n        </dependency>\n\n        <dependency>\n            <groupId>io.airlift</groupId>\n            <artifactId>units</artifactId>\n            <scope>provided</scope>\n        </dependency>\n\n        <dependency>\n            <groupId>com.fasterxml.jackson.core</groupId>\n            <artifactId>jackson-annotations</artifactId>\n            <scope>provided</scope>\n        </dependency>\n\n        <!-- used by tests but also needed transitively -->\n        <dependency>\n            <groupId>io.airlift</groupId>\n            <artifactId>log-manager</artifactId>\n            <scope>runtime</scope>\n        </dependency>\n\n        <dependency>\n            <groupId>org.apache.zookeeper</groupId>\n            <artifactId>zookeeper</artifactId>\n            <scope>runtime</scope>\n        </dependency>\n\n        <dependency>\n            <groupId>com.101tec</groupId>\n            <artifactId>zkclient</artifactId>\n            <version>0.10</version>\n            <scope>runtime</scope>\n            <exclusions>\n                <exclusion>\n                    <artifactId>log4j</artifactId>\n                    <groupId>log4j</groupId>\n                </exclusion>\n                <exclusion>\n                    <groupId>org.slf4j</groupId>\n                    <artifactId>slf4j-log4j12</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n\n        <!-- for testing -->\n        <dependency>\n            <groupId>org.testng</groupId>\n            <artifactId>testng</artifactId>\n            <scope>test</scope>\n        </dependency>\n\n        <dependency>\n            <groupId>io.airlift</groupId>\n            <artifactId>testing</artifactId>\n            <scope>test</scope>\n        </dependency>\n\n        <dependency>\n            <groupId>com.facebook.presto</groupId>\n            <artifactId>presto-main</artifactId>\n            <scope>test</scope>\n        </dependency>\n\n        <dependency>\n            <groupId>com.facebook.presto</groupId>\n            <artifactId>presto-tpch</artifactId>\n            <scope>test</scope>\n        </dependency>\n\n        <dependency>\n            <groupId>com.facebook.presto</groupId>\n            <artifactId>presto-client</artifactId>\n            <scope>test</scope>\n        </dependency>\n\n        <dependency>\n            <groupId>com.facebook.presto</groupId>\n            <artifactId>presto-tests</artifactId>\n            <scope>test</scope>\n        </dependency>\n\n        <dependency>\n            <groupId>io.airlift.tpch</groupId>\n            <artifactId>tpch</artifactId>\n            <scope>test</scope>\n        </dependency>\n\n        <dependency>\n            <groupId>org.jetbrains</groupId>\n            <artifactId>annotations</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-surefire-plugin</artifactId>\n                <configuration>\n                    <!-- integration tests take a very long time so only run them in the CI server -->\n                    <excludes>\n                        <exclude>**/TestKafkaDistributed.java</exclude>\n                    </excludes>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n\n    <profiles>\n        <profile>\n            <id>ci</id>\n            <build>\n                <plugins>\n                    <plugin>\n                        <groupId>org.apache.maven.plugins</groupId>\n                        <artifactId>maven-surefire-plugin</artifactId>\n                        <configuration>\n                            <excludes combine.self=\"override\" />\n                        </configuration>\n                    </plugin>\n                </plugins>\n            </build>\n        </profile>\n    </profiles>\n</project>\n", "meta": {"content_hash": "ae4cfe4e5b6dd871519cf53f3b790ccc", "timestamp": "", "source": "github", "line_count": 232, "max_line_length": 204, "avg_line_length": 30.42241379310345, "alnum_prop": 0.5313119863984131, "repo_name": "raghavsethi/presto", "id": "883d3fd8bf70662c597857d41621ceda9612550d", "size": "7058", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "presto-kafka/pom.xml", "mode": "33188", "license": "apache-2.0", "language": [{"name": "ANTLR", "bytes": "26997"}, {"name": "CSS", "bytes": "13018"}, {"name": "HTML", "bytes": "28633"}, {"name": "Java", "bytes": "31909074"}, {"name": "JavaScript", "bytes": "214692"}, {"name": "Makefile", "bytes": "6830"}, {"name": "PLSQL", "bytes": "2797"}, {"name": "PLpgSQL", "bytes": "11504"}, {"name": "Python", "bytes": "7664"}, {"name": "SQLPL", "bytes": "926"}, {"name": "Shell", "bytes": "29871"}, {"name": "Thrift", "bytes": "12631"}]}}
{"text": "<?php\n\n\nnamespace Genesis\\API\\Request\\Financial\\OnlineBankingPayments;\n\nuse Genesis\\API\\Traits\\Request\\Financial\\PendingPaymentAttributes;\n\n/**\n * Class Bancomer\n *\n * Bancomer offers two options for payments in Mexico, cash payment and bank transfer.\n *\n * @package Genesis\\API\\Request\\Financial\\OnlineBankingPayments\n */\nclass Bancomer extends \\Genesis\\API\\Request\\Base\\Financial\\SouthAmericanPayment\n{\n    use PendingPaymentAttributes;\n\n    /**\n     * Returns the Request transaction type\n     * @return string\n     */\n    protected function getTransactionType()\n    {\n        return \\Genesis\\API\\Constants\\Transaction\\Types::BANCOMER;\n    }\n\n    /**\n     * @return array\n     */\n    public function getAllowedBillingCountries()\n    {\n        return ['MX'];\n    }\n\n    /**\n     * Return additional request attributes\n     *\n     * @return array\n     */\n    protected function getPaymentTransactionStructure()\n    {\n        return array_merge(\n            parent::getPaymentTransactionStructure(),\n            ['return_pending_url' => $this->getReturnPendingUrl()]\n        );\n    }\n}\n", "meta": {"content_hash": "01b83fe6db8ad4818ec9828fd0e9b720", "timestamp": "", "source": "github", "line_count": 48, "max_line_length": 86, "avg_line_length": 22.625, "alnum_prop": 0.6629834254143646, "repo_name": "GenesisGateway/genesis_php", "id": "91138059f3b22ab224b4b5da13e59ed313c93398", "size": "2235", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "src/Genesis/API/Request/Financial/OnlineBankingPayments/Bancomer.php", "mode": "33188", "license": "mit", "language": [{"name": "PHP", "bytes": "2062252"}, {"name": "Ruby", "bytes": "171"}]}}
{"text": "\ufeffusing PocketBoss.Common.Messaging;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace PocketBoss.Messages.Commands\n{\n    [Serializable]\n    public class GetWorkflowInstanceWorkingDataResponse : MessageBase\n    {\n        public string TargetObjectId { get; set; }\n        public string TargetObjectType { get; set; }\n        public long WorkflowInstanceId { get; set; }\n        public Dictionary<string, string> WorkingData{ get; set; }\n    }\n}\n", "meta": {"content_hash": "70b6a20e13c1709b9e2d6de0dc359566", "timestamp": "", "source": "github", "line_count": 18, "max_line_length": 69, "avg_line_length": 28.944444444444443, "alnum_prop": 0.7236084452975048, "repo_name": "jhandel/PocketBoss", "id": "6e377949606638fdd95989310fc32997ff23d666", "size": "523", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "PocketBoss.Messages/Commands/Responses/GetWorkflowInstanceWorkingDataResponse.cs", "mode": "33188", "license": "mit", "language": [{"name": "C#", "bytes": "124514"}]}}
{"text": "\n.oo-ui-icon-arrowNext {\n  background-image: url('themes/wikimediaui/images/icons/arrowNext-rtl.png');\n  background-image: linear-gradient(transparent, transparent), /* @embed */ url('themes/wikimediaui/images/icons/arrowNext-rtl.svg');\n}\n.oo-ui-icon-arrowPrevious {\n  background-image: url('themes/wikimediaui/images/icons/arrowPrevious-rtl.png');\n  background-image: linear-gradient(transparent, transparent), /* @embed */ url('themes/wikimediaui/images/icons/arrowPrevious-rtl.svg');\n}\n.oo-ui-icon-collapse {\n  background-image: url('themes/wikimediaui/images/icons/collapse.png');\n  background-image: linear-gradient(transparent, transparent), /* @embed */ url('themes/wikimediaui/images/icons/collapse.svg');\n}\n.oo-ui-icon-downTriangle {\n  background-image: url('themes/wikimediaui/images/icons/downTriangle.png');\n  background-image: linear-gradient(transparent, transparent), /* @embed */ url('themes/wikimediaui/images/icons/downTriangle.svg');\n}\n.oo-ui-icon-draggable {\n  background-image: url('themes/wikimediaui/images/icons/draggable.png');\n  background-image: linear-gradient(transparent, transparent), /* @embed */ url('themes/wikimediaui/images/icons/draggable.svg');\n}\n.oo-ui-icon-expand {\n  background-image: url('themes/wikimediaui/images/icons/expand.png');\n  background-image: linear-gradient(transparent, transparent), /* @embed */ url('themes/wikimediaui/images/icons/expand.svg');\n}\n.oo-ui-icon-move {\n  background-image: url('themes/wikimediaui/images/icons/move.png');\n  background-image: linear-gradient(transparent, transparent), /* @embed */ url('themes/wikimediaui/images/icons/move.svg');\n}\n.oo-ui-icon-next {\n  background-image: url('themes/wikimediaui/images/icons/next-rtl.png');\n  background-image: linear-gradient(transparent, transparent), /* @embed */ url('themes/wikimediaui/images/icons/next-rtl.svg');\n}\n.oo-ui-icon-previous {\n  background-image: url('themes/wikimediaui/images/icons/previous-rtl.png');\n  background-image: linear-gradient(transparent, transparent), /* @embed */ url('themes/wikimediaui/images/icons/previous-rtl.svg');\n}\n.oo-ui-icon-last {\n  background-image: url('themes/wikimediaui/images/icons/moveLast-rtl.png');\n  background-image: linear-gradient(transparent, transparent), /* @embed */ url('themes/wikimediaui/images/icons/moveLast-rtl.svg');\n}\n.oo-ui-icon-first {\n  background-image: url('themes/wikimediaui/images/icons/moveFirst-rtl.png');\n  background-image: linear-gradient(transparent, transparent), /* @embed */ url('themes/wikimediaui/images/icons/moveFirst-rtl.svg');\n}\n.oo-ui-icon-upTriangle {\n  background-image: url('themes/wikimediaui/images/icons/upTriangle.png');\n  background-image: linear-gradient(transparent, transparent), /* @embed */ url('themes/wikimediaui/images/icons/upTriangle.svg');\n}\n", "meta": {"content_hash": "811790cd26a3f3368682cde50b35124e", "timestamp": "", "source": "github", "line_count": 49, "max_line_length": 137, "avg_line_length": 56.673469387755105, "alnum_prop": 0.7533309326611451, "repo_name": "cdnjs/cdnjs", "id": "1d8d1c0b261885d017e7919777da84f00c07bab5", "size": "2999", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "ajax/libs/oojs-ui/0.36.1/oojs-ui-apex-icons-movement.rtl.css", "mode": "33188", "license": "mit", "language": []}}
{"text": "package com.percolate.sdk.dto;\n\nimport com.fasterxml.jackson.annotation.*;\nimport com.percolate.sdk.interfaces.HasExtraFields;\nimport org.apache.commons.lang3.builder.ToStringBuilder;\nimport org.apache.commons.lang3.builder.ToStringStyle;\n\nimport java.io.Serializable;\nimport java.util.HashMap;\nimport java.util.Map;\n\n@SuppressWarnings(\"UnusedDeclaration\")\n@JsonIgnoreProperties(ignoreUnknown = true)\n@JsonInclude(JsonInclude.Include.NON_NULL)\npublic class Owner implements Serializable, HasExtraFields {\n\n    private static final long serialVersionUID = 5308338463018649712L;\n\n    @JsonProperty(\"type\")\n    protected String type;\n\n    @JsonProperty(\"id\")\n    protected String id;\n\n    @JsonProperty(\"license\")\n    protected LicenseV3 license;\n\n    @JsonIgnore\n    protected Map<String, Object> extraFields = new HashMap<>();\n\n    @Override\n    public String toString() {\n        return ToStringBuilder.reflectionToString(this, ToStringStyle.SHORT_PREFIX_STYLE);\n    }\n\n    public String getType() {\n        return type;\n    }\n\n    public void setType(String type) {\n        this.type = type;\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public void setId(String id) {\n        this.id = id;\n    }\n\n    public LicenseV3 getLicense() {\n        return license;\n    }\n\n    public void setLicense(LicenseV3 license) {\n        this.license = license;\n    }\n\n    @Override\n    public Map<String, Object> getExtraFields() {\n        if(extraFields == null) {\n            extraFields = new HashMap<>();\n        }\n        return extraFields;\n    }\n\n    @Override\n    @JsonAnySetter\n    public void putExtraField(String key, Object value) {\n        getExtraFields().put(key, value);\n    }\n}\n", "meta": {"content_hash": "c5b571c5af3383f9475b6a8c8ab97a8d", "timestamp": "", "source": "github", "line_count": 73, "max_line_length": 90, "avg_line_length": 23.273972602739725, "alnum_prop": 0.6751030017657446, "repo_name": "percolate/percolate-java-sdk", "id": "f10a7aab00d2af7bb0192c9efeb09195997d7a82", "size": "1699", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "core/src/main/java/com/percolate/sdk/dto/Owner.java", "mode": "33188", "license": "bsd-3-clause", "language": [{"name": "Java", "bytes": "1517508"}, {"name": "Kotlin", "bytes": "73015"}]}}
{"text": "\n\n#include \"llvm/ADT/DenseMap.h\"\n#include \"llvm/ADT/SmallVector.h\"\n#include \"mlir/IR/BuiltinTypes.h\"  // from @llvm-project\n#include \"mlir/IR/Operation.h\"  // from @llvm-project\n#include \"mlir/IR/Value.h\"  // from @llvm-project\n#include \"mlir/Transforms/Passes.h\"  // from @llvm-project\n#include \"tensorflow/compiler/mlir/tensorflow/ir/tf_ops.h\"\n#include \"tensorflow/compiler/mlir/tensorflow/ir/tf_types.h\"\n\nnamespace tensorflow {\nnamespace {\n\n// This pass rewrites tf._TPUCompileMlirOp and tf.TPUExecuteOp into a single\n// tf.TPUCompileMlirAndExecuteOp. Also it removes the unnecessary\n// TPUCompileSucceededAssertOp.\nclass FuseTpuCompileAndExecutePass\n    : public mlir::PassWrapper<FuseTpuCompileAndExecutePass,\n                               mlir::OperationPass<mlir::FuncOp>> {\n public:\n  llvm::StringRef getArgument() const final {\n    return \"tfrt-fuse-tpu-compile-and-execute-ops\";\n  }\n  llvm::StringRef getDescription() const final {\n    return \"Fuse TPU Ops according to TFRT's requirements.\";\n  }\n\n  void runOnOperation() override {\n    auto func = getOperation();\n\n    // remove TPUCompileSucceededAssertOp\n    func.walk([&](mlir::Operation *op) {\n      if (llvm::isa<mlir::TF::TPUCompileSucceededAssertOp>(op)) {\n        op->erase();\n      }\n    });\n\n    // A map from an exec op to a struct containing the static shape tensor from\n    // a SetDynamicDimensionBoundsOp and the operand index.\n    llvm::SmallDenseMap<\n        mlir::TF::TPUExecuteOp,\n        llvm::SmallDenseMap<int, mlir::TF::SetStaticDimensionBoundsOp>>\n        exec_to_static_shaped_operands_map;\n\n    llvm::SmallVector<mlir::TF::TPUExecuteOp, 4> tpu_execute_ops;\n    func.walk([&](mlir::Operation *op) {\n      if (auto exec_op = llvm::dyn_cast<mlir::TF::TPUExecuteOp>(op)) {\n        tpu_execute_ops.push_back(exec_op);\n        // Collect any operands to this tf.Execute op that are defined by a\n        // SetStaticDimensionBoundsOp along with the operand index.\n        for (const auto &operand : llvm::enumerate(exec_op.getOperands())) {\n          if (auto defining_op =\n                  operand.value()\n                      .getDefiningOp<mlir::TF::SetStaticDimensionBoundsOp>()) {\n            exec_to_static_shaped_operands_map[exec_op][operand.index()] =\n                defining_op;\n          }\n        }\n      }\n    });\n\n    mlir::OpBuilder builder(&func.body());\n\n    for (auto exec_op : tpu_execute_ops) {\n      auto compile_cache_entry = exec_op.key();\n      auto compile_op = ::llvm::dyn_cast<mlir::TF::_TPUCompileMlirOp>(\n          compile_cache_entry.getDefiningOp());\n      if (!compile_op) {\n        exec_op.emitOpError(\"could not get the _TPUCompileMlirOp\");\n        signalPassFailure();\n        return;\n      }\n\n      builder.setInsertionPointAfter(compile_op);\n      llvm::SmallVector<mlir::Type, 4> output_types;\n      output_types.push_back(mlir::RankedTensorType::get(\n          {3}, builder.getType<mlir::TF::StringType>()));\n      output_types.insert(output_types.end(), exec_op.getResultTypes().begin(),\n                          exec_op.getResultTypes().end());\n      llvm::SmallVector<int> static_shaped_operand_indices_attr;\n      llvm::SmallVector<mlir::Value> static_shape_tensors;\n      llvm::SmallVector<mlir::Value> exec_op_args;\n      exec_op_args.resize(exec_op.args().size());\n\n      auto &static_shaped_operands =\n          exec_to_static_shaped_operands_map[exec_op];\n      for (int i = 0; i < exec_op.args().size(); ++i) {\n        auto iter = static_shaped_operands.find(i);\n        if (iter != static_shaped_operands.end()) {\n          static_shaped_operand_indices_attr.push_back(iter->first);\n          static_shape_tensors.push_back(iter->second.static_shape());\n          exec_op_args[i] = iter->second.input();\n          // The first operand is the input tensor, while the second operand is\n          // the static shape tensor, hence the drop_back here.\n          iter->second->replaceAllUsesWith(\n              mlir::ValueRange({iter->second.input()}));\n          iter->second->erase();\n        } else {\n          exec_op_args[i] = exec_op->getOperand(i);\n        }\n      }\n\n      auto producer_name =\n          exec_op->getAttrOfType<mlir::StringAttr>(\"_producer_name\");\n      if (!producer_name)\n        producer_name = mlir::StringAttr::get(&getContext(), \"default\");\n      auto compile_and_execute_op =\n          builder.create<mlir::TF::TPUCompileMlirAndExecuteOp>(\n              exec_op.getLoc(), output_types, exec_op_args,\n              static_shape_tensors,\n              builder.getI32ArrayAttr(static_shaped_operand_indices_attr),\n              compile_op.mlir_module(), compile_op.metadata(), producer_name);\n\n      exec_op.replaceAllUsesWith(compile_and_execute_op.results());\n      for (auto program_result : compile_op.program()) {\n        program_result.replaceAllUsesWith(\n            compile_and_execute_op.rendezvous_key_base());\n      }\n\n      assert(exec_op.use_empty());\n      exec_op.erase();\n      assert(compile_op.use_empty());\n      compile_op.erase();\n    }\n  }\n};\n\n}  // namespace\n\nnamespace tfrt_compiler {\n\nstd::unique_ptr<mlir::OperationPass<mlir::FuncOp>>\nCreateFuseTpuCompileAndExecutePass() {\n  return std::make_unique<FuseTpuCompileAndExecutePass>();\n}\n\nstatic mlir::PassRegistration<FuseTpuCompileAndExecutePass>\n    fuse_tpu_compile_and_execute_ops_pass;\n\n}  // namespace tfrt_compiler\n\n}  // namespace tensorflow\n", "meta": {"content_hash": "7a2c9481274443c4b02fb8755d70ee05", "timestamp": "", "source": "github", "line_count": 143, "max_line_length": 80, "avg_line_length": 37.63636363636363, "alnum_prop": 0.6417688591601635, "repo_name": "Intel-Corporation/tensorflow", "id": "0f62b27d3c5f36351b346ea93b441fb91e3e4896", "size": "6050", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "tensorflow/compiler/mlir/tfrt/transforms/fuse_tpu_compile_and_execute_ops.cc", "mode": "33188", "license": "apache-2.0", "language": [{"name": "Batchfile", "bytes": "7481"}, {"name": "C", "bytes": "183416"}, {"name": "C++", "bytes": "24549804"}, {"name": "CMake", "bytes": "160888"}, {"name": "Go", "bytes": "849081"}, {"name": "HTML", "bytes": "681293"}, {"name": "Java", "bytes": "307123"}, {"name": "Jupyter Notebook", "bytes": "1833659"}, {"name": "LLVM", "bytes": "6536"}, {"name": "Makefile", "bytes": "37393"}, {"name": "Objective-C", "bytes": "7037"}, {"name": "Objective-C++", "bytes": "64142"}, {"name": "Protocol Buffer", "bytes": "218430"}, {"name": "Python", "bytes": "21875003"}, {"name": "Shell", "bytes": "337846"}, {"name": "TypeScript", "bytes": "849555"}]}}
{"text": "<?php\n\n\nnamespace Tadcka\\AddressBundle\\Entity;\n\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Doctrine\\ORM\\Mapping as ORM;\n\n/**\n * Countries\n *\n * @ORM\\Table(name=\"countries\", indexes={\n *      @ORM\\Index(name=\"iso\", columns={\"iso\"}),\n * })\n * @ORM\\Entity(repositoryClass=\"Tadcka\\AddressBundle\\EntityRepository\\CountryRepository\")\n */\nclass Country\n{\n    /**\n     * @var integer\n     *\n     * @ORM\\Column(name=\"id\", type=\"integer\", nullable=false)\n     * @ORM\\Id\n     * @ORM\\GeneratedValue(strategy=\"IDENTITY\")\n     */\n    private $id;\n\n    /**\n     * @var string\n     *\n     * @ORM\\Column(name=\"iso\", type=\"string\", length=2, nullable=false)\n     */\n    private $iso;\n\n    /**\n     * @var string\n     *\n     * @ORM\\Column(name=\"iso3\", type=\"string\", length=3, nullable=false)\n     */\n    private $iso3;\n\n    /**\n     * @var Continent\n     *\n     * @ORM\\ManyToOne(targetEntity=\"Continent\", inversedBy=\"countries\")\n     * @ORM\\JoinColumns({\n     *   @ORM\\JoinColumn(name=\"continent_id\", referencedColumnName=\"id\", nullable=true)\n     * })\n     */\n    private $continent;\n\n    /**\n     * @var string\n     *\n     * @ORM\\Column(name=\"phone_code\", type=\"string\", length=10, nullable=true)\n     */\n    private $phoneCode;\n\n    /**\n     * @var CountryTranslation[] $translations\n     *\n     * @ORM\\OneToMany(targetEntity=\"CountryTranslation\", mappedBy=\"entity\", cascade={\"persist\", \"remove\"})\n     */\n    private $translations;\n\n    /**\n     * Constructor\n     */\n    public function __construct()\n    {\n        $this->translations = new \\Doctrine\\Common\\Collections\\ArrayCollection();\n    }\n\n    /**\n     * Get id\n     *\n     * @return integer \n     */\n    public function getId()\n    {\n        return $this->id;\n    }\n\n    /**\n     * Set iso\n     *\n     * @param string $iso\n     * @return Countries\n     */\n    public function setIso($iso)\n    {\n        $this->iso = $iso;\n    \n        return $this;\n    }\n\n    /**\n     * Get iso\n     *\n     * @return string \n     */\n    public function getIso()\n    {\n        return $this->iso;\n    }\n\n    /**\n     * Set iso3\n     *\n     * @param string $iso3\n     * @return Countries\n     */\n    public function setIso3($iso3)\n    {\n        $this->iso3 = $iso3;\n    \n        return $this;\n    }\n\n    /**\n     * Get iso3\n     *\n     * @return string \n     */\n    public function getIso3()\n    {\n        return $this->iso3;\n    }\n\n    /**\n     * Set phoneCode\n     *\n     * @param string $phoneCode\n     * @return Countries\n     */\n    public function setPhoneCode($phoneCode)\n    {\n        $this->phoneCode = $phoneCode;\n    \n        return $this;\n    }\n\n    /**\n     * Get phoneCode\n     *\n     * @return string \n     */\n    public function getPhoneCode()\n    {\n        return $this->phoneCode;\n    }\n\n    /**\n     * Set continent\n     *\n     * @param \\Tadcka\\AddressBundle\\Entity\\Continent $continent\n     * @return Countries\n     */\n    public function setContinent($continent)\n    {\n        $this->continent = $continent;\n\n        return $this;\n    }\n\n    /**\n     * Get continent\n     *\n     * @return \\Tadcka\\AddressBundle\\Entity\\Continent\n     */\n    public function getContinent()\n    {\n        return $this->continent;\n    }\n\n    /**\n     * Add translations\n     *\n     * @param \\Tadcka\\AddressBundle\\Entity\\CountryTranslation $translations\n     * @return Country\n     */\n    public function addTranslation(\\Tadcka\\AddressBundle\\Entity\\CountryTranslation $translations)\n    {\n        $this->translations[] = $translations;\n    \n        return $this;\n    }\n\n    /**\n     * Remove translations\n     *\n     * @param \\Tadcka\\AddressBundle\\Entity\\CountryTranslation $translations\n     */\n    public function removeTranslation(\\Tadcka\\AddressBundle\\Entity\\CountryTranslation $translations)\n    {\n        $this->translations->removeElement($translations);\n    }\n\n    /**\n     * Get translations\n     *\n     * @return \\Doctrine\\Common\\Collections\\Collection \n     */\n    public function getTranslations()\n    {\n        return $this->translations;\n    }\n\n    /**\n     * Get translation | default locale en\n     *\n     * @param string $locale\n     * @return CountryTranslation|null\n     */\n    public function getTranslation($locale = 'en')\n    {\n        $defaultLocale = 'en';\n        $trans = null;\n\n        foreach ($this->getTranslations() as $translation) {\n            if ($translation->getLang() === $locale) {\n                $trans = $translation;\n                break;\n            }\n        }\n\n        if ($trans === null) {\n            foreach ($this->getTranslations() as $translation) {\n                if ($translation->getLang() === $defaultLocale) {\n                    $trans = $translation;\n                    break;\n                }\n            }\n        }\n\n        return $trans;\n    }\n}\n", "meta": {"content_hash": "a0908eb2c3e8931e96b7d96f38d8316b", "timestamp": "", "source": "github", "line_count": 238, "max_line_length": 106, "avg_line_length": 19.949579831932773, "alnum_prop": 0.5332771693344566, "repo_name": "tadcka/AddressBundle", "id": "e53b739bdf464134569e4a229b43fd932606427c", "size": "5915", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "Entity/Country.php", "mode": "33188", "license": "mit", "language": [{"name": "CSS", "bytes": "2571"}, {"name": "JavaScript", "bytes": "9647"}, {"name": "PHP", "bytes": "92893"}]}}
{"text": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/xhtml;charset=UTF-8\"/>\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=9\"/>\n<meta name=\"generator\" content=\"Doxygen 1.8.9.1\"/>\n<title>MNE-CPP: D:/Users/Christoph/GitHub/mne-cpp/applications/mne_x/plugins/neuromag/FormFiles/neuromagsetupwidget.h File Reference</title>\n<link href=\"tabs.css\" rel=\"stylesheet\" type=\"text/css\"/>\n<script type=\"text/javascript\" src=\"jquery.js\"></script>\n<script type=\"text/javascript\" src=\"dynsections.js\"></script>\n<link href=\"search/search.css\" rel=\"stylesheet\" type=\"text/css\"/>\n<script type=\"text/javascript\" src=\"search/searchdata.js\"></script>\n<script type=\"text/javascript\" src=\"search/search.js\"></script>\n<script type=\"text/javascript\">\n  $(document).ready(function() { init_search(); });\n</script>\n<link href=\"doxygen.css\" rel=\"stylesheet\" type=\"text/css\" />\n</head>\n<body>\n<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n<div id=\"titlearea\">\n<table cellspacing=\"0\" cellpadding=\"0\">\n <tbody>\n <tr style=\"height: 56px;\">\n  <td style=\"padding-left: 0.5em;\">\n   <div id=\"projectname\">MNE-CPP\n   &#160;<span id=\"projectnumber\">beta 1.0</span>\n   </div>\n  </td>\n </tr>\n </tbody>\n</table>\n</div>\n<!-- end header part -->\n<!-- Generated by Doxygen 1.8.9.1 -->\n<script type=\"text/javascript\">\nvar searchBox = new SearchBox(\"searchBox\", \"search\",false,'Search');\n</script>\n  <div id=\"navrow1\" class=\"tabs\">\n    <ul class=\"tablist\">\n      <li><a href=\"index.html\"><span>Main&#160;Page</span></a></li>\n      <li><a href=\"pages.html\"><span>Related&#160;Pages</span></a></li>\n      <li><a href=\"modules.html\"><span>Modules</span></a></li>\n      <li><a href=\"annotated.html\"><span>Classes</span></a></li>\n      <li class=\"current\"><a href=\"files.html\"><span>Files</span></a></li>\n      <li>\n        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n        <span class=\"left\">\n          <img id=\"MSearchSelect\" src=\"search/mag_sel.png\"\n               onmouseover=\"return searchBox.OnSearchSelectShow()\"\n               onmouseout=\"return searchBox.OnSearchSelectHide()\"\n               alt=\"\"/>\n          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\"\n               onfocus=\"searchBox.OnSearchFieldFocus(true)\" \n               onblur=\"searchBox.OnSearchFieldFocus(false)\" \n               onkeyup=\"searchBox.OnSearchFieldChange(event)\"/>\n          </span><span class=\"right\">\n            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"search/close.png\" alt=\"\"/></a>\n          </span>\n        </div>\n      </li>\n    </ul>\n  </div>\n  <div id=\"navrow2\" class=\"tabs2\">\n    <ul class=\"tablist\">\n      <li><a href=\"files.html\"><span>File&#160;List</span></a></li>\n      <li><a href=\"globals.html\"><span>File&#160;Members</span></a></li>\n    </ul>\n  </div>\n<!-- window showing the filter options -->\n<div id=\"MSearchSelectWindow\"\n     onmouseover=\"return searchBox.OnSearchSelectShow()\"\n     onmouseout=\"return searchBox.OnSearchSelectHide()\"\n     onkeydown=\"return searchBox.OnSearchSelectKey(event)\">\n</div>\n\n<!-- iframe showing the search results (closed by default) -->\n<div id=\"MSearchResultsWindow\">\n<iframe src=\"javascript:void(0)\" frameborder=\"0\" \n        name=\"MSearchResults\" id=\"MSearchResults\">\n</iframe>\n</div>\n\n<div id=\"nav-path\" class=\"navpath\">\n  <ul>\n<li class=\"navelem\"><a class=\"el\" href=\"dir_a6e4fee11f07c3b70486e88fe92cbbdc.html\">applications</a></li><li class=\"navelem\"><a class=\"el\" href=\"dir_362befb8814e314b111c15c41bbf89c8.html\">mne_x</a></li><li class=\"navelem\"><a class=\"el\" href=\"dir_d89ede2d7d689617264fddf77707cd4c.html\">plugins</a></li><li class=\"navelem\"><a class=\"el\" href=\"dir_9ae0bd158324223ac8478c5f71070bb4.html\">neuromag</a></li><li class=\"navelem\"><a class=\"el\" href=\"dir_0d850c897b737f6d1cd58eecf0e69b56.html\">FormFiles</a></li>  </ul>\n</div>\n</div><!-- top -->\n<div class=\"header\">\n  <div class=\"summary\">\n<a href=\"#nested-classes\">Classes</a>  </div>\n  <div class=\"headertitle\">\n<div class=\"title\">neuromagsetupwidget.h File Reference</div>  </div>\n</div><!--header-->\n<div class=\"contents\">\n\n<p>Contains the declaration of the NeuromagSetupWidget class.  \n<a href=\"#details\">More...</a></p>\n<div class=\"textblock\"><code>#include &quot;../ui_neuromagsetup.h&quot;</code><br />\n<code>#include &lt;QWidget&gt;</code><br />\n</div>\n<p><a href=\"neuromagsetupwidget_8h_source.html\">Go to the source code of this file.</a></p>\n<table class=\"memberdecls\">\n<tr class=\"heading\"><td colspan=\"2\"><h2 class=\"groupheader\"><a name=\"nested-classes\"></a>\nClasses</h2></td></tr>\n<tr class=\"memitem:\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">class &#160;</td><td class=\"memItemRight\" valign=\"bottom\"><a class=\"el\" href=\"class_mne_rt_client_plugin_1_1_neuromag_setup_widget.html\">MneRtClientPlugin::NeuromagSetupWidget</a></td></tr>\n<tr class=\"memdesc:\"><td class=\"mdescLeft\">&#160;</td><td class=\"mdescRight\">The <a class=\"el\" href=\"class_mne_rt_client_plugin_1_1_neuromag_setup_widget.html\" title=\"The NeuromagSetupWidget class provides the ECG configuration window. \">NeuromagSetupWidget</a> class provides the ECG configuration window.  <a href=\"class_mne_rt_client_plugin_1_1_neuromag_setup_widget.html#details\">More...</a><br /></td></tr>\n<tr class=\"separator:\"><td class=\"memSeparator\" colspan=\"2\">&#160;</td></tr>\n</table>\n<a name=\"details\" id=\"details\"></a><h2 class=\"groupheader\">Detailed Description</h2>\n<div class=\"textblock\"><p>Contains the declaration of the NeuromagSetupWidget class. </p>\n<dl class=\"section author\"><dt>Author</dt><dd>Christoph Dinh <a href=\"#\" onclick=\"location.href='mai'+'lto:'+'chd'+'in'+'h@n'+'mr'+'.mg'+'h.'+'har'+'va'+'rd.'+'ed'+'u'; return false;\">chdin<span style=\"display: none;\">.nosp@m.</span>h@nm<span style=\"display: none;\">.nosp@m.</span>r.mgh<span style=\"display: none;\">.nosp@m.</span>.har<span style=\"display: none;\">.nosp@m.</span>vard.<span style=\"display: none;\">.nosp@m.</span>edu</a>; Matti Hamalainen <a href=\"#\" onclick=\"location.href='mai'+'lto:'+'msh'+'@n'+'mr.'+'mg'+'h.h'+'ar'+'var'+'d.'+'edu'; return false;\">msh@n<span style=\"display: none;\">.nosp@m.</span>mr.m<span style=\"display: none;\">.nosp@m.</span>gh.ha<span style=\"display: none;\">.nosp@m.</span>rvar<span style=\"display: none;\">.nosp@m.</span>d.edu</a> </dd></dl>\n<dl class=\"section version\"><dt>Version</dt><dd>1.0 </dd></dl>\n<dl class=\"section date\"><dt>Date</dt><dd>February, 2013</dd></dl>\n<h1><a class=\"anchor\" id=\"LICENSE\"></a>\nLICENSE</h1>\n<p>Copyright (C) 2013, Christoph Dinh and Matti Hamalainen. All rights reserved.</p>\n<p>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:</p><ul>\n<li>Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.</li>\n<li>Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.</li>\n<li>Neither the name of MNE-CPP authors nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.</li>\n</ul>\n<p>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. </p>\n\n<p>Definition in file <a class=\"el\" href=\"neuromagsetupwidget_8h_source.html\">neuromagsetupwidget.h</a>.</p>\n</div></div><!-- contents -->\n<!-- start footer part -->\n<hr class=\"footer\"/><address class=\"footer\"><small>\nGenerated on Fri Mar 27 2015 22:54:34 for MNE-CPP by &#160;<a href=\"http://www.doxygen.org/index.html\">\n<img class=\"footer\" src=\"doxygen.png\" alt=\"doxygen\"/>\n</a> 1.8.9.1\n</small></address>\n</body>\n</html>\n", "meta": {"content_hash": "73673b6ded2dae93f1166285f6f4239a", "timestamp": "", "source": "github", "line_count": 134, "max_line_length": 781, "avg_line_length": 64.2910447761194, "alnum_prop": 0.6901915264074289, "repo_name": "CBoensel/mne-cpp", "id": "e80113d3d8617c8d8709e5699ebf39790f566de1", "size": "8615", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "doc/html/neuromagsetupwidget_8h.html", "mode": "33188", "license": "bsd-3-clause", "language": [{"name": "C", "bytes": "533427"}, {"name": "C++", "bytes": "11295418"}, {"name": "Prolog", "bytes": "27894"}, {"name": "QMake", "bytes": "322871"}]}}
{"text": "<?php \nnamespace Icaav\\Catalogs\\Forms;\n\n use Zend\\Form\\Form;\n use Zend\\InputFilter\\InputFilter;\n use Icaav\\Catalogs\\InputFilters\\CorporativoFilter;\n \n class CorporativoForm extends Form {\n\n     public function __construct($name = null) {\n         // we want to ignore the name passed\n         parent::__construct('corporativo');\n\n         $this->setAttribute('method', 'post')\n         ->setInputFilter((new CorporativoFilter())->getInputFilter());\n\n         $this->add(array(\n             'name' => 'id_corporativo',\n             'type' => 'Text',\n         ));\n\n         $this->add(array(\n             'name' => 'nombre_corporativo',\n             'type' => 'Text',\n         ));\n\n         $this->add(array(\n             'name' => 'limite_credito',\n             'type' => 'Number',\n             'attributes' => array(\n                    'step' => 'any',\n             )\n         ));\n\n         $this->add(array(\n             'name' => 'estatus_corporativo',\n             'type' => 'checkbox',\n         ));\n\n     }\n\n }", "meta": {"content_hash": "c99330d8ec4539b304fc70f8a84b3498", "timestamp": "", "source": "github", "line_count": 42, "max_line_length": 71, "avg_line_length": 24.166666666666668, "alnum_prop": 0.4857142857142857, "repo_name": "Juanin88/icaav", "id": "7ee5a26474ba12ea2a106daec93c3268bec2b825", "size": "1015", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "module/Icaav/src/Icaav/Catalogs/Forms/CorporativoForm.php", "mode": "33261", "license": "bsd-3-clause", "language": [{"name": "ApacheConf", "bytes": "711"}, {"name": "CSS", "bytes": "1042"}, {"name": "HTML", "bytes": "12142"}, {"name": "PHP", "bytes": "35387"}]}}
{"text": "\n#include \"path.h\"\n\n#include <assert.h>\n#include <stdlib.h>\n#include <string.h>\n\n#include \"common.h\"\n#include \"compat.h\"\n#include \"log.h\"\n#include \"plugins_types.h\"\n#include \"schema_compile.h\"\n#include \"set.h\"\n#include \"tree.h\"\n#include \"tree_data_internal.h\"\n#include \"tree_edit.h\"\n#include \"tree_schema.h\"\n#include \"tree_schema_internal.h\"\n#include \"xpath.h\"\n\n#define LOGVAL_P(CTX, CUR_NODE, CODE, ...) ly_vlog(CTX, (CUR_NODE) ? LY_VLOG_LYSC : LY_VLOG_NONE, CUR_NODE, CODE, ##__VA_ARGS__)\n\n/**\n * @brief Check predicate syntax.\n *\n * @param[in] ctx libyang context.\n * @param[in] cur_node Current (original context) node.\n * @param[in] exp Parsed predicate.\n * @param[in,out] tok_idx Index in @p exp, is adjusted.\n * @param[in] prefix Prefix option.\n * @param[in] pred Predicate option.\n * @return LY_ERR value.\n */\nstatic LY_ERR\nly_path_check_predicate(const struct ly_ctx *ctx, const struct lysc_node *cur_node, const struct lyxp_expr *exp,\n        uint32_t *tok_idx, uint8_t prefix, uint8_t pred)\n{\n    LY_ERR ret = LY_SUCCESS;\n    struct ly_set *set = NULL;\n    uint32_t i;\n    const char *name;\n    size_t name_len;\n\n    LOG_LOCSET(cur_node, NULL, NULL, NULL);\n\n    if (!lyxp_next_token(NULL, exp, tok_idx, LYXP_TOKEN_BRACK1)) {\n        /* '[' */\n\n        if (((pred == LY_PATH_PRED_SIMPLE) || (pred == LY_PATH_PRED_KEYS)) &&\n                !lyxp_check_token(NULL, exp, *tok_idx, LYXP_TOKEN_NAMETEST)) {\n            ret = ly_set_new(&set);\n            LY_CHECK_GOTO(ret, cleanup);\n\n            do {\n                /* NameTest is always expected here */\n                LY_CHECK_GOTO(lyxp_check_token(ctx, exp, *tok_idx, LYXP_TOKEN_NAMETEST), token_error);\n\n                /* check prefix based on the options */\n                name = strnstr(exp->expr + exp->tok_pos[*tok_idx], \":\", exp->tok_len[*tok_idx]);\n                if ((prefix == LY_PATH_PREFIX_MANDATORY) && !name) {\n                    LOGVAL(ctx, LYVE_XPATH, \"Prefix missing for \\\"%.*s\\\" in path.\", exp->tok_len[*tok_idx],\n                            exp->expr + exp->tok_pos[*tok_idx]);\n                    goto token_error;\n                } else if ((prefix == LY_PATH_PREFIX_STRICT_INHERIT) && name) {\n                    LOGVAL(ctx, LYVE_XPATH, \"Redundant prefix for \\\"%.*s\\\" in path.\", exp->tok_len[*tok_idx],\n                            exp->expr + exp->tok_pos[*tok_idx]);\n                    goto token_error;\n                }\n                if (!name) {\n                    name = exp->expr + exp->tok_pos[*tok_idx];\n                    name_len = exp->tok_len[*tok_idx];\n                } else {\n                    ++name;\n                    name_len = exp->tok_len[*tok_idx] - (name - (exp->expr + exp->tok_pos[*tok_idx]));\n                }\n\n                /* check whether it was not already specified */\n                for (i = 0; i < set->count; ++i) {\n                    /* all the keys must be from the same module so this comparison should be fine */\n                    if (!strncmp(set->objs[i], name, name_len) &&\n                            lysp_check_identifierchar(NULL, ((char *)set->objs[i])[name_len], 0, NULL)) {\n                        LOGVAL(ctx, LYVE_XPATH, \"Duplicate predicate key \\\"%.*s\\\" in path.\", (int)name_len, name);\n                        goto token_error;\n                    }\n                }\n\n                /* add it into the set */\n                ret = ly_set_add(set, (void *)name, 1, NULL);\n                LY_CHECK_GOTO(ret, cleanup);\n\n                /* NameTest */\n                ++(*tok_idx);\n\n                /* '=' */\n                LY_CHECK_GOTO(lyxp_next_token(ctx, exp, tok_idx, LYXP_TOKEN_OPER_EQUAL), token_error);\n\n                /* Literal or Number */\n                LY_CHECK_GOTO(lyxp_next_token2(ctx, exp, tok_idx, LYXP_TOKEN_LITERAL, LYXP_TOKEN_NUMBER), token_error);\n\n                /* ']' */\n                LY_CHECK_GOTO(lyxp_next_token(ctx, exp, tok_idx, LYXP_TOKEN_BRACK2), token_error);\n\n                /* '[' */\n            } while (!lyxp_next_token(NULL, exp, tok_idx, LYXP_TOKEN_BRACK1));\n\n        } else if ((pred == LY_PATH_PRED_SIMPLE) && !lyxp_next_token(NULL, exp, tok_idx, LYXP_TOKEN_DOT)) {\n            /* '.' */\n\n            /* '=' */\n            LY_CHECK_GOTO(lyxp_next_token(ctx, exp, tok_idx, LYXP_TOKEN_OPER_EQUAL), token_error);\n\n            /* Literal or Number */\n            LY_CHECK_GOTO(lyxp_next_token2(ctx, exp, tok_idx, LYXP_TOKEN_LITERAL, LYXP_TOKEN_NUMBER), token_error);\n\n            /* ']' */\n            LY_CHECK_GOTO(lyxp_next_token(ctx, exp, tok_idx, LYXP_TOKEN_BRACK2), token_error);\n\n        } else if ((pred == LY_PATH_PRED_SIMPLE) && !lyxp_next_token(NULL, exp, tok_idx, LYXP_TOKEN_NUMBER)) {\n            /* Number */\n\n            /* check for index 0 */\n            if (!atoi(exp->expr + exp->tok_pos[*tok_idx - 1])) {\n                LOGVAL(ctx, LYVE_XPATH, \"Invalid positional predicate \\\"%.*s\\\".\", (int)exp->tok_len[*tok_idx - 1],\n                        exp->expr + exp->tok_pos[*tok_idx - 1]);\n                goto token_error;\n            }\n\n            /* ']' */\n            LY_CHECK_GOTO(lyxp_next_token(ctx, exp, tok_idx, LYXP_TOKEN_BRACK2), token_error);\n\n        } else if ((pred == LY_PATH_PRED_LEAFREF) && !lyxp_check_token(NULL, exp, *tok_idx, LYXP_TOKEN_NAMETEST)) {\n            assert(prefix == LY_PATH_PREFIX_OPTIONAL);\n            ret = ly_set_new(&set);\n            LY_CHECK_GOTO(ret, cleanup);\n\n            do {\n                /* NameTest is always expected here */\n                LY_CHECK_GOTO(lyxp_check_token(ctx, exp, *tok_idx, LYXP_TOKEN_NAMETEST), token_error);\n\n                name = strnstr(exp->expr + exp->tok_pos[*tok_idx], \":\", exp->tok_len[*tok_idx]);\n                if (!name) {\n                    name = exp->expr + exp->tok_pos[*tok_idx];\n                    name_len = exp->tok_len[*tok_idx];\n                } else {\n                    ++name;\n                    name_len = exp->tok_len[*tok_idx] - (name - (exp->expr + exp->tok_pos[*tok_idx]));\n                }\n\n                /* check whether it was not already specified */\n                for (i = 0; i < set->count; ++i) {\n                    /* all the keys must be from the same module so this comparison should be fine */\n                    if (!strncmp(set->objs[i], name, name_len) &&\n                            lysp_check_identifierchar(NULL, ((char *)set->objs[i])[name_len], 0, NULL)) {\n                        LOGVAL(ctx, LYVE_XPATH, \"Duplicate predicate key \\\"%.*s\\\" in path.\", (int)name_len, name);\n                        goto token_error;\n                    }\n                }\n\n                /* add it into the set */\n                ret = ly_set_add(set, (void *)name, 1, NULL);\n                LY_CHECK_GOTO(ret, cleanup);\n\n                /* NameTest */\n                ++(*tok_idx);\n\n                /* '=' */\n                LY_CHECK_GOTO(lyxp_next_token(ctx, exp, tok_idx, LYXP_TOKEN_OPER_EQUAL), token_error);\n\n                /* FuncName */\n                LY_CHECK_GOTO(lyxp_check_token(ctx, exp, *tok_idx, LYXP_TOKEN_FUNCNAME), token_error);\n                if ((exp->tok_len[*tok_idx] != ly_strlen_const(\"current\")) ||\n                        strncmp(exp->expr + exp->tok_pos[*tok_idx], \"current\", ly_strlen_const(\"current\"))) {\n                    LOGVAL(ctx, LYVE_XPATH, \"Invalid function \\\"%.*s\\\" invocation in path.\",\n                            exp->tok_len[*tok_idx], exp->expr + exp->tok_pos[*tok_idx]);\n                    goto token_error;\n                }\n                ++(*tok_idx);\n\n                /* '(' */\n                LY_CHECK_GOTO(lyxp_next_token(ctx, exp, tok_idx, LYXP_TOKEN_PAR1), token_error);\n\n                /* ')' */\n                LY_CHECK_GOTO(lyxp_next_token(ctx, exp, tok_idx, LYXP_TOKEN_PAR2), token_error);\n\n                /* '/' */\n                LY_CHECK_GOTO(lyxp_next_token(ctx, exp, tok_idx, LYXP_TOKEN_OPER_PATH), token_error);\n\n                /* '..' */\n                LY_CHECK_GOTO(lyxp_next_token(ctx, exp, tok_idx, LYXP_TOKEN_DDOT), token_error);\n                do {\n                    /* '/' */\n                    LY_CHECK_GOTO(lyxp_next_token(ctx, exp, tok_idx, LYXP_TOKEN_OPER_PATH), token_error);\n                } while (!lyxp_next_token(NULL, exp, tok_idx, LYXP_TOKEN_DDOT));\n\n                /* NameTest */\n                LY_CHECK_GOTO(lyxp_next_token(ctx, exp, tok_idx, LYXP_TOKEN_NAMETEST), token_error);\n\n                /* '/' */\n                while (!lyxp_next_token(NULL, exp, tok_idx, LYXP_TOKEN_OPER_PATH)) {\n                    /* NameTest */\n                    LY_CHECK_GOTO(lyxp_next_token(ctx, exp, tok_idx, LYXP_TOKEN_NAMETEST), token_error);\n                }\n\n                /* ']' */\n                LY_CHECK_GOTO(lyxp_next_token(ctx, exp, tok_idx, LYXP_TOKEN_BRACK2), token_error);\n\n                /* '[' */\n            } while (!lyxp_next_token(NULL, exp, tok_idx, LYXP_TOKEN_BRACK1));\n\n        } else if (lyxp_check_token(ctx, exp, *tok_idx, 0)) {\n            /* unexpected EOF */\n            goto token_error;\n        } else {\n            /* invalid token */\n            LOGVAL(ctx, LY_VCODE_XP_INTOK, lyxp_token2str(exp->tokens[*tok_idx]), exp->expr + exp->tok_pos[*tok_idx]);\n            goto token_error;\n        }\n    }\n\ncleanup:\n    LOG_LOCBACK(cur_node ? 1 : 0, 0, 0, 0);\n    ly_set_free(set, NULL);\n    return ret;\n\ntoken_error:\n    LOG_LOCBACK(cur_node ? 1 : 0, 0, 0, 0);\n    ly_set_free(set, NULL);\n    return LY_EVALID;\n}\n\nLY_ERR\nly_path_parse(const struct ly_ctx *ctx, const struct lysc_node *ctx_node, const char *str_path, size_t path_len,\n        ly_bool lref, uint8_t begin, uint8_t prefix, uint8_t pred, struct lyxp_expr **expr)\n{\n    LY_ERR ret = LY_SUCCESS;\n    struct lyxp_expr *exp = NULL;\n    uint32_t tok_idx, cur_len;\n    const char *cur_node, *prev_prefix = NULL, *ptr;\n\n    assert((begin == LY_PATH_BEGIN_ABSOLUTE) || (begin == LY_PATH_BEGIN_EITHER));\n    assert((prefix == LY_PATH_PREFIX_OPTIONAL) || (prefix == LY_PATH_PREFIX_MANDATORY) ||\n            (prefix == LY_PATH_PREFIX_STRICT_INHERIT));\n    assert((pred == LY_PATH_PRED_KEYS) || (pred == LY_PATH_PRED_SIMPLE) || (pred == LY_PATH_PRED_LEAFREF));\n\n    LOG_LOCSET(ctx_node, NULL, NULL, NULL);\n\n    /* parse as a generic XPath expression */\n    LY_CHECK_GOTO(ret = lyxp_expr_parse(ctx, str_path, path_len, 1, &exp), error);\n    tok_idx = 0;\n\n    if (begin == LY_PATH_BEGIN_EITHER) {\n        /* is the path relative? */\n        if (lyxp_next_token(NULL, exp, &tok_idx, LYXP_TOKEN_OPER_PATH)) {\n            /* relative path check specific to leafref */\n            if (lref) {\n                /* mandatory '..' */\n                LY_CHECK_ERR_GOTO(lyxp_next_token(ctx, exp, &tok_idx, LYXP_TOKEN_DDOT), ret = LY_EVALID, error);\n\n                do {\n                    /* '/' */\n                    LY_CHECK_ERR_GOTO(lyxp_next_token(ctx, exp, &tok_idx, LYXP_TOKEN_OPER_PATH), ret = LY_EVALID, error);\n\n                    /* optional '..' */\n                } while (!lyxp_next_token(NULL, exp, &tok_idx, LYXP_TOKEN_DDOT));\n            }\n        }\n    } else {\n        /* '/' */\n        LY_CHECK_ERR_GOTO(lyxp_next_token(ctx, exp, &tok_idx, LYXP_TOKEN_OPER_PATH), ret = LY_EVALID, error);\n    }\n\n    do {\n        /* NameTest */\n        LY_CHECK_ERR_GOTO(lyxp_check_token(ctx, exp, tok_idx, LYXP_TOKEN_NAMETEST), ret = LY_EVALID, error);\n\n        /* check prefix based on the options */\n        cur_node = exp->expr + exp->tok_pos[tok_idx];\n        cur_len = exp->tok_len[tok_idx];\n        if (prefix == LY_PATH_PREFIX_MANDATORY) {\n            if (!strnstr(cur_node, \":\", cur_len)) {\n                LOGVAL(ctx, LYVE_XPATH, \"Prefix missing for \\\"%.*s\\\" in path.\", cur_len, cur_node);\n                ret = LY_EVALID;\n                goto error;\n            }\n        } else if (prefix == LY_PATH_PREFIX_STRICT_INHERIT) {\n            if (!prev_prefix) {\n                /* the first node must have a prefix */\n                if (!strnstr(cur_node, \":\", cur_len)) {\n                    LOGVAL(ctx, LYVE_XPATH, \"Prefix missing for \\\"%.*s\\\" in path.\", cur_len, cur_node);\n                    ret = LY_EVALID;\n                    goto error;\n                }\n\n                /* remember the first prefix */\n                prev_prefix = cur_node;\n            } else {\n                /* the prefix must be different, if any */\n                ptr = strnstr(cur_node, \":\", cur_len);\n                if (ptr) {\n                    if (!strncmp(prev_prefix, cur_node, ptr - cur_node) && (prev_prefix[ptr - cur_node] == ':')) {\n                        LOGVAL(ctx, LYVE_XPATH, \"Duplicate prefix for \\\"%.*s\\\" in path.\", cur_len, cur_node);\n                        ret = LY_EVALID;\n                        goto error;\n                    }\n\n                    /* remember this next prefix */\n                    prev_prefix = cur_node;\n                }\n            }\n        }\n\n        ++tok_idx;\n\n        /* Predicate* */\n        LY_CHECK_GOTO(ret = ly_path_check_predicate(ctx, ctx_node, exp, &tok_idx, prefix, pred), error);\n\n        /* '/' */\n    } while (!lyxp_next_token(NULL, exp, &tok_idx, LYXP_TOKEN_OPER_PATH));\n\n    /* trailing token check */\n    if (exp->used > tok_idx) {\n        LOGVAL(ctx, LYVE_XPATH, \"Unparsed characters \\\"%s\\\" left at the end of path.\", exp->expr + exp->tok_pos[tok_idx]);\n        ret = LY_EVALID;\n        goto error;\n    }\n\n    *expr = exp;\n\n    LOG_LOCBACK(ctx_node ? 1 : 0, 0, 0, 0);\n    return LY_SUCCESS;\n\nerror:\n    lyxp_expr_free(ctx, exp);\n    LOG_LOCBACK(ctx_node ? 1 : 0, 0, 0, 0);\n    return ret;\n}\n\nLY_ERR\nly_path_parse_predicate(const struct ly_ctx *ctx, const struct lysc_node *cur_node, const char *str_path,\n        size_t path_len, uint8_t prefix, uint8_t pred, struct lyxp_expr **expr)\n{\n    LY_ERR ret = LY_SUCCESS;\n    struct lyxp_expr *exp = NULL;\n    uint32_t tok_idx;\n\n    assert((prefix == LY_PATH_PREFIX_OPTIONAL) || (prefix == LY_PATH_PREFIX_MANDATORY));\n    assert((pred == LY_PATH_PRED_KEYS) || (pred == LY_PATH_PRED_SIMPLE) || (pred == LY_PATH_PRED_LEAFREF));\n\n    LOG_LOCSET(cur_node, NULL, NULL, NULL);\n\n    /* parse as a generic XPath expression */\n    LY_CHECK_GOTO(ret = lyxp_expr_parse(ctx, str_path, path_len, 0, &exp), error);\n    tok_idx = 0;\n\n    LY_CHECK_GOTO(ret = ly_path_check_predicate(ctx, cur_node, exp, &tok_idx, prefix, pred), error);\n\n    /* trailing token check */\n    if (exp->used > tok_idx) {\n        LOGVAL(ctx, LYVE_XPATH, \"Unparsed characters \\\"%s\\\" left at the end of predicate.\",\n                exp->expr + exp->tok_pos[tok_idx]);\n        ret = LY_EVALID;\n        goto error;\n    }\n\n    *expr = exp;\n\n    LOG_LOCBACK(cur_node ? 1 : 0, 0, 0, 0);\n    return LY_SUCCESS;\n\nerror:\n    lyxp_expr_free(ctx, exp);\n    LOG_LOCBACK(cur_node ? 1 : 0, 0, 0, 0);\n    return ret;\n}\n\n/**\n * @brief Parse NameTest and get the corresponding schema node.\n *\n * @param[in] ctx libyang context.\n * @param[in] cur_node Optional current (original context) node.\n * @param[in] cur_mod Current module of the path (where the path is \"instantiated\"). Needed for ::LY_VALUE_SCHEMA\n * and ::LY_VALUE_SCHEMA_RESOLVED.\n * @param[in] prev_ctx_node Previous context node.\n * @param[in] expr Parsed path.\n * @param[in] tok_idx Index in @p expr.\n * @param[in] format Format of the path.\n * @param[in] prefix_data Format-specific data for resolving any prefixes (see ::ly_resolve_prefix).\n * @param[in] top_ext Optional top-level extension to use for searching the schema node.\n * @param[in] getnext_opts Options to be used for ::lys_getnext() calls.\n * @param[out] snode Resolved schema node.\n * @param[out] ext Optional extension instance of @p snode, if any.\n * @return LY_ERR value.\n */\nstatic LY_ERR\nly_path_compile_snode(const struct ly_ctx *ctx, const struct lysc_node *cur_node, const struct lys_module *cur_mod,\n        const struct lysc_node *prev_ctx_node, const struct lyxp_expr *expr, uint32_t tok_idx, LY_VALUE_FORMAT format,\n        void *prefix_data, const struct lysc_ext_instance *top_ext, uint32_t getnext_opts, const struct lysc_node **snode,\n        struct lysc_ext_instance **ext)\n{\n    LY_ERR ret;\n    const struct lys_module *mod = NULL;\n    struct lysc_ext_instance *e = NULL;\n    const char *pref, *name;\n    size_t len, name_len;\n\n    assert(expr->tokens[tok_idx] == LYXP_TOKEN_NAMETEST);\n\n    *snode = NULL;\n    if (ext) {\n        *ext = NULL;\n    }\n\n    /* get prefix */\n    if ((pref = strnstr(expr->expr + expr->tok_pos[tok_idx], \":\", expr->tok_len[tok_idx]))) {\n        len = pref - (expr->expr + expr->tok_pos[tok_idx]);\n        pref = expr->expr + expr->tok_pos[tok_idx];\n    } else {\n        len = 0;\n    }\n\n    /* set name */\n    if (pref) {\n        name = pref + len + 1;\n        name_len = expr->tok_len[tok_idx] - len - 1;\n    } else {\n        name = expr->expr + expr->tok_pos[tok_idx];\n        name_len = expr->tok_len[tok_idx];\n    }\n\n    /* find node module */\n    if (pref) {\n        LOG_LOCSET(cur_node, NULL, NULL, NULL);\n\n        mod = ly_resolve_prefix(prev_ctx_node ? prev_ctx_node->module->ctx : ctx, pref, len, format, prefix_data);\n        if ((!mod || !mod->implemented) && prev_ctx_node) {\n            /* check for nested ext data */\n            ret = ly_nested_ext_schema(NULL, prev_ctx_node, pref, len, format, prefix_data, name, name_len, snode, &e);\n            if (!ret) {\n                goto success;\n            } else if (ret != LY_ENOT) {\n                goto error;\n            }\n        }\n\n        if (!mod) {\n            LOGVAL(ctx, LYVE_XPATH, \"No module connected with the prefix \\\"%.*s\\\" found (prefix format %s).\",\n                    (int)len, pref, ly_format2str(format));\n            ret = LY_EVALID;\n            goto error;\n        } else if (!mod->implemented) {\n            LOGVAL(ctx, LYVE_XPATH, \"Not implemented module \\\"%s\\\" in path.\", mod->name);\n            ret = LY_EVALID;\n            goto error;\n        }\n\n        LOG_LOCBACK(cur_node ? 1 : 0, 0, 0, 0);\n    } else {\n        switch (format) {\n        case LY_VALUE_SCHEMA:\n        case LY_VALUE_SCHEMA_RESOLVED:\n            if (!cur_mod) {\n                LOGINT_RET(ctx);\n            }\n            /* use current module */\n            mod = cur_mod;\n            break;\n        case LY_VALUE_JSON:\n        case LY_VALUE_LYB:\n            if (!prev_ctx_node) {\n                LOGINT_RET(ctx);\n            }\n            /* inherit module of the previous node */\n            mod = prev_ctx_node->module;\n            break;\n        case LY_VALUE_CANON:\n        case LY_VALUE_XML:\n        case LY_VALUE_STR_NS:\n            /* not really defined or accepted */\n            LOGINT_RET(ctx);\n        }\n    }\n\n    /* find schema node */\n    if (!prev_ctx_node && top_ext) {\n        *snode = lysc_ext_find_node(top_ext, mod, name, name_len, 0, getnext_opts);\n    } else {\n        *snode = lys_find_child(prev_ctx_node, mod, name, name_len, 0, getnext_opts);\n        if (!(*snode) && prev_ctx_node) {\n            ret = ly_nested_ext_schema(NULL, prev_ctx_node, pref, len, format, prefix_data, name, name_len, snode, &e);\n            LY_CHECK_RET(ret && (ret != LY_ENOT), ret);\n        }\n    }\n    if (!(*snode)) {\n        LOGVAL(ctx, LYVE_XPATH, \"Not found node \\\"%.*s\\\" in path.\", (int)name_len, name);\n        return LY_ENOTFOUND;\n    }\n\nsuccess:\n    if (ext) {\n        *ext = e;\n    }\n    return LY_SUCCESS;\n\nerror:\n    LOG_LOCBACK(cur_node ? 1 : 0, 0, 0, 0);\n    return ret;\n}\n\nLY_ERR\nly_path_compile_predicate(const struct ly_ctx *ctx, const struct lysc_node *cur_node, const struct lys_module *cur_mod,\n        const struct lysc_node *ctx_node, const struct lyxp_expr *expr, uint32_t *tok_idx, LY_VALUE_FORMAT format,\n        void *prefix_data, struct ly_path_predicate **predicates, enum ly_path_pred_type *pred_type)\n{\n    LY_ERR ret = LY_SUCCESS;\n    struct ly_path_predicate *p;\n    const struct lysc_node *key;\n    const char *val;\n    size_t val_len, key_count;\n\n    assert(ctx && ctx_node);\n\n    LOG_LOCSET(cur_node, NULL, NULL, NULL);\n\n    *pred_type = 0;\n\n    if (lyxp_next_token(NULL, expr, tok_idx, LYXP_TOKEN_BRACK1)) {\n        /* '[', no predicate */\n        goto cleanup; /* LY_SUCCESS */\n    }\n\n    if (expr->tokens[*tok_idx] == LYXP_TOKEN_NAMETEST) {\n        if (ctx_node->nodetype != LYS_LIST) {\n            LOGVAL(ctx, LYVE_XPATH, \"List predicate defined for %s \\\"%s\\\" in path.\",\n                    lys_nodetype2str(ctx_node->nodetype), ctx_node->name);\n            ret = LY_EVALID;\n            goto cleanup;\n        } else if (ctx_node->flags & LYS_KEYLESS) {\n            LOGVAL(ctx, LYVE_XPATH, \"List predicate defined for keyless %s \\\"%s\\\" in path.\",\n                    lys_nodetype2str(ctx_node->nodetype), ctx_node->name);\n            ret = LY_EVALID;\n            goto cleanup;\n        }\n\n        do {\n            /* NameTest, find the key */\n            LY_CHECK_RET(ly_path_compile_snode(ctx, cur_node, cur_mod, ctx_node, expr, *tok_idx, format, prefix_data,\n                    NULL, 0, &key, NULL));\n            if ((key->nodetype != LYS_LEAF) || !(key->flags & LYS_KEY)) {\n                LOGVAL(ctx, LYVE_XPATH, \"Key expected instead of %s \\\"%s\\\" in path.\", lys_nodetype2str(key->nodetype),\n                        key->name);\n                ret = LY_EVALID;\n                goto cleanup;\n            }\n            ++(*tok_idx);\n\n            if (!*pred_type) {\n                /* new predicate */\n                *pred_type = LY_PATH_PREDTYPE_LIST;\n            }\n            assert(*pred_type == LY_PATH_PREDTYPE_LIST);\n            LY_ARRAY_NEW_GOTO(ctx, *predicates, p, ret, cleanup);\n            p->key = key;\n\n            /* '=' */\n            assert(expr->tokens[*tok_idx] == LYXP_TOKEN_OPER_EQUAL);\n            ++(*tok_idx);\n\n            /* Literal or Number */\n            assert((expr->tokens[*tok_idx] == LYXP_TOKEN_LITERAL) || (expr->tokens[*tok_idx] == LYXP_TOKEN_NUMBER));\n            if (expr->tokens[*tok_idx] == LYXP_TOKEN_LITERAL) {\n                /* skip quotes */\n                val = expr->expr + expr->tok_pos[*tok_idx] + 1;\n                val_len = expr->tok_len[*tok_idx] - 2;\n            } else {\n                val = expr->expr + expr->tok_pos[*tok_idx];\n                val_len = expr->tok_len[*tok_idx];\n            }\n\n            /* store the value */\n            LOG_LOCSET(key, NULL, NULL, NULL);\n            ret = lyd_value_store(ctx, &p->value, ((struct lysc_node_leaf *)key)->type, val, val_len, NULL, format,\n                    prefix_data, LYD_HINT_DATA, key, NULL);\n            LOG_LOCBACK(key ? 1 : 0, 0, 0, 0);\n            LY_CHECK_ERR_GOTO(ret, p->value.realtype = NULL, cleanup);\n            ++(*tok_idx);\n\n            /* \"allocate\" the type to avoid problems when freeing the value after the type was freed */\n            LY_ATOMIC_INC_BARRIER(((struct lysc_type *)p->value.realtype)->refcount);\n\n            /* ']' */\n            assert(expr->tokens[*tok_idx] == LYXP_TOKEN_BRACK2);\n            ++(*tok_idx);\n\n            /* another predicate follows? */\n        } while (!lyxp_next_token(NULL, expr, tok_idx, LYXP_TOKEN_BRACK1));\n\n        /* check that all keys were set */\n        key_count = 0;\n        for (key = lysc_node_child(ctx_node); key && (key->flags & LYS_KEY); key = key->next) {\n            ++key_count;\n        }\n        if (LY_ARRAY_COUNT(*predicates) != key_count) {\n            /* names (keys) are unique - it was checked when parsing */\n            LOGVAL(ctx, LYVE_XPATH, \"Predicate missing for a key of %s \\\"%s\\\" in path.\",\n                    lys_nodetype2str(ctx_node->nodetype), ctx_node->name);\n            ly_path_predicates_free(ctx, LY_PATH_PREDTYPE_LIST, *predicates);\n            *predicates = NULL;\n            ret = LY_EVALID;\n            goto cleanup;\n        }\n\n    } else if (expr->tokens[*tok_idx] == LYXP_TOKEN_DOT) {\n        if (ctx_node->nodetype != LYS_LEAFLIST) {\n            LOGVAL(ctx, LYVE_XPATH, \"Leaf-list predicate defined for %s \\\"%s\\\" in path.\",\n                    lys_nodetype2str(ctx_node->nodetype), ctx_node->name);\n            ret = LY_EVALID;\n            goto cleanup;\n        }\n        ++(*tok_idx);\n\n        /* new predicate */\n        *pred_type = LY_PATH_PREDTYPE_LEAFLIST;\n        LY_ARRAY_NEW_GOTO(ctx, *predicates, p, ret, cleanup);\n\n        /* '=' */\n        assert(expr->tokens[*tok_idx] == LYXP_TOKEN_OPER_EQUAL);\n        ++(*tok_idx);\n\n        /* Literal or Number */\n        assert((expr->tokens[*tok_idx] == LYXP_TOKEN_LITERAL) || (expr->tokens[*tok_idx] == LYXP_TOKEN_NUMBER));\n        if (expr->tokens[*tok_idx] == LYXP_TOKEN_LITERAL) {\n            /* skip quotes */\n            val = expr->expr + expr->tok_pos[*tok_idx] + 1;\n            val_len = expr->tok_len[*tok_idx] - 2;\n        } else {\n            val = expr->expr + expr->tok_pos[*tok_idx];\n            val_len = expr->tok_len[*tok_idx];\n        }\n\n        /* store the value */\n        LOG_LOCSET(ctx_node, NULL, NULL, NULL);\n        ret = lyd_value_store(ctx, &p->value, ((struct lysc_node_leaflist *)ctx_node)->type, val, val_len, NULL, format,\n                prefix_data, LYD_HINT_DATA, ctx_node, NULL);\n        LOG_LOCBACK(ctx_node ? 1 : 0, 0, 0, 0);\n        LY_CHECK_ERR_GOTO(ret, p->value.realtype = NULL, cleanup);\n        ++(*tok_idx);\n\n        /* \"allocate\" the type to avoid problems when freeing the value after the type was freed */\n        LY_ATOMIC_INC_BARRIER(((struct lysc_type *)p->value.realtype)->refcount);\n\n        /* ']' */\n        assert(expr->tokens[*tok_idx] == LYXP_TOKEN_BRACK2);\n        ++(*tok_idx);\n    } else {\n        assert(expr->tokens[*tok_idx] == LYXP_TOKEN_NUMBER);\n        if (!(ctx_node->nodetype & (LYS_LEAFLIST | LYS_LIST))) {\n            ret = LY_EVALID;\n            LOGVAL(ctx, LYVE_XPATH, \"Positional predicate defined for %s \\\"%s\\\" in path.\",\n                    lys_nodetype2str(ctx_node->nodetype), ctx_node->name);\n            goto cleanup;\n        } else if (ctx_node->flags & LYS_CONFIG_W) {\n            ret = LY_EVALID;\n            LOGVAL(ctx, LYVE_XPATH, \"Positional predicate defined for configuration %s \\\"%s\\\" in path.\",\n                    lys_nodetype2str(ctx_node->nodetype), ctx_node->name);\n            goto cleanup;\n        }\n\n        /* new predicate */\n        *pred_type = LY_PATH_PREDTYPE_POSITION;\n        LY_ARRAY_NEW_GOTO(ctx, *predicates, p, ret, cleanup);\n\n        /* syntax was already checked */\n        p->position = strtoull(expr->expr + expr->tok_pos[*tok_idx], (char **)&val, LY_BASE_DEC);\n        ++(*tok_idx);\n\n        /* ']' */\n        assert(expr->tokens[*tok_idx] == LYXP_TOKEN_BRACK2);\n        ++(*tok_idx);\n    }\n\ncleanup:\n    LOG_LOCBACK(cur_node ? 1 : 0, 0, 0, 0);\n    return ret;\n}\n\n/**\n * @brief Compile leafref predicate. Actually, it is only checked.\n *\n * @param[in] ctx_node Context node, node for which the predicate is defined.\n * @param[in] cur_node Current (original context) node.\n * @param[in] expr Parsed path.\n * @param[in,out] tok_idx Index in @p expr, is adjusted for parsed tokens.\n * @param[in] format Format of the path.\n * @param[in] prefix_data Format-specific data for resolving any prefixes (see ::ly_resolve_prefix).\n * @return LY_ERR value.\n */\nstatic LY_ERR\nly_path_compile_predicate_leafref(const struct lysc_node *ctx_node, const struct lysc_node *cur_node,\n        const struct lyxp_expr *expr, uint32_t *tok_idx, LY_VALUE_FORMAT format, void *prefix_data)\n{\n    LY_ERR ret = LY_SUCCESS;\n    const struct lysc_node *key, *node, *node2;\n    struct ly_ctx *ctx = cur_node->module->ctx;\n\n    if (lyxp_next_token(NULL, expr, tok_idx, LYXP_TOKEN_BRACK1)) {\n        /* '[', no predicate */\n        goto cleanup; /* LY_SUCCESS */\n    }\n\n    if (ctx_node->nodetype != LYS_LIST) {\n        LOGVAL(ctx, LYVE_XPATH, \"List predicate defined for %s \\\"%s\\\" in path.\",\n                lys_nodetype2str(ctx_node->nodetype), ctx_node->name);\n        ret = LY_EVALID;\n        goto cleanup;\n    } else if (ctx_node->flags & LYS_KEYLESS) {\n        LOGVAL(ctx, LYVE_XPATH, \"List predicate defined for keyless %s \\\"%s\\\" in path.\",\n                lys_nodetype2str(ctx_node->nodetype), ctx_node->name);\n        ret = LY_EVALID;\n        goto cleanup;\n    }\n\n    do {\n        /* NameTest, find the key */\n        ret = ly_path_compile_snode(ctx, cur_node, cur_node->module, ctx_node, expr, *tok_idx, format, prefix_data,\n                NULL, 0, &key, NULL);\n        LY_CHECK_GOTO(ret, cleanup);\n        if ((key->nodetype != LYS_LEAF) || !(key->flags & LYS_KEY)) {\n            LOGVAL(ctx, LYVE_XPATH, \"Key expected instead of %s \\\"%s\\\" in path.\",\n                    lys_nodetype2str(key->nodetype), key->name);\n            ret = LY_EVALID;\n            goto cleanup;\n        }\n        ++(*tok_idx);\n\n        /* we are not actually compiling, throw the key away */\n        (void)key;\n\n        /* '=' */\n        assert(expr->tokens[*tok_idx] == LYXP_TOKEN_OPER_EQUAL);\n        ++(*tok_idx);\n\n        /* FuncName */\n        assert(expr->tokens[*tok_idx] == LYXP_TOKEN_FUNCNAME);\n        ++(*tok_idx);\n\n        /* evaluating from the \"current()\" node */\n        node = cur_node;\n\n        /* '(' */\n        assert(expr->tokens[*tok_idx] == LYXP_TOKEN_PAR1);\n        ++(*tok_idx);\n\n        /* ')' */\n        assert(expr->tokens[*tok_idx] == LYXP_TOKEN_PAR2);\n        ++(*tok_idx);\n\n        do {\n            /* '/' */\n            assert(expr->tokens[*tok_idx] == LYXP_TOKEN_OPER_PATH);\n            ++(*tok_idx);\n\n            /* go to parent */\n            if (!node) {\n                LOGVAL(ctx, LYVE_XPATH, \"Too many parent references in path.\");\n                ret = LY_EVALID;\n                goto cleanup;\n            }\n            node = lysc_data_parent(node);\n\n            /* '..' */\n            assert(expr->tokens[*tok_idx] == LYXP_TOKEN_DDOT);\n            ++(*tok_idx);\n        } while (expr->tokens[*tok_idx + 1] == LYXP_TOKEN_DDOT);\n\n        do {\n            /* '/' */\n            assert(expr->tokens[*tok_idx] == LYXP_TOKEN_OPER_PATH);\n            ++(*tok_idx);\n\n            /* NameTest */\n            assert(expr->tokens[*tok_idx] == LYXP_TOKEN_NAMETEST);\n            LY_CHECK_RET(ly_path_compile_snode(ctx, cur_node, cur_node->module, node, expr, *tok_idx, format,\n                    prefix_data, NULL, 0, &node2, NULL));\n            node = node2;\n            ++(*tok_idx);\n        } while ((*tok_idx + 1 < expr->used) && (expr->tokens[*tok_idx + 1] == LYXP_TOKEN_NAMETEST));\n\n        /* check the last target node */\n        if (node->nodetype != LYS_LEAF) {\n            LOGVAL(ctx, LYVE_XPATH, \"Leaf expected instead of %s \\\"%s\\\" in leafref predicate in path.\",\n                    lys_nodetype2str(node->nodetype), node->name);\n            ret = LY_EVALID;\n            goto cleanup;\n        }\n\n        /* we are not actually compiling, throw the rightside node away */\n        (void)node;\n\n        /* ']' */\n        assert(expr->tokens[*tok_idx] == LYXP_TOKEN_BRACK2);\n        ++(*tok_idx);\n\n        /* another predicate follows? */\n    } while (!lyxp_next_token(NULL, expr, tok_idx, LYXP_TOKEN_BRACK1));\n\ncleanup:\n    return (ret == LY_ENOTFOUND) ? LY_EVALID : ret;\n}\n\n/**\n * @brief Compile path into ly_path structure. Any predicates of a leafref are only checked, not compiled.\n *\n * @param[in] ctx libyang context.\n * @param[in] cur_mod Current module of the path (where it was \"instantiated\"), ignored of @p lref. Used for nodes\n * without a prefix for ::LY_VALUE_SCHEMA and ::LY_VALUE_SCHEMA_RESOLVED format.\n * @param[in] ctx_node Optional context node, mandatory of @p lref.\n * @param[in] top_ext Extension instance containing the definition of the data being created. It is used to find the top-level\n * node inside the extension instance instead of a module. Note that this is the case not only if the @p ctx_node is NULL,\n * but also if the relative path starting in @p ctx_node reaches the document root via double dots.\n * @param[in] expr Parsed path.\n * @param[in] lref Whether leafref is being compiled or not.\n * @param[in] oper Oper option (@ref path_oper_options).\n * @param[in] target Target option (@ref path_target_options).\n * @param[in] limit_access_tree Whether to limit accessible tree as described in\n * [XPath context](https://datatracker.ietf.org/doc/html/rfc7950#section-6.4.1).\n * @param[in] format Format of the path.\n * @param[in] prefix_data Format-specific data for resolving any prefixes (see ::ly_resolve_prefix).\n * @param[out] path Compiled path.\n * @return LY_ERECOMPILE, only if @p lref.\n * @return LY_ERR value.\n */\nstatic LY_ERR\n_ly_path_compile(const struct ly_ctx *ctx, const struct lys_module *cur_mod, const struct lysc_node *ctx_node,\n        const struct lysc_ext_instance *top_ext, const struct lyxp_expr *expr, ly_bool lref, uint8_t oper, uint8_t target,\n        ly_bool limit_access_tree, LY_VALUE_FORMAT format, void *prefix_data, struct ly_path **path)\n{\n    LY_ERR ret = LY_SUCCESS;\n    uint32_t tok_idx = 0, getnext_opts;\n    const struct lysc_node *node2, *cur_node, *op;\n    struct ly_path *p = NULL;\n    struct lysc_ext_instance *ext = NULL;\n\n    assert(ctx);\n    assert(!lref || ctx_node);\n    assert((oper == LY_PATH_OPER_INPUT) || (oper == LY_PATH_OPER_OUTPUT));\n    assert((target == LY_PATH_TARGET_SINGLE) || (target == LY_PATH_TARGET_MANY));\n\n    if (!limit_access_tree) {\n        op = NULL;\n    } else {\n        /* find operation, if we are in any */\n        for (op = ctx_node; op && !(op->nodetype & (LYS_RPC | LYS_ACTION | LYS_NOTIF)); op = op->parent) {}\n    }\n\n    *path = NULL;\n\n    /* remember original context node */\n    cur_node = ctx_node;\n    LOG_LOCSET(cur_node, NULL, NULL, NULL);\n\n    if (oper == LY_PATH_OPER_OUTPUT) {\n        getnext_opts = LYS_GETNEXT_OUTPUT;\n    } else {\n        getnext_opts = 0;\n    }\n\n    if (expr->tokens[tok_idx] == LYXP_TOKEN_OPER_PATH) {\n        /* absolute path */\n        ctx_node = NULL;\n\n        ++tok_idx;\n    } else {\n        /* relative path */\n        if (!ctx_node) {\n            LOGVAL(ctx, LYVE_XPATH, \"No initial schema parent for a relative path.\");\n            ret = LY_EVALID;\n            goto cleanup;\n        }\n\n        /* go up the parents for leafref */\n        while (lref && (expr->tokens[tok_idx] == LYXP_TOKEN_DDOT)) {\n            if (!ctx_node) {\n                LOGVAL(ctx, LYVE_XPATH, \"Too many parent references in path.\");\n                ret = LY_EVALID;\n                goto cleanup;\n            }\n\n            /* get parent */\n            ctx_node = lysc_data_parent(ctx_node);\n\n            ++tok_idx;\n\n            assert(expr->tokens[tok_idx] == LYXP_TOKEN_OPER_PATH);\n            ++tok_idx;\n        }\n    }\n\n    do {\n        /* check last compiled inner node, whether it is uniquely identified (even key-less list) */\n        if (p && !lref && (target == LY_PATH_TARGET_SINGLE) && (p->node->nodetype == LYS_LIST) && !p->predicates) {\n            LOGVAL(ctx, LYVE_XPATH, \"Predicate missing for %s \\\"%s\\\" in path.\",\n                    lys_nodetype2str(p->node->nodetype), p->node->name);\n            ret = LY_EVALID;\n            goto cleanup;\n        }\n\n        /* NameTest */\n        LY_CHECK_ERR_GOTO(lyxp_check_token(ctx, expr, tok_idx, LYXP_TOKEN_NAMETEST), ret = LY_EVALID, cleanup);\n\n        /* get schema node */\n        LY_CHECK_GOTO(ret = ly_path_compile_snode(ctx, cur_node, cur_mod, ctx_node, expr, tok_idx, format, prefix_data,\n                top_ext, getnext_opts, &node2, &ext), cleanup);\n        ++tok_idx;\n        if ((op && (node2->nodetype & (LYS_RPC | LYS_ACTION | LYS_NOTIF)) && (node2 != op))) {\n            LOGVAL(ctx, LYVE_XPATH, \"Not found node \\\"%s\\\" in path.\", node2->name);\n            ret = LY_EVALID;\n            goto cleanup;\n        }\n        ctx_node = node2;\n\n        /* new path segment */\n        LY_ARRAY_NEW_GOTO(ctx, *path, p, ret, cleanup);\n        p->node = ctx_node;\n        p->ext = ext;\n\n        /* compile any predicates */\n        if (lref) {\n            ret = ly_path_compile_predicate_leafref(ctx_node, cur_node, expr, &tok_idx, format, prefix_data);\n        } else {\n            ret = ly_path_compile_predicate(ctx, cur_node, cur_mod, ctx_node, expr, &tok_idx, format, prefix_data,\n                    &p->predicates, &p->pred_type);\n        }\n        LY_CHECK_GOTO(ret, cleanup);\n    } while (!lyxp_next_token(NULL, expr, &tok_idx, LYXP_TOKEN_OPER_PATH));\n\n    /* check leftover tokens */\n    if (tok_idx < expr->used) {\n        LOGVAL(ctx, LY_VCODE_XP_INTOK, lyxp_token2str(expr->tokens[tok_idx]), &expr->expr[expr->tok_pos[tok_idx]]);\n        ret = LY_EVALID;\n        goto cleanup;\n    }\n\n    /* check last compiled node */\n    if (!lref && (target == LY_PATH_TARGET_SINGLE) && (p->node->nodetype & (LYS_LIST | LYS_LEAFLIST)) && !p->predicates) {\n        LOGVAL(ctx, LYVE_XPATH, \"Predicate missing for %s \\\"%s\\\" in path.\",\n                lys_nodetype2str(p->node->nodetype), p->node->name);\n        ret = LY_EVALID;\n        goto cleanup;\n    }\n\ncleanup:\n    if (ret) {\n        ly_path_free(ctx, *path);\n        *path = NULL;\n    }\n    LOG_LOCBACK(1, 0, 0, 0);\n    return (ret == LY_ENOTFOUND) ? LY_EVALID : ret;\n}\n\nLY_ERR\nly_path_compile(const struct ly_ctx *ctx, const struct lys_module *cur_mod, const struct lysc_node *ctx_node,\n        const struct lysc_ext_instance *top_ext, const struct lyxp_expr *expr, uint8_t oper, uint8_t target,\n        ly_bool limit_access_tree, LY_VALUE_FORMAT format, void *prefix_data, struct ly_path **path)\n{\n    return _ly_path_compile(ctx, cur_mod, ctx_node, top_ext, expr, 0, oper, target, limit_access_tree, format,\n            prefix_data, path);\n}\n\nLY_ERR\nly_path_compile_leafref(const struct ly_ctx *ctx, const struct lysc_node *ctx_node, const struct lysc_ext_instance *top_ext,\n        const struct lyxp_expr *expr, uint8_t oper, uint8_t target, LY_VALUE_FORMAT format, void *prefix_data,\n        struct ly_path **path)\n{\n    return _ly_path_compile(ctx, ctx_node->module, ctx_node, top_ext, expr, 1, oper, target, 1, format, prefix_data, path);\n}\n\nLY_ERR\nly_path_eval_partial(const struct ly_path *path, const struct lyd_node *start, LY_ARRAY_COUNT_TYPE *path_idx,\n        struct lyd_node **match)\n{\n    LY_ARRAY_COUNT_TYPE u;\n    struct lyd_node *prev_node = NULL, *elem, *node = NULL, *target;\n    uint64_t pos;\n\n    assert(path && start);\n\n    if (lysc_data_parent(path[0].node)) {\n        /* relative path, start from the parent children */\n        start = lyd_child(start);\n    } else {\n        /* absolute path, start from the first top-level sibling */\n        while (start->parent) {\n            start = lyd_parent(start);\n        }\n        while (start->prev->next) {\n            start = start->prev;\n        }\n    }\n\n    LY_ARRAY_FOR(path, u) {\n        switch (path[u].pred_type) {\n        case LY_PATH_PREDTYPE_POSITION:\n            /* we cannot use hashes and want an instance on a specific position */\n            pos = 1;\n            node = NULL;\n            LYD_LIST_FOR_INST(start, path[u].node, elem) {\n                if (pos == path[u].predicates[0].position) {\n                    node = elem;\n                    break;\n                }\n                ++pos;\n            }\n            break;\n        case LY_PATH_PREDTYPE_LEAFLIST:\n            /* we will use hashes to find one leaf-list instance */\n            LY_CHECK_RET(lyd_create_term2(path[u].node, &path[u].predicates[0].value, &target));\n            lyd_find_sibling_first(start, target, &node);\n            lyd_free_tree(target);\n            break;\n        case LY_PATH_PREDTYPE_LIST:\n            /* we will use hashes to find one list instance */\n            LY_CHECK_RET(lyd_create_list(path[u].node, path[u].predicates, &target));\n            lyd_find_sibling_first(start, target, &node);\n            lyd_free_tree(target);\n            break;\n        case LY_PATH_PREDTYPE_NONE:\n            /* we will use hashes to find one any/container/leaf instance */\n            lyd_find_sibling_val(start, path[u].node, NULL, 0, &node);\n            break;\n        }\n\n        if (!node) {\n            /* no matching nodes */\n            break;\n        }\n\n        /* rememeber previous node */\n        prev_node = node;\n\n        /* next path segment, if any */\n        start = lyd_child(node);\n    }\n\n    if (node) {\n        /* we have found the full path */\n        if (path_idx) {\n            *path_idx = u;\n        }\n        if (match) {\n            *match = node;\n        }\n        return LY_SUCCESS;\n\n    } else if (prev_node) {\n        /* we have found only some partial match */\n        if (path_idx) {\n            *path_idx = u - 1;\n        }\n        if (match) {\n            *match = prev_node;\n        }\n        return LY_EINCOMPLETE;\n    }\n\n    /* we have not found any nodes */\n    if (path_idx) {\n        *path_idx = 0;\n    }\n    if (match) {\n        *match = NULL;\n    }\n    return LY_ENOTFOUND;\n}\n\nLY_ERR\nly_path_eval(const struct ly_path *path, const struct lyd_node *start, struct lyd_node **match)\n{\n    LY_ERR ret;\n    struct lyd_node *m;\n\n    ret = ly_path_eval_partial(path, start, NULL, &m);\n\n    if (ret == LY_SUCCESS) {\n        /* last node was found */\n        if (match) {\n            *match = m;\n        }\n        return LY_SUCCESS;\n    }\n\n    /* not a full match */\n    if (match) {\n        *match = NULL;\n    }\n    return LY_ENOTFOUND;\n}\n\nLY_ERR\nly_path_dup(const struct ly_ctx *ctx, const struct ly_path *path, struct ly_path **dup)\n{\n    LY_ARRAY_COUNT_TYPE u, v;\n\n    if (!path) {\n        return LY_SUCCESS;\n    }\n\n    LY_ARRAY_CREATE_RET(ctx, *dup, LY_ARRAY_COUNT(path), LY_EMEM);\n    LY_ARRAY_FOR(path, u) {\n        LY_ARRAY_INCREMENT(*dup);\n        (*dup)[u].node = path[u].node;\n        if (path[u].predicates) {\n            LY_ARRAY_CREATE_RET(ctx, (*dup)[u].predicates, LY_ARRAY_COUNT(path[u].predicates), LY_EMEM);\n            (*dup)[u].pred_type = path[u].pred_type;\n            LY_ARRAY_FOR(path[u].predicates, v) {\n                struct ly_path_predicate *pred = &path[u].predicates[v];\n\n                LY_ARRAY_INCREMENT((*dup)[u].predicates);\n                switch (path[u].pred_type) {\n                case LY_PATH_PREDTYPE_POSITION:\n                    /* position-predicate */\n                    (*dup)[u].predicates[v].position = pred->position;\n                    break;\n                case LY_PATH_PREDTYPE_LIST:\n                case LY_PATH_PREDTYPE_LEAFLIST:\n                    /* key-predicate or leaf-list-predicate */\n                    (*dup)[u].predicates[v].key = pred->key;\n                    pred->value.realtype->plugin->duplicate(ctx, &pred->value, &(*dup)[u].predicates[v].value);\n                    LY_ATOMIC_INC_BARRIER(((struct lysc_type *)pred->value.realtype)->refcount);\n                    break;\n                case LY_PATH_PREDTYPE_NONE:\n                    break;\n                }\n            }\n        }\n    }\n\n    return LY_SUCCESS;\n}\n\nvoid\nly_path_predicates_free(const struct ly_ctx *ctx, enum ly_path_pred_type pred_type, struct ly_path_predicate *predicates)\n{\n    LY_ARRAY_COUNT_TYPE u;\n    struct lysf_ctx fctx = {.ctx = (struct ly_ctx *)ctx};\n\n    if (!predicates) {\n        return;\n    }\n\n    LY_ARRAY_FOR(predicates, u) {\n        switch (pred_type) {\n        case LY_PATH_PREDTYPE_POSITION:\n        case LY_PATH_PREDTYPE_NONE:\n            /* nothing to free */\n            break;\n        case LY_PATH_PREDTYPE_LIST:\n        case LY_PATH_PREDTYPE_LEAFLIST:\n            if (predicates[u].value.realtype) {\n                predicates[u].value.realtype->plugin->free(ctx, &predicates[u].value);\n                lysc_type_free(&fctx, (struct lysc_type *)predicates[u].value.realtype);\n            }\n            break;\n        }\n    }\n    LY_ARRAY_FREE(predicates);\n}\n\nvoid\nly_path_free(const struct ly_ctx *ctx, struct ly_path *path)\n{\n    LY_ARRAY_COUNT_TYPE u;\n\n    if (!path) {\n        return;\n    }\n\n    LY_ARRAY_FOR(path, u) {\n        ly_path_predicates_free(ctx, path[u].pred_type, path[u].predicates);\n    }\n    LY_ARRAY_FREE(path);\n}\n", "meta": {"content_hash": "87d2630ecb0840423a5f60263c75bba7", "timestamp": "", "source": "github", "line_count": 1181, "max_line_length": 128, "avg_line_length": 37.03725656223539, "alnum_prop": 0.5306234425367504, "repo_name": "CESNET/libyang", "id": "72e5fb5b7a0317e2eca0641c0475f9711b32b815", "size": "44119", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "src/path.c", "mode": "33188", "license": "bsd-3-clause", "language": [{"name": "C", "bytes": "6129546"}, {"name": "CMake", "bytes": "49556"}, {"name": "Makefile", "bytes": "226"}, {"name": "Roff", "bytes": "9841"}, {"name": "Shell", "bytes": "19438"}]}}
{"text": "FindHistory\n==============\n\n[![Build\nStatus](https://travis-ci.org/powellc/findhistory.svg?branch=master)](https://travis-ci.org/powellc/findhistory)\n\nA django project to power historical artifact lookups by geotags.\n\nBootstrap\n---------\n\nPowered by the ubiquitous Makefile ... this should be pretty easy:\n\n1. make install\n2. make run\n3. open your browser to: http://127.0.0.1:45000\n\n\nLibrarys\n--------\n\nYou'll need the following installed:\n\n  * libmemcached-dev\n  * libfreetype6-dev\n  * libjpeg-dev\n\n", "meta": {"content_hash": "8f07ad03267f98ecc8a64c8d19863553", "timestamp": "", "source": "github", "line_count": 27, "max_line_length": 112, "avg_line_length": 18.555555555555557, "alnum_prop": 0.7025948103792415, "repo_name": "powellc/findhistory", "id": "6a507764dcf40ad3464f30c20fa8fd70dfce00ee", "size": "501", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "README.md", "mode": "33188", "license": "bsd-3-clause", "language": [{"name": "CSS", "bytes": "101644"}, {"name": "HTML", "bytes": "27050"}, {"name": "JavaScript", "bytes": "101442"}, {"name": "Makefile", "bytes": "581"}, {"name": "Python", "bytes": "25548"}]}}
{"text": "<?php\n/*\nAdd-on Name: Generate Sections\nAuthor: Thomas Usborne\nAuthor URI: http://edge22.com\n*/\n\n// No direct access, please\nif ( ! defined( 'ABSPATH' ) ) exit;\n\n// Define the version\nif ( ! defined( 'GENERATE_SECTIONS_VERSION' ) )\n\tdefine( 'GENERATE_SECTIONS_VERSION', GP_PREMIUM_VERSION );\n\nif ( ! function_exists( 'generate_sections_init' ) ) :\nadd_action('plugins_loaded', 'generate_sections_init');\nfunction generate_sections_init() {\n\tload_plugin_textdomain( 'generate-sections', false, 'gp-premium/langs/sections/' );\n}\nendif;\n\n// Include functions identical between standalone addon and GP Premium\nrequire plugin_dir_path( __FILE__ ) . 'functions/generate-sections.php';", "meta": {"content_hash": "92da1b90e003ec9a289ce79c6f5e0fa2", "timestamp": "", "source": "github", "line_count": 23, "max_line_length": 84, "avg_line_length": 29.47826086956522, "alnum_prop": 0.7182890855457227, "repo_name": "goeckeler/esv", "id": "2eaaff595912b99bac17c2980b50a41b9fbec779", "size": "678", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "www/2017/esv-2017-wordpress/wp-content/plugins/gp-premium/sections/generate-sections.php", "mode": "33188", "license": "apache-2.0", "language": [{"name": "CSS", "bytes": "2540703"}, {"name": "HTML", "bytes": "319891"}, {"name": "JavaScript", "bytes": "3432216"}, {"name": "PHP", "bytes": "13211104"}]}}
{"text": "package gui\n\nimport org.joda.time.Period\nimport org.joda.time.format.PeriodFormatterBuilder\n\nimport scalafx.beans.property.{ObjectProperty, ReadOnlyStringProperty}\n\nimport duration.Implicits._\n\n/**\n * A class to model a title on a DVD\n * Created by alex on 04/05/15.\n */\nsealed class Title(val id: Int, _titleNumber: Int, _length: Period, val target: String) extends Ordered[Title] {\n\n\n  val trackNumber = new ReadOnlyStringProperty(this, \"trackNumber\", _titleNumber.toString)\n  val length = new ReadOnlyStringProperty(this, \"length\", _length.format)\n  val periodLength = _length.toStandardDuration.getMillis\n\n  override def compare(that: Title): Int = id - that.id\n}\n\n/**\n * A class to model a title on a movie DVD\n * Created by alex on 04/05/15.\n */\nclass FilmTitle(override val id: Int, _titleNumber: Int, _length: Period, override val target: String) extends Title(id, _titleNumber, _length, target)\n\n/**\n * A class to model a title on a DVD with added TV episode information\n * Created by alex on 04/05/15.\n */\nclass TvTitle(override val id: Int, _titleNumber: Int, _length: Period, override val target: String, _season: Option[Int] = None, _episode: Option[Int] = None) extends Title(id, _titleNumber, _length, target) {\n\n\n  val season = new ObjectProperty(this, \"season\", _season)\n  val episode = new ObjectProperty(this, \"episode\", _episode)\n}\n", "meta": {"content_hash": "829ece0baba2a8f899e5e66837532027", "timestamp": "", "source": "github", "line_count": 39, "max_line_length": 210, "avg_line_length": 34.666666666666664, "alnum_prop": 0.7322485207100592, "repo_name": "unclealex72/ripper", "id": "46a3770cf300f3742dc5c81801e3cbccc44f0196", "size": "1352", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "src/main/scala/gui/Title.scala", "mode": "33188", "license": "mit", "language": [{"name": "Scala", "bytes": "62087"}, {"name": "Shell", "bytes": "651"}]}}
{"text": "import sphinx_rtd_theme\n\nhtml_theme = \"sphinx_rtd_theme\"\n\nhtml_theme_path = [sphinx_rtd_theme.get_html_theme_path()]\n\n#\n# sklearn-dummies documentation build configuration file, created by\n# sphinx-quickstart on Thu Mar  2 23:06:01 2017.\n#\n# This file is execfile()d with the current directory set to its\n# containing dir.\n#\n# Note that not all possible configuration values are present in this\n# autogenerated file.\n#\n# All configuration values have a default; values that are commented out\n# serve to show the default.\n\n# If extensions (or modules to document with autodoc) are in another directory,\n# add these directories to sys.path here. If the directory is relative to the\n# documentation root, use os.path.abspath to make it absolute, like shown here.\n#\nimport os\nimport sys\nsys.path.insert(0, os.path.abspath('..'))\n\n\n# -- General configuration ------------------------------------------------\n\n# If your documentation needs a minimal Sphinx version, state it here.\n#\n# needs_sphinx = '1.0'\n\n# Add any Sphinx extension module names here, as strings. They can be\n# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom\n# ones.\nextensions = ['sphinx.ext.autodoc', 'sphinx.ext.napoleon']\n\n# Add any paths that contain templates here, relative to this directory.\ntemplates_path = ['_templates']\n\n# The suffix(es) of source filenames.\n# You can specify multiple suffix as a list of string:\n#\n# source_suffix = ['.rst', '.md']\nsource_suffix = '.rst'\n\n# The master toctree document.\nmaster_doc = 'index'\n\n# General information about the project.\nproject = 'sklearn-dummies'\ncopyright = '2017, Gustavo Sena Mafra'\nauthor = 'Gustavo Sena Mafra'\n\n# The version info for the project you're documenting, acts as replacement for\n# |version| and |release|, also used in various other places throughout the\n# built documents.\n#\n# The short X.Y version.\nversion = '0.1'\n# The full version, including alpha/beta/rc tags.\nrelease = '0.1'\n\n# The language for content autogenerated by Sphinx. Refer to documentation\n# for a list of supported languages.\n#\n# This is also used if you do content translation via gettext catalogs.\n# Usually you set \"language\" from the command line for these cases.\nlanguage = None\n\n# List of patterns, relative to source directory, that match files and\n# directories to ignore when looking for source files.\n# This patterns also effect to html_static_path and html_extra_path\nexclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']\n\n# The name of the Pygments (syntax highlighting) style to use.\npygments_style = 'sphinx'\n\n# If true, `todo` and `todoList` produce output, else they produce nothing.\ntodo_include_todos = False\n\n\n# -- Options for HTML output ----------------------------------------------\n\n# The theme to use for HTML and HTML Help pages.  See the documentation for\n# a list of builtin themes.\n#\n# html_theme = 'alabaster'\n\n# Theme options are theme-specific and customize the look and feel of a theme\n# further.  For a list of options available for each theme, see the\n# documentation.\n#\n# html_theme_options = {}\n\n# Add any paths that contain custom static files (such as style sheets) here,\n# relative to this directory. They are copied after the builtin static files,\n# so a file named \"default.css\" will overwrite the builtin \"default.css\".\nhtml_static_path = ['_static']\n\n\n# -- Options for HTMLHelp output ------------------------------------------\n\n# Output file base name for HTML help builder.\nhtmlhelp_basename = 'sklearn-dummiesdoc'\n\n\n# -- Options for LaTeX output ---------------------------------------------\n\nlatex_elements = {\n    # The paper size ('letterpaper' or 'a4paper').\n    #\n    # 'papersize': 'letterpaper',\n\n    # The font size ('10pt', '11pt' or '12pt').\n    #\n    # 'pointsize': '10pt',\n\n    # Additional stuff for the LaTeX preamble.\n    #\n    # 'preamble': '',\n\n    # Latex figure (float) alignment\n    #\n    # 'figure_align': 'htbp',\n}\n\n# Grouping the document tree into LaTeX files. List of tuples\n# (source start file, target name, title,\n#  author, documentclass [howto, manual, or own class]).\nlatex_documents = [\n    (master_doc, 'sklearn-dummies.tex', 'sklearn-dummies Documentation',\n     'Gustavo Sena Mafra', 'manual'),\n]\n\n\n# -- Options for manual page output ---------------------------------------\n\n# One entry per manual page. List of tuples\n# (source start file, name, description, authors, manual section).\nman_pages = [\n    (master_doc, 'sklearn-dummies', 'sklearn-dummies Documentation',\n     [author], 1)\n]\n\n\n# -- Options for Texinfo output -------------------------------------------\n\n# Grouping the document tree into Texinfo files. List of tuples\n# (source start file, target name, title, author,\n#  dir menu entry, description, category)\ntexinfo_documents = [\n    (master_doc, 'sklearn-dummies', 'sklearn-dummies Documentation',\n     author, 'sklearn-dummies', 'One line description of project.',\n     'Miscellaneous'),\n]\n\n\n\n", "meta": {"content_hash": "3bc301fd580aae299ae3d9a1bb9ee0e0", "timestamp": "", "source": "github", "line_count": 161, "max_line_length": 79, "avg_line_length": 30.59006211180124, "alnum_prop": 0.6797969543147208, "repo_name": "gsmafra/sklearn-dummies", "id": "6f90c52f0bb408369b73b532a3841fa6bc576f0f", "size": "4973", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "docs/conf.py", "mode": "33188", "license": "mit", "language": [{"name": "Python", "bytes": "7524"}]}}
{"text": "\n\npackage io.reactivex.internal.operators.maybe;\n\nimport java.util.Iterator;\nimport java.util.concurrent.atomic.*;\n\nimport org.reactivestreams.*;\n\nimport io.reactivex.*;\nimport io.reactivex.disposables.Disposable;\nimport io.reactivex.exceptions.Exceptions;\nimport io.reactivex.internal.disposables.SequentialDisposable;\nimport io.reactivex.internal.functions.ObjectHelper;\nimport io.reactivex.internal.subscriptions.*;\nimport io.reactivex.internal.util.*;\n\n/**\n * Concatenate values of each MaybeSource provided by an Iterable.\n *\n * @param <T> the value type\n */\npublic final class MaybeConcatIterable<T> extends Flowable<T> {\n\n    final Iterable<? extends MaybeSource<? extends T>> sources;\n\n    public MaybeConcatIterable(Iterable<? extends MaybeSource<? extends T>> sources) {\n        this.sources = sources;\n    }\n\n    @Override\n    protected void subscribeActual(Subscriber<? super T> s) {\n\n        Iterator<? extends MaybeSource<? extends T>> it;\n\n        try {\n            it = ObjectHelper.requireNonNull(sources.iterator(), \"The sources Iterable returned a null Iterator\");\n        } catch (Throwable ex) {\n            Exceptions.throwIfFatal(ex);\n            EmptySubscription.error(ex, s);\n            return;\n        }\n\n        ConcatMaybeObserver<T> parent = new ConcatMaybeObserver<T>(s, it);\n        s.onSubscribe(parent);\n        parent.drain();\n    }\n\n    static final class ConcatMaybeObserver<T>\n    extends AtomicInteger\n    implements MaybeObserver<T>, Subscription {\n\n        private static final long serialVersionUID = 3520831347801429610L;\n\n        final Subscriber<? super T> actual;\n\n        final AtomicLong requested;\n\n        final AtomicReference<Object> current;\n\n        final SequentialDisposable disposables;\n\n        final Iterator<? extends MaybeSource<? extends T>> sources;\n\n        long produced;\n\n        ConcatMaybeObserver(Subscriber<? super T> actual, Iterator<? extends MaybeSource<? extends T>> sources) {\n            this.actual = actual;\n            this.sources = sources;\n            this.requested = new AtomicLong();\n            this.disposables = new SequentialDisposable();\n            this.current = new AtomicReference<Object>(NotificationLite.COMPLETE); // as if a previous completed\n        }\n\n        @Override\n        public void request(long n) {\n            if (SubscriptionHelper.validate(n)) {\n                BackpressureHelper.add(requested, n);\n                drain();\n            }\n        }\n\n        @Override\n        public void cancel() {\n            disposables.dispose();\n        }\n\n        @Override\n        public void onSubscribe(Disposable d) {\n            disposables.replace(d);\n        }\n\n        @Override\n        public void onSuccess(T value) {\n            current.lazySet(value);\n            drain();\n        }\n\n        @Override\n        public void onError(Throwable e) {\n            actual.onError(e);\n        }\n\n        @Override\n        public void onComplete() {\n            current.lazySet(NotificationLite.COMPLETE);\n            drain();\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        void drain() {\n            if (getAndIncrement() != 0) {\n                return;\n            }\n\n            AtomicReference<Object> c = current;\n            Subscriber<? super T> a = actual;\n\n            for (;;) {\n                if (disposables.isDisposed()) {\n                    c.lazySet(null);\n                    return;\n                }\n\n                Object o = c.get();\n\n                if (o != null) {\n                    boolean goNextSource;\n                    if (o != NotificationLite.COMPLETE) {\n                        long p = produced;\n                        if (p != requested.get()) {\n                            produced = p + 1;\n                            c.lazySet(null);\n                            goNextSource = true;\n\n                            a.onNext((T)o);\n                        } else {\n                            goNextSource = false;\n                        }\n                    } else {\n                        goNextSource = true;\n                        c.lazySet(null);\n                    }\n\n                    if (goNextSource) {\n                        boolean b;\n\n                        try {\n                            b = sources.hasNext();\n                        } catch (Throwable ex) {\n                            Exceptions.throwIfFatal(ex);\n                            a.onError(ex);\n                            return;\n                        }\n\n                        if (b) {\n                            MaybeSource<? extends T> source;\n\n                            try {\n                                source = ObjectHelper.requireNonNull(sources.next(), \"The source Iterator returned a null MaybeSource\");\n                            } catch (Throwable ex) {\n                                Exceptions.throwIfFatal(ex);\n                                a.onError(ex);\n                                return;\n                            }\n\n                            source.subscribe(this);\n                        } else {\n                            a.onComplete();\n                        }\n                    }\n                }\n\n                if (decrementAndGet() == 0) {\n                    break;\n                }\n            }\n        }\n    }\n}\n", "meta": {"content_hash": "1d1480f60ebd359290ae0047a1ba309d", "timestamp": "", "source": "github", "line_count": 180, "max_line_length": 136, "avg_line_length": 29.55, "alnum_prop": 0.4867456288776086, "repo_name": "benjchristensen/RxJava", "id": "cb747e32418e6092a8deb7c7b3ec2bce756cd470", "size": "5903", "binary": false, "copies": "1", "ref": "refs/heads/2.x", "path": "src/main/java/io/reactivex/internal/operators/maybe/MaybeConcatIterable.java", "mode": "33188", "license": "apache-2.0", "language": [{"name": "CSS", "bytes": "2171"}, {"name": "Groovy", "bytes": "21278"}, {"name": "Java", "bytes": "3321101"}]}}
{"text": "import math\nimport m5\nfrom m5.objects import *\nfrom m5.defines import buildEnv\nfrom Ruby import create_topology, create_directories\nfrom Ruby import send_evicts\n\n#\n# Declare caches used by the protocol\n#\nclass L1Cache(RubyCache): pass\nclass L2Cache(RubyCache): pass\n\ndef define_options(parser):\n    parser.add_option(\"--l1-retries\", type=\"int\", default=1,\n                      help=\"Token_CMP: # of l1 retries before going persistent\")\n    parser.add_option(\"--timeout-latency\", type=\"int\", default=300,\n                      help=\"Token_CMP: cycles until issuing again\");\n    parser.add_option(\"--disable-dyn-timeouts\", action=\"store_true\",\n          help=\"Token_CMP: disable dyanimc timeouts, use fixed latency instead\")\n    parser.add_option(\"--allow-atomic-migration\", action=\"store_true\",\n          help=\"allow migratory sharing for atomic only accessed blocks\")\n\ndef create_system(options, full_system, system, dma_ports, bootmem,\n                  ruby_system):\n\n    if buildEnv['PROTOCOL'] != 'MOESI_CMP_token':\n        panic(\"This script requires the MOESI_CMP_token protocol to be built.\")\n\n    #\n    # number of tokens that the owner passes to requests so that shared blocks can\n    # respond to read requests\n    #\n    n_tokens = options.num_cpus + 1\n\n    cpu_sequencers = []\n\n    #\n    # The ruby network creation expects the list of nodes in the system to be\n    # consistent with the NetDest list.  Therefore the l1 controller nodes must be\n    # listed before the directory nodes and directory nodes before dma nodes, etc.\n    #\n    l1_cntrl_nodes = []\n    l2_cntrl_nodes = []\n    dma_cntrl_nodes = []\n\n    #\n    # Must create the individual controllers before the network to ensure the\n    # controller constructors are called before the network constructor\n    #\n    l2_bits = int(math.log(options.num_l2caches, 2))\n    block_size_bits = int(math.log(options.cacheline_size, 2))\n\n    for i in xrange(options.num_cpus):\n        #\n        # First create the Ruby objects associated with this cpu\n        #\n        l1i_cache = L1Cache(size = options.l1i_size,\n                            assoc = options.l1i_assoc,\n                            start_index_bit = block_size_bits)\n        l1d_cache = L1Cache(size = options.l1d_size,\n                            assoc = options.l1d_assoc,\n                            start_index_bit = block_size_bits)\n\n        # the ruby random tester reuses num_cpus to specify the\n        # number of cpu ports connected to the tester object, which\n        # is stored in system.cpu. because there is only ever one\n        # tester object, num_cpus is not necessarily equal to the\n        # size of system.cpu; therefore if len(system.cpu) == 1\n        # we use system.cpu[0] to set the clk_domain, thereby ensuring\n        # we don't index off the end of the cpu list.\n        if len(system.cpu) == 1:\n            clk_domain = system.cpu[0].clk_domain\n        else:\n            clk_domain = system.cpu[i].clk_domain\n\n        l1_cntrl = L1Cache_Controller(version=i, L1Icache=l1i_cache,\n                                      L1Dcache=l1d_cache,\n                                      l2_select_num_bits=l2_bits,\n                                      N_tokens=n_tokens,\n                                      retry_threshold=options.l1_retries,\n                                      fixed_timeout_latency=\\\n                                      options.timeout_latency,\n                                      dynamic_timeout_enabled=\\\n                                      not options.disable_dyn_timeouts,\n                                      no_mig_atomic=not \\\n                                      options.allow_atomic_migration,\n                                      send_evictions=send_evicts(options),\n                                      transitions_per_cycle=options.ports,\n                                      clk_domain=clk_domain,\n                                      ruby_system=ruby_system)\n\n        cpu_seq = RubySequencer(version=i, icache=l1i_cache,\n                                dcache=l1d_cache, clk_domain=clk_domain,\n                                ruby_system=ruby_system)\n\n        l1_cntrl.sequencer = cpu_seq\n        exec(\"ruby_system.l1_cntrl%d = l1_cntrl\" % i)\n\n        # Add controllers and sequencers to the appropriate lists\n        cpu_sequencers.append(cpu_seq)\n        l1_cntrl_nodes.append(l1_cntrl)\n\n        # Connect the L1 controllers and the network\n        l1_cntrl.requestFromL1Cache = MessageBuffer()\n        l1_cntrl.requestFromL1Cache.master = ruby_system.network.slave\n        l1_cntrl.responseFromL1Cache = MessageBuffer()\n        l1_cntrl.responseFromL1Cache.master = ruby_system.network.slave\n        l1_cntrl.persistentFromL1Cache = MessageBuffer(ordered = True)\n        l1_cntrl.persistentFromL1Cache.master = ruby_system.network.slave\n\n        l1_cntrl.mandatoryQueue = MessageBuffer()\n        l1_cntrl.requestToL1Cache = MessageBuffer()\n        l1_cntrl.requestToL1Cache.slave = ruby_system.network.master\n        l1_cntrl.responseToL1Cache = MessageBuffer()\n        l1_cntrl.responseToL1Cache.slave = ruby_system.network.master\n        l1_cntrl.persistentToL1Cache = MessageBuffer(ordered = True)\n        l1_cntrl.persistentToL1Cache.slave = ruby_system.network.master\n\n\n    l2_index_start = block_size_bits + l2_bits\n\n    for i in xrange(options.num_l2caches):\n        #\n        # First create the Ruby objects associated with this cpu\n        #\n        l2_cache = L2Cache(size = options.l2_size,\n                           assoc = options.l2_assoc,\n                           start_index_bit = l2_index_start)\n\n        l2_cntrl = L2Cache_Controller(version = i,\n                                      L2cache = l2_cache,\n                                      N_tokens = n_tokens,\n                                      transitions_per_cycle = options.ports,\n                                      ruby_system = ruby_system)\n\n        exec(\"ruby_system.l2_cntrl%d = l2_cntrl\" % i)\n        l2_cntrl_nodes.append(l2_cntrl)\n\n        # Connect the L2 controllers and the network\n        l2_cntrl.GlobalRequestFromL2Cache = MessageBuffer()\n        l2_cntrl.GlobalRequestFromL2Cache.master = ruby_system.network.slave\n        l2_cntrl.L1RequestFromL2Cache = MessageBuffer()\n        l2_cntrl.L1RequestFromL2Cache.master = ruby_system.network.slave\n        l2_cntrl.responseFromL2Cache = MessageBuffer()\n        l2_cntrl.responseFromL2Cache.master = ruby_system.network.slave\n\n        l2_cntrl.GlobalRequestToL2Cache = MessageBuffer()\n        l2_cntrl.GlobalRequestToL2Cache.slave = ruby_system.network.master\n        l2_cntrl.L1RequestToL2Cache = MessageBuffer()\n        l2_cntrl.L1RequestToL2Cache.slave = ruby_system.network.master\n        l2_cntrl.responseToL2Cache = MessageBuffer()\n        l2_cntrl.responseToL2Cache.slave = ruby_system.network.master\n        l2_cntrl.persistentToL2Cache = MessageBuffer(ordered = True)\n        l2_cntrl.persistentToL2Cache.slave = ruby_system.network.master\n\n\n    # Run each of the ruby memory controllers at a ratio of the frequency of\n    # the ruby system\n    # clk_divider value is a fix to pass regression.\n    ruby_system.memctrl_clk_domain = DerivedClockDomain(\n                                          clk_domain=ruby_system.clk_domain,\n                                          clk_divider=3)\n\n    mem_dir_cntrl_nodes, rom_dir_cntrl_node = create_directories(\n        options, bootmem, ruby_system, system)\n    dir_cntrl_nodes = mem_dir_cntrl_nodes[:]\n    if rom_dir_cntrl_node is not None:\n        dir_cntrl_nodes.append(rom_dir_cntrl_node)\n    for dir_cntrl in dir_cntrl_nodes:\n        dir_cntrl.l2_select_num_bits = l2_bits\n        # Connect the directory controllers and the network\n        dir_cntrl.requestToDir = MessageBuffer()\n        dir_cntrl.requestToDir.slave = ruby_system.network.master\n        dir_cntrl.responseToDir = MessageBuffer()\n        dir_cntrl.responseToDir.slave = ruby_system.network.master\n        dir_cntrl.persistentToDir = MessageBuffer(ordered = True)\n        dir_cntrl.persistentToDir.slave = ruby_system.network.master\n        dir_cntrl.dmaRequestToDir = MessageBuffer(ordered = True)\n        dir_cntrl.dmaRequestToDir.slave = ruby_system.network.master\n\n        dir_cntrl.requestFromDir = MessageBuffer()\n        dir_cntrl.requestFromDir.master = ruby_system.network.slave\n        dir_cntrl.responseFromDir = MessageBuffer()\n        dir_cntrl.responseFromDir.master = ruby_system.network.slave\n        dir_cntrl.persistentFromDir = MessageBuffer(ordered = True)\n        dir_cntrl.persistentFromDir.master = ruby_system.network.slave\n        dir_cntrl.dmaResponseFromDir = MessageBuffer(ordered = True)\n        dir_cntrl.dmaResponseFromDir.master = ruby_system.network.slave\n        dir_cntrl.responseFromMemory = MessageBuffer()\n\n\n    for i, dma_port in enumerate(dma_ports):\n        #\n        # Create the Ruby objects associated with the dma controller\n        #\n        dma_seq = DMASequencer(version = i,\n                               ruby_system = ruby_system,\n                               slave = dma_port)\n\n        dma_cntrl = DMA_Controller(version = i,\n                                   dma_sequencer = dma_seq,\n                                   transitions_per_cycle = options.ports,\n                                   ruby_system = ruby_system)\n\n        exec(\"ruby_system.dma_cntrl%d = dma_cntrl\" % i)\n        dma_cntrl_nodes.append(dma_cntrl)\n\n        # Connect the dma controller to the network\n        dma_cntrl.mandatoryQueue = MessageBuffer()\n        dma_cntrl.responseFromDir = MessageBuffer(ordered = True)\n        dma_cntrl.responseFromDir.slave = ruby_system.network.master\n        dma_cntrl.reqToDirectory = MessageBuffer()\n        dma_cntrl.reqToDirectory.master = ruby_system.network.slave\n\n    all_cntrls = l1_cntrl_nodes + \\\n                 l2_cntrl_nodes + \\\n                 dir_cntrl_nodes + \\\n                 dma_cntrl_nodes\n\n    # Create the io controller and the sequencer\n    if full_system:\n        io_seq = DMASequencer(version=len(dma_ports), ruby_system=ruby_system)\n        ruby_system._io_port = io_seq\n        io_controller = DMA_Controller(version = len(dma_ports),\n                                       dma_sequencer = io_seq,\n                                       ruby_system = ruby_system)\n        ruby_system.io_controller = io_controller\n\n        # Connect the dma controller to the network\n        io_controller.mandatoryQueue = MessageBuffer()\n        io_controller.responseFromDir = MessageBuffer(ordered = True)\n        io_controller.responseFromDir.slave = ruby_system.network.master\n        io_controller.reqToDirectory = MessageBuffer()\n        io_controller.reqToDirectory.master = ruby_system.network.slave\n\n        all_cntrls = all_cntrls + [io_controller]\n\n\n    ruby_system.network.number_of_virtual_networks = 6\n    topology = create_topology(all_cntrls, options)\n    return (cpu_sequencers, mem_dir_cntrl_nodes, topology)\n", "meta": {"content_hash": "f3058165e405a8884a4f14cb836d1702", "timestamp": "", "source": "github", "line_count": 242, "max_line_length": 82, "avg_line_length": 45.31818181818182, "alnum_prop": 0.6108324974924775, "repo_name": "TUD-OS/gem5-dtu", "id": "94a518b2afffe83f01a3c223f906c40e500dc6e5", "size": "12597", "binary": false, "copies": "2", "ref": "refs/heads/dtu-mmu", "path": "configs/ruby/MOESI_CMP_token.py", "mode": "33188", "license": "bsd-3-clause", "language": [{"name": "Assembly", "bytes": "648342"}, {"name": "Awk", "bytes": "3386"}, {"name": "C", "bytes": "1717604"}, {"name": "C++", "bytes": "35149040"}, {"name": "CMake", "bytes": "79529"}, {"name": "Emacs Lisp", "bytes": "1969"}, {"name": "Forth", "bytes": "15790"}, {"name": "HTML", "bytes": "136898"}, {"name": "Java", "bytes": "3179"}, {"name": "M4", "bytes": "75007"}, {"name": "Makefile", "bytes": "68265"}, {"name": "Objective-C", "bytes": "24714"}, {"name": "Perl", "bytes": "33696"}, {"name": "Python", "bytes": "6073714"}, {"name": "Roff", "bytes": "8783"}, {"name": "SWIG", "bytes": "173"}, {"name": "Scala", "bytes": "14236"}, {"name": "Shell", "bytes": "101649"}, {"name": "VBA", "bytes": "2884"}, {"name": "Vim Script", "bytes": "4335"}, {"name": "sed", "bytes": "3927"}]}}
{"text": "namespace AngleSharp.Html.Dom\n{\n    using AngleSharp.Attributes;\n    using System;\n\n    /// <summary>\n    /// Represents the th HTML element.\n    /// </summary>\n    [DomName(\"HTMLTableHeaderCellElement\")]\n    public interface IHtmlTableHeaderCellElement : IHtmlTableCellElement\n    {\n        /// <summary>\n        /// Gets or sets the scope of the th element.\n        /// </summary>\n        [DomName(\"scope\")]\n        String? Scope { get; set; }\n    }\n}\n", "meta": {"content_hash": "3cffc3b08d4d5d6db87a30fe02702a87", "timestamp": "", "source": "github", "line_count": 18, "max_line_length": 72, "avg_line_length": 25.22222222222222, "alnum_prop": 0.6013215859030837, "repo_name": "AngleSharp/AngleSharp", "id": "807e49b5c1acea7b323b69710760b1740180bbb7", "size": "454", "binary": false, "copies": "1", "ref": "refs/heads/devel", "path": "src/AngleSharp/Html/Dom/IHtmlTableHeaderCellElement.cs", "mode": "33188", "license": "mit", "language": [{"name": "C#", "bytes": "7758647"}, {"name": "HTML", "bytes": "1294302"}, {"name": "JavaScript", "bytes": "75888"}, {"name": "PowerShell", "bytes": "2370"}, {"name": "Shell", "bytes": "2670"}, {"name": "TypeScript", "bytes": "237"}]}}
{"text": "var lastSource = null;\nvar lastOrigin = null;\nwindow.onerror = function(message, url, line, column, error){\n  console.log(\"User script error on line \" + line + \", column \" + column + \": \", error);\n  lastSource.postMessage({\n    type: 'error',\n    message: message,\n    url: url,\n    line: line || 0,\n    column: column || 0,\n  }, lastOrigin);\n}\nwindow.addEventListener('message', receiveMessage, false);\n\nvar concreteDom;\nvar concreteStyles;\nvar concreteScripts;\nvar virtualDom;\nvar virtualStyles;\nvar virtualScripts;\nvar goalStates;\nvar createFailed;\n\nvar allowedOrigins = [\n    /^https?:\\/\\/(.*\\.)?codecombat\\.com$/,\n    /^https?:\\/\\/localhost:[\\d]+$/, // For local development\n    /^https?:\\/\\/10.0.2.2:[\\d]+$/, // For local virtual machines\n    /^https?:\\/\\/coco\\.code\\.ninja$/,\n    /^https?:\\/\\/.*codecombat-staging-codecombat\\.runnableapp\\.com$/,\n    /^https?:\\/\\/(.*\\.)?koudashijie\\.com$/ // For china infrastructure\n];\n\nfunction receiveMessage(event) {\n    var origin = event.origin || event.originalEvent.origin; // For Chrome, the origin property is in the event.originalEvent object.\n    var allowed = false;\n    allowedOrigins.forEach(function(pattern) {\n        allowed = allowed || pattern.test(origin);\n    });\n    if (!allowed) {\n        console.log('Ignoring message from bad origin:', origin);\n        return;\n    }\n    lastOrigin = origin;\n    var data = event.data;\n    var source = lastSource = event.source;\n    switch (data.type) {\n    case 'create':\n        create(_.pick(data, 'dom', 'styles', 'scripts'));\n        checkGoals(data.goals, source, origin);\n        $('body').first().off('click', checkRememberedGoals);\n        $('body').first().on('click', checkRememberedGoals);\n        break;\n    case 'update':\n        if (virtualDom && !createFailed)\n            update(_.pick(data, 'dom', 'styles', 'scripts'));\n        else\n            create(_.pick(data, 'dom', 'styles', 'scripts'));\n        checkGoals(data.goals, source, origin);\n        break;\n    case 'highlight-css-selector':\n        $('*').css('box-shadow', '');\n        $(data.selector).css('box-shadow', 'inset 0 0 2px 2px rgba(255, 255, 0, 1.0), 0 0 2px 2px rgba(255, 255, 0, 1.0)');\n        break;\n    case 'log':\n        console.log(data.text);\n        break;\n    default:\n        console.log('Unknown message type:', data.type);\n    }\n}\n\nfunction create(options) {\n    try {\n        virtualDom = options.dom;\n        virtualStyles = options.styles;\n        virtualScripts = options.scripts;\n        concreteDom = deku.dom.create(virtualDom);\n        concreteStyles = deku.dom.create(virtualStyles);\n        concreteScripts = deku.dom.create(virtualScripts);\n        // TODO: :after elements don't seem to work? (:before do)\n        $('body').first().empty().append(concreteDom);\n        replaceNodes('[for=\"player-styles\"]', unwrapConcreteNodes(concreteStyles));\n        replaceNodes('[for=\"player-scripts\"]', unwrapConcreteNodes(concreteScripts));\n        createFailed = false;\n    } catch(e) {\n        createFailed = true;\n        $('.loading-message').addClass('hidden')\n        $('.loading-error').removeClass('hidden')\n        const errPos = parseStackTrace(e.stack);\n        lastSource.postMessage({\n          type: 'error',\n          message: e.name+\": \"+e.message,\n          line: errPos.line,\n          column: errPos.column,\n        }, lastOrigin);\n    }\n}\n\nfunction parseStackTrace(trace) {\n    const lines = trace.split('\\n')\n    const regexes = [\n      /.*?at .*? \\(eval at globalEval.*?\\).*?,.*?(\\d+):(\\d+)\\)$/, // Chrome stacktrace formatting\n      /@.*eval:(\\d+):(\\d+)$/, // Firefox stacktrace formatting\n      /at eval code \\(eval code:(\\d+):(\\d+)\\)$/, // Internet Explorer stacktrace formatting\n      // Safari doesn't include line numbers for eval in stack trace\n    ]\n    var matchedLine;\n    for (var i = 0; i < regexes.length; i++) {\n        var regex = regexes[i];\n        matchedLine = _.find(lines, function(line) {\n            return regex.test(line)\n        })\n        if (!matchedLine) continue;\n        const match = matchedLine.match(regex);\n        return {\n            line: Number(match[1]),\n            column: Number(match[2]),\n        }\n    }\n    if (!matchedLine) return { line: 0, column: 0 };\n}\n\nfunction unwrapConcreteNodes(wrappedNodes) {\n    return wrappedNodes.children;\n}\n\nfunction replaceNodes(selector, newNodes){\n    var $newNodes = $(newNodes).clone();\n    $(selector + ':not(:first)').remove();\n    \n    var firstNode = $(selector).first();\n    $newNodes.attr('for', firstNode.attr('for'))\n    \n    // Workaround for an IE bug where style nodes created by Deku aren't read\n    // Resetting innerText strips the newlines from it\n    var recreatedNodes = $newNodes.toArray();\n    recreatedNodes.forEach(function(node){\n      node.innerHTML = node.innerHTML.trim();\n    })\n\n    var newFirstNode = recreatedNodes[0];\n    firstNode.replaceWith(newFirstNode);\n    \n    $(newFirstNode).after(_.tail(recreatedNodes));\n}\n\nfunction update(options) {\n    var dom = options.dom;\n    var styles = options.styles;\n    var scripts = options.scripts;\n    function dispatch() {}  // Might want to do something here in the future\n    var context = {};  // Might want to use this to send shared state to every component\n\n    var domChanges = deku.diff.diffNode(virtualDom, dom);\n    domChanges.reduce(deku.dom.update(dispatch, context), concreteDom);  // Rerender\n\n    // var scriptChanges = deku.diff.diffNode(virtualScripts, scripts);\n    // scriptChanges.reduce(deku.dom.update(dispatch, context), concreteScripts);  // Rerender\n    // replaceNodes('[for=\"player-scripts\"]', unwrapConcreteNodes(concreteScripts));\n\n    var styleChanges = deku.diff.diffNode(virtualStyles, styles);\n    styleChanges.reduce(deku.dom.update(dispatch, context), concreteStyles);  // Rerender\n    replaceNodes('[for=\"player-styles\"]', unwrapConcreteNodes(concreteStyles));\n\n    virtualDom = dom;\n    virtualStyles = styles;\n    virtualScripts = scripts;\n}\n\nvar lastGoalArgs = [];\nfunction checkRememberedGoals() {\n    checkGoals.apply(this, lastGoalArgs);\n}\n\nfunction checkGoals(goals, source, origin) {\n    lastGoalArgs = [goals, source, origin]; // Memoize for checkRememberedGoals\n    // Check right now and also in one second, since our 1-second CSS transition might be affecting things until it is done.\n    doCheckGoals(goals, source, origin);\n    _.delay(function() { doCheckGoals(goals, source, origin); }, 1001);\n}\n\nfunction doCheckGoals(goals, source, origin) {\n    var newGoalStates = {};\n    var overallSuccess = true;\n    goals.forEach(function(goal) {\n        var $result = $(goal.html.selector);\n        //console.log('ran selector', goal.html.selector, 'to find element(s)', $result);\n        var success = true;\n        goal.html.valueChecks.forEach(function(check) {\n            //console.log(' ... and should make sure that the value of', check.eventProps, 'is', _.omit(check, 'eventProps'), '?', matchesCheck($result, check))\n            success = success && matchesCheck($result, check);\n        });\n        overallSuccess = overallSuccess && success;\n        newGoalStates[goal.id] = {status: success ? 'success' : 'incomplete'};  // No 'failure' state\n    });\n    if (!_.isEqual(newGoalStates, goalStates)) {\n        goalStates = newGoalStates;\n        var overallStatus = overallSuccess ? 'success' : null;  // Can't really get to 'failure', just 'incomplete', which is represented by null here\n        source.postMessage({type: 'goals-updated', goalStates: goalStates, overallStatus: overallStatus}, origin);\n    }\n}\n\nfunction downTheChain(obj, keyChain) {\n    if (!obj)\n        return null;\n    if (!_.isArray(keyChain))\n        return obj[keyChain];\n    var value = obj;\n    while (keyChain.length && value) {\n        if (keyChain[0].match(/\\(.*\\)$/)) {\n            var args, argsString = keyChain[0].match(/\\((.*)\\)$/)[1];\n            if (argsString)\n                args = eval(argsString).split(/, ?/g).filter(function(x) { return x !== ''; });  // TODO: can/should we avoid eval here?\n            else\n                args = [];\n            value = value[keyChain[0].split('(')[0]].apply(value, args);  // value.text(), value.css('background-color'), etc.\n        }\n        else\n            value = value[keyChain[0]];\n        keyChain = keyChain.slice(1);\n    }\n    return value;\n}\n\nfunction matchesCheck(value, check) {\n    var v = downTheChain(value, check.eventProps);\n    if ((check.equalTo != null) && v !== check.equalTo) {\n        return false;\n    }\n    if ((check.notEqualTo != null) && v === check.notEqualTo) {\n        return false;\n    }\n    if ((check.greaterThan != null) && !(v > check.greaterThan)) {\n        return false;\n    }\n    if ((check.greaterThanOrEqualTo != null) && !(v >= check.greaterThanOrEqualTo)) {\n        return false;\n    }\n    if ((check.lessThan != null) && !(v < check.lessThan)) {\n        return false;\n    }\n    if ((check.lessThanOrEqualTo != null) && !(v <= check.lessThanOrEqualTo)) {\n        return false;\n    }\n    if ((check.containingString != null) && (!v || v.search(check.containingString) === -1)) {\n        return false;\n    }\n    if ((check.notContainingString != null) && (v != null ? v.search(check.notContainingString) : void 0) !== -1) {\n        return false;\n    }\n    if ((check.containingRegexp != null) && (!v || v.search(new RegExp(check.containingRegexp)) === -1)) {\n        return false;\n    }\n    if ((check.notContainingRegexp != null) && (v != null ? v.search(new RegExp(check.notContainingRegexp)) : void 0) !== -1) {\n        return false;\n    }\n    return true;\n}\n", "meta": {"content_hash": "34a8d2ae0087900974d48a09932bcdf9", "timestamp": "", "source": "github", "line_count": 258, "max_line_length": 160, "avg_line_length": 37.093023255813954, "alnum_prop": 0.6125391849529781, "repo_name": "jeremiahyan/codecombat", "id": "402d1f37a29bd6630d931691b358647ecbb9a579", "size": "9682", "binary": false, "copies": "3", "ref": "refs/heads/master", "path": "app/assets/javascripts/web-dev-listener.js", "mode": "33188", "license": "mit", "language": [{"name": "Batchfile", "bytes": "277"}, {"name": "CSS", "bytes": "288577"}, {"name": "CoffeeScript", "bytes": "8736253"}, {"name": "HTML", "bytes": "514858"}, {"name": "JavaScript", "bytes": "396973"}, {"name": "Python", "bytes": "51092"}, {"name": "Shell", "bytes": "3136"}]}}
{"text": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <title>ext-lib: Not compatible</title>\n    <link rel=\"shortcut icon\" type=\"image/png\" href=\"../../../../../favicon.png\" />\n    <link href=\"../../../../../bootstrap.min.css\" rel=\"stylesheet\">\n    <link href=\"../../../../../bootstrap-custom.css\" rel=\"stylesheet\">\n    <link href=\"//maxcdn.bootstrapcdn.com/font-awesome/4.2.0/css/font-awesome.min.css\" rel=\"stylesheet\">\n    <script src=\"../../../../../moment.min.js\"></script>\n    <!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries -->\n    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->\n    <!--[if lt IE 9]>\n      <script src=\"https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js\"></script>\n      <script src=\"https://oss.maxcdn.com/respond/1.4.2/respond.min.js\"></script>\n    <![endif]-->\n  </head>\n  <body>\n    <div class=\"container\">\n      <div class=\"navbar navbar-default\" role=\"navigation\">\n        <div class=\"container-fluid\">\n          <div class=\"navbar-header\">\n            <a class=\"navbar-brand\" href=\"../../../../..\"><i class=\"fa fa-lg fa-flag-checkered\"></i> Coq bench</a>\n          </div>\n          <div id=\"navbar\" class=\"collapse navbar-collapse\">\n            <ul class=\"nav navbar-nav\">\n              <li><a href=\"../..\">clean / released</a></li>\n              <li class=\"active\"><a href=\"\">8.13.0 / ext-lib - 0.9.0~beta3</a></li>\n            </ul>\n          </div>\n        </div>\n      </div>\n      <div class=\"article\">\n        <div class=\"row\">\n          <div class=\"col-md-12\">\n            <a href=\"../..\">\u00ab Up</a>\n            <h1>\n              ext-lib\n              <small>\n                0.9.0~beta3\n                <span class=\"label label-info\">Not compatible</span>\n              </small>\n            </h1>\n            <p><em><script>document.write(moment(\"2021-04-08 21:07:48 +0000\", \"YYYY-MM-DD HH:mm:ss Z\").fromNow());</script> (2021-04-08 21:07:48 UTC)</em><p>\n            <h2>Context</h2>\n            <pre># Packages matching: installed\n# Name              # Installed # Synopsis\nbase-bigarray       base\nbase-threads        base\nbase-unix           base\nconf-findutils      1           Virtual package relying on findutils\nconf-gmp            3           Virtual package relying on a GMP lib system installation\ncoq                 8.13.0      Formal proof management system\nnum                 1.4         The legacy Num library for arbitrary-precision integer and rational arithmetic\nocaml               4.10.1      The OCaml compiler (virtual package)\nocaml-base-compiler 4.10.1      Official release 4.10.1\nocaml-config        1           OCaml Switch Configuration\nocamlfind           1.9.1       A library manager for OCaml\nzarith              1.12        Implements arithmetic and logical operations over arbitrary-precision integers\n# opam file:\nopam-version: &quot;2.0&quot;\nmaintainer: &quot;matthieu.sozeau@inria.fr&quot;\nhomepage: &quot;https://github.com/coq-community/coq-ext-lib&quot;\ndev-repo: &quot;git+https://github.com/coq-community/coq-ext-lib.git#8.5&quot;\nbug-reports: &quot;https://github.com/coq-community/coq-ext-lib/issues&quot;\nauthors: [&quot;Gregory Malecha&quot;]\nlicense: &quot;BSD-2-Clause-FreeBSD&quot;\nbuild: [\n  [make &quot;-j%{jobs}%&quot;]\n]\ninstall: [\n  [make &quot;install&quot;]\n]\nremove: [&quot;rm&quot; &quot;-R&quot; &quot;%{lib}%/coq/user-contrib/ExtLib&quot;]\ndepends: [\n  &quot;ocaml&quot;\n  &quot;coq&quot; {&gt;= &quot;8.5~beta3&quot; &amp; &lt; &quot;8.5.1&quot;}\n]\nsynopsis: &quot;A library of Coq definitions, theorems, and tactics&quot;\nflags: light-uninstall\nurl {\n  src:\n    &quot;https://github.com/coq-community/coq-ext-lib/archive/v0.9.0-beta3.tar.gz&quot;\n  checksum: &quot;md5=bee5c49182f8ccfc9c55bccc1bf892e7&quot;\n}\n</pre>\n            <h2>Lint</h2>\n            <dl class=\"dl-horizontal\">\n              <dt>Command</dt>\n              <dd><code>true</code></dd>\n              <dt>Return code</dt>\n              <dd>0</dd>\n            </dl>\n            <h2>Dry install</h2>\n            <p>Dry install with the current Coq version:</p>\n            <dl class=\"dl-horizontal\">\n              <dt>Command</dt>\n              <dd><code>opam install -y --show-action coq-ext-lib.0.9.0~beta3 coq.8.13.0</code></dd>\n              <dt>Return code</dt>\n              <dd>5120</dd>\n              <dt>Output</dt>\n              <dd><pre>[NOTE] Package coq is already installed (current version is 8.13.0).\nThe following dependencies couldn&#39;t be met:\n  - coq-ext-lib -&gt; coq &lt; 8.5.1 -&gt; ocaml &lt; 4.06.0\n      base of this switch (use `--unlock-base&#39; to force)\nNo solution found, exiting\n</pre></dd>\n            </dl>\n            <p>Dry install without Coq/switch base, to test if the problem was incompatibility with the current Coq/OCaml version:</p>\n            <dl class=\"dl-horizontal\">\n              <dt>Command</dt>\n              <dd><code>opam remove -y coq; opam install -y --show-action --unlock-base coq-ext-lib.0.9.0~beta3</code></dd>\n              <dt>Return code</dt>\n              <dd>0</dd>\n            </dl>\n            <h2>Install dependencies</h2>\n            <dl class=\"dl-horizontal\">\n              <dt>Command</dt>\n              <dd><code>true</code></dd>\n              <dt>Return code</dt>\n              <dd>0</dd>\n              <dt>Duration</dt>\n              <dd>0 s</dd>\n            </dl>\n            <h2>Install</h2>\n            <dl class=\"dl-horizontal\">\n              <dt>Command</dt>\n              <dd><code>true</code></dd>\n              <dt>Return code</dt>\n              <dd>0</dd>\n              <dt>Duration</dt>\n              <dd>0 s</dd>\n            </dl>\n            <h2>Installation size</h2>\n            <p>No files were installed.</p>\n            <h2>Uninstall</h2>\n            <dl class=\"dl-horizontal\">\n              <dt>Command</dt>\n              <dd><code>true</code></dd>\n              <dt>Return code</dt>\n              <dd>0</dd>\n              <dt>Missing removes</dt>\n              <dd>\n                none\n              </dd>\n              <dt>Wrong removes</dt>\n              <dd>\n                none\n              </dd>\n            </dl>\n          </div>\n        </div>\n      </div>\n      <hr/>\n      <div class=\"footer\">\n        <p class=\"text-center\">\n          <small>Sources are on <a href=\"https://github.com/coq-bench\">GitHub</a>. \u00a9 Guillaume Claret.</small>\n        </p>\n      </div>\n    </div>\n    <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js\"></script>\n    <script src=\"../../../../../bootstrap.min.js\"></script>\n  </body>\n</html>\n", "meta": {"content_hash": "cb75ec57c81fb2696e4b6958f59eea7d", "timestamp": "", "source": "github", "line_count": 165, "max_line_length": 157, "avg_line_length": 40.45454545454545, "alnum_prop": 0.532434456928839, "repo_name": "coq-bench/coq-bench.github.io", "id": "0a0d1ad4be8e6b1b58f6805aec2f86c7e72ce0ab", "size": "6677", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "clean/Linux-x86_64-4.10.1-2.0.6/released/8.13.0/ext-lib/0.9.0~beta3.html", "mode": "33188", "license": "mit", "language": []}}
{"text": "package org.alfac.examples.phonebook.model;\n\n/**\n * @author ivan.\n */\npublic final class OrganizationTable {\n\n    public static final String TABLE_NAME = \"organization\";\n\n    public static final String ID_GENERATOR_NAME = \"Organization.tableGenerator\";\n\n    public static class ColumnName {\n        public static final String ID = \"personid\";\n\n        public static final String NAME = \"firstname\";\n\n        public static final String ACRONYM = \"middlename\";\n\n        public static final String FOUNDATION_DAY = \"birthday\";\n    }\n\n    public static class ColumnLength {\n\n        public static final int NAME = 100;\n\n        public static final int ACRONYM = 30;\n    }\n\n    private OrganizationTable() {\n    }\n}\n", "meta": {"content_hash": "e644ebd6a410f0ab7f9bd19c3ea02b5c", "timestamp": "", "source": "github", "line_count": 31, "max_line_length": 81, "avg_line_length": 22.93548387096774, "alnum_prop": 0.6708860759493671, "repo_name": "lord-breetai/examples", "id": "a29ba006fdd740e92e5c5db8777ba5084272f210", "size": "711", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "phonebook-jpa/src/main/java/org/alfac/examples/phonebook/model/OrganizationTable.java", "mode": "33188", "license": "apache-2.0", "language": [{"name": "Java", "bytes": "16168"}]}}
{"text": "[![Build Status](https://img.shields.io/travis/manudwarf/sterogrid.svg?style=flat-square)](https://travis-ci.org/manudwarf/sterogrid)\n[![Coverage Status](https://img.shields.io/coveralls/manudwarf/sterogrid.svg?style=flat-square)](https://coveralls.io/github/manudwarf/sterogrid)\n![npm](https://img.shields.io/npm/v/sterogrid.svg?style=flat-square)\n\nPlain Javascript Grid, on Steroids\n\n### Getting Started\n\n```\n$ npm install sterogrid --save\n```\n\nInclude this file to your `index.html`:\n\n```html\n<script src=\"node_modules/sterogrid/sterogrid.js\"></script>\n\n<div id=\"here-goes-the-grid\"></div>\n```\n\nAnd in your `app.js`:\n\n```javascript\nlet options = {\n  columns: [{\n    field: 'thumbnail',\n    name: 'Thumbnail'\n  }, {\n    field: 'title',\n    name: 'Title',\n    width: 250,\n    cellFilter: (title, film) => `${title} (${film.year})`\n  }, {\n    field: 'rating',\n    name: 'Rating'\n  }],\n\n  data: [{\n    title: 'The Shawshank Redemption',\n    rating: 9.2,\n    year: 1994\n  }, {\n    title: 'The Godfather',\n    rating: 9.2,\n    year: 1972\n  }]\n};\n\nnew SteroGrid(document.getElementById('here-goes-your-grid'), options);\n```\n", "meta": {"content_hash": "410fa2aeea38fa29d04cd71e9b02be65", "timestamp": "", "source": "github", "line_count": 50, "max_line_length": 145, "avg_line_length": 22.4, "alnum_prop": 0.6473214285714286, "repo_name": "manudwarf/sterogrid", "id": "83edc532db9bb2e89cb946815525c869f4b25a2b", "size": "1153", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "README.md", "mode": "33188", "license": "apache-2.0", "language": [{"name": "CSS", "bytes": "1001"}, {"name": "HTML", "bytes": "2093"}, {"name": "JavaScript", "bytes": "3687"}, {"name": "TypeScript", "bytes": "33577"}]}}
{"text": "layout: post\ndate: '2015-09-14'\ntitle: \"Allure Bridals 8919 Satin A-line Wedding Dress\"\ncategory: Allure Bridals\ntags: [Allure Bridals]\n---\n### Allure Bridals 8919 Satin A-line Wedding Dress\nJust **$351.99**\n### \n\nA simple and understated design in rich satin. The strapless bodice is slightly scooped, ruched and has a natural waistline. The gown is completed with a back bow detail and full A-line skirt. Available in sizes 2-32.\n<a href=\"https://www.eudances.com/en/allure-bridals/137-allure-bridals-8919-satin-a-line-wedding-dress.html\"><img src=\"//www.eudances.com/444-thickbox_default/allure-bridals-8919-satin-a-line-wedding-dress.jpg\" alt=\"Allure Bridals 8919 Satin A-line Wedding Dress\" style=\"width:100%;\" /></a>\n\n<!-- break --><a href=\"https://www.eudances.com/en/allure-bridals/137-allure-bridals-8919-satin-a-line-wedding-dress.html\"><img src=\"//www.eudances.com/443-thickbox_default/allure-bridals-8919-satin-a-line-wedding-dress.jpg\" alt=\"Allure Bridals 8919 Satin A-line Wedding Dress\" style=\"width:100%;\" /></a>\nBuy it: [https://www.eudances.com/en/allure-bridals/137-allure-bridals-8919-satin-a-line-wedding-dress.html](https://www.eudances.com/en/allure-bridals/137-allure-bridals-8919-satin-a-line-wedding-dress.html)\n", "meta": {"content_hash": "d9c0c77301baa5768d8b5100052d5b55", "timestamp": "", "source": "github", "line_count": 15, "max_line_length": 304, "avg_line_length": 82.53333333333333, "alnum_prop": 0.7576736672051696, "repo_name": "lastgown/lastgown.github.io", "id": "6e8f5c60a3844fd43cfaa20b4ad0ea977c125fce", "size": "1242", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "_posts/2015-09-14-Allure-Bridals-8919-Satin-Aline-Wedding-Dress.md", "mode": "33261", "license": "mit", "language": [{"name": "CSS", "bytes": "83876"}, {"name": "HTML", "bytes": "14755"}, {"name": "Ruby", "bytes": "897"}]}}
{"text": "/**\n * @license AngularJS v1.0.7\n * (c) 2010-2012 Google, Inc. http://angularjs.org\n * License: MIT\n */\n(function(window, document, undefined) {\n    'use strict';\n\n////////////////////////////////////\n\n    /**\n     * @ngdoc function\n     * @name angular.lowercase\n     * @function\n     *\n     * @description Converts the specified string to lowercase.\n     * @param {string} string String to be converted to lowercase.\n     * @returns {string} Lowercased string.\n     */\n    var lowercase = function(string){return isString(string) ? string.toLowerCase() : string;};\n\n\n    /**\n     * @ngdoc function\n     * @name angular.uppercase\n     * @function\n     *\n     * @description Converts the specified string to uppercase.\n     * @param {string} string String to be converted to uppercase.\n     * @returns {string} Uppercased string.\n     */\n    var uppercase = function(string){return isString(string) ? string.toUpperCase() : string;};\n\n\n    var manualLowercase = function(s) {\n        return isString(s)\n            ? s.replace(/[A-Z]/g, function(ch) {return String.fromCharCode(ch.charCodeAt(0) | 32);})\n            : s;\n    };\n    var manualUppercase = function(s) {\n        return isString(s)\n            ? s.replace(/[a-z]/g, function(ch) {return String.fromCharCode(ch.charCodeAt(0) & ~32);})\n            : s;\n    };\n\n\n// String#toLowerCase and String#toUpperCase don't produce correct results in browsers with Turkish\n// locale, for this reason we need to detect this case and redefine lowercase/uppercase methods\n// with correct but slower alternatives.\n    if ('i' !== 'I'.toLowerCase()) {\n        lowercase = manualLowercase;\n        uppercase = manualUppercase;\n    }\n\n\n    var /** holds major version number for IE or NaN for real browsers */\n            msie              = int((/msie (\\d+)/.exec(lowercase(navigator.userAgent)) || [])[1]),\n        jqLite,           // delay binding since jQuery could be loaded after us.\n        jQuery,           // delay binding\n        slice             = [].slice,\n        push              = [].push,\n        toString          = Object.prototype.toString,\n\n        /** @name angular */\n            angular           = window.angular || (window.angular = {}),\n        angularModule,\n        nodeName_,\n        uid               = ['0', '0', '0'];\n\n\n    /**\n     * @private\n     * @param {*} obj\n     * @return {boolean} Returns true if `obj` is an array or array-like object (NodeList, Arguments, ...)\n     */\n    function isArrayLike(obj) {\n        if (!obj || (typeof obj.length !== 'number')) return false;\n\n        // We have on object which has length property. Should we treat it as array?\n        if (typeof obj.hasOwnProperty != 'function' &&\n            typeof obj.constructor != 'function') {\n            // This is here for IE8: it is a bogus object treat it as array;\n            return true;\n        } else  {\n            return obj instanceof JQLite ||                      // JQLite\n                (jQuery && obj instanceof jQuery) ||          // jQuery\n                toString.call(obj) !== '[object Object]' ||   // some browser native object\n                typeof obj.callee === 'function';              // arguments (on IE8 looks like regular obj)\n        }\n    }\n\n\n    /**\n     * @ngdoc function\n     * @name angular.forEach\n     * @function\n     *\n     * @description\n     * Invokes the `iterator` function once for each item in `obj` collection, which can be either an\n     * object or an array. The `iterator` function is invoked with `iterator(value, key)`, where `value`\n     * is the value of an object property or an array element and `key` is the object property key or\n     * array element index. Specifying a `context` for the function is optional.\n     *\n     * Note: this function was previously known as `angular.foreach`.\n     *\n     <pre>\n     var values = {name: 'misko', gender: 'male'};\n     var log = [];\n     angular.forEach(values, function(value, key){\n       this.push(key + ': ' + value);\n     }, log);\n     expect(log).toEqual(['name: misko', 'gender:male']);\n     </pre>\n     *\n     * @param {Object|Array} obj Object to iterate over.\n     * @param {Function} iterator Iterator function.\n     * @param {Object=} context Object to become context (`this`) for the iterator function.\n     * @returns {Object|Array} Reference to `obj`.\n     */\n    function forEach(obj, iterator, context) {\n        var key;\n        if (obj) {\n            if (isFunction(obj)){\n                for (key in obj) {\n                    if (key != 'prototype' && key != 'length' && key != 'name' && obj.hasOwnProperty(key)) {\n                        iterator.call(context, obj[key], key);\n                    }\n                }\n            } else if (obj.forEach && obj.forEach !== forEach) {\n                obj.forEach(iterator, context);\n            } else if (isArrayLike(obj)) {\n                for (key = 0; key < obj.length; key++)\n                    iterator.call(context, obj[key], key);\n            } else {\n                for (key in obj) {\n                    if (obj.hasOwnProperty(key)) {\n                        iterator.call(context, obj[key], key);\n                    }\n                }\n            }\n        }\n        return obj;\n    }\n\n    function sortedKeys(obj) {\n        var keys = [];\n        for (var key in obj) {\n            if (obj.hasOwnProperty(key)) {\n                keys.push(key);\n            }\n        }\n        return keys.sort();\n    }\n\n    function forEachSorted(obj, iterator, context) {\n        var keys = sortedKeys(obj);\n        for ( var i = 0; i < keys.length; i++) {\n            iterator.call(context, obj[keys[i]], keys[i]);\n        }\n        return keys;\n    }\n\n\n    /**\n     * when using forEach the params are value, key, but it is often useful to have key, value.\n     * @param {function(string, *)} iteratorFn\n     * @returns {function(*, string)}\n     */\n    function reverseParams(iteratorFn) {\n        return function(value, key) { iteratorFn(key, value) };\n    }\n\n    /**\n     * A consistent way of creating unique IDs in angular. The ID is a sequence of alpha numeric\n     * characters such as '012ABC'. The reason why we are not using simply a number counter is that\n     * the number string gets longer over time, and it can also overflow, where as the nextId\n     * will grow much slower, it is a string, and it will never overflow.\n     *\n     * @returns an unique alpha-numeric string\n     */\n    function nextUid() {\n        var index = uid.length;\n        var digit;\n\n        while(index) {\n            index--;\n            digit = uid[index].charCodeAt(0);\n            if (digit == 57 /*'9'*/) {\n                uid[index] = 'A';\n                return uid.join('');\n            }\n            if (digit == 90  /*'Z'*/) {\n                uid[index] = '0';\n            } else {\n                uid[index] = String.fromCharCode(digit + 1);\n                return uid.join('');\n            }\n        }\n        uid.unshift('0');\n        return uid.join('');\n    }\n\n\n    /**\n     * Set or clear the hashkey for an object.\n     * @param obj object\n     * @param h the hashkey (!truthy to delete the hashkey)\n     */\n    function setHashKey(obj, h) {\n        if (h) {\n            obj.$$hashKey = h;\n        }\n        else {\n            delete obj.$$hashKey;\n        }\n    }\n\n    /**\n     * @ngdoc function\n     * @name angular.extend\n     * @function\n     *\n     * @description\n     * Extends the destination object `dst` by copying all of the properties from the `src` object(s)\n     * to `dst`. You can specify multiple `src` objects.\n     *\n     * @param {Object} dst Destination object.\n     * @param {...Object} src Source object(s).\n     * @returns {Object} Reference to `dst`.\n     */\n    function extend(dst) {\n        var h = dst.$$hashKey;\n        forEach(arguments, function(obj){\n            if (obj !== dst) {\n                forEach(obj, function(value, key){\n                    dst[key] = value;\n                });\n            }\n        });\n\n        setHashKey(dst,h);\n        return dst;\n    }\n\n    function int(str) {\n        return parseInt(str, 10);\n    }\n\n\n    function inherit(parent, extra) {\n        return extend(new (extend(function() {}, {prototype:parent}))(), extra);\n    }\n\n\n    /**\n     * @ngdoc function\n     * @name angular.noop\n     * @function\n     *\n     * @description\n     * A function that performs no operations. This function can be useful when writing code in the\n     * functional style.\n     <pre>\n     function foo(callback) {\n       var result = calculateResult();\n       (callback || angular.noop)(result);\n     }\n     </pre>\n     */\n    function noop() {}\n    noop.$inject = [];\n\n\n    /**\n     * @ngdoc function\n     * @name angular.identity\n     * @function\n     *\n     * @description\n     * A function that returns its first argument. This function is useful when writing code in the\n     * functional style.\n     *\n     <pre>\n     function transformer(transformationFn, value) {\n       return (transformationFn || identity)(value);\n     };\n     </pre>\n     */\n    function identity($) {return $;}\n    identity.$inject = [];\n\n\n    function valueFn(value) {return function() {return value;};}\n\n    /**\n     * @ngdoc function\n     * @name angular.isUndefined\n     * @function\n     *\n     * @description\n     * Determines if a reference is undefined.\n     *\n     * @param {*} value Reference to check.\n     * @returns {boolean} True if `value` is undefined.\n     */\n    function isUndefined(value){return typeof value == 'undefined';}\n\n\n    /**\n     * @ngdoc function\n     * @name angular.isDefined\n     * @function\n     *\n     * @description\n     * Determines if a reference is defined.\n     *\n     * @param {*} value Reference to check.\n     * @returns {boolean} True if `value` is defined.\n     */\n    function isDefined(value){return typeof value != 'undefined';}\n\n\n    /**\n     * @ngdoc function\n     * @name angular.isObject\n     * @function\n     *\n     * @description\n     * Determines if a reference is an `Object`. Unlike `typeof` in JavaScript, `null`s are not\n     * considered to be objects.\n     *\n     * @param {*} value Reference to check.\n     * @returns {boolean} True if `value` is an `Object` but not `null`.\n     */\n    function isObject(value){return value != null && typeof value == 'object';}\n\n\n    /**\n     * @ngdoc function\n     * @name angular.isString\n     * @function\n     *\n     * @description\n     * Determines if a reference is a `String`.\n     *\n     * @param {*} value Reference to check.\n     * @returns {boolean} True if `value` is a `String`.\n     */\n    function isString(value){return typeof value == 'string';}\n\n\n    /**\n     * @ngdoc function\n     * @name angular.isNumber\n     * @function\n     *\n     * @description\n     * Determines if a reference is a `Number`.\n     *\n     * @param {*} value Reference to check.\n     * @returns {boolean} True if `value` is a `Number`.\n     */\n    function isNumber(value){return typeof value == 'number';}\n\n\n    /**\n     * @ngdoc function\n     * @name angular.isDate\n     * @function\n     *\n     * @description\n     * Determines if a value is a date.\n     *\n     * @param {*} value Reference to check.\n     * @returns {boolean} True if `value` is a `Date`.\n     */\n    function isDate(value){\n        return toString.apply(value) == '[object Date]';\n    }\n\n\n    /**\n     * @ngdoc function\n     * @name angular.isArray\n     * @function\n     *\n     * @description\n     * Determines if a reference is an `Array`.\n     *\n     * @param {*} value Reference to check.\n     * @returns {boolean} True if `value` is an `Array`.\n     */\n    function isArray(value) {\n        return toString.apply(value) == '[object Array]';\n    }\n\n\n    /**\n     * @ngdoc function\n     * @name angular.isFunction\n     * @function\n     *\n     * @description\n     * Determines if a reference is a `Function`.\n     *\n     * @param {*} value Reference to check.\n     * @returns {boolean} True if `value` is a `Function`.\n     */\n    function isFunction(value){return typeof value == 'function';}\n\n\n    /**\n     * Checks if `obj` is a window object.\n     *\n     * @private\n     * @param {*} obj Object to check\n     * @returns {boolean} True if `obj` is a window obj.\n     */\n    function isWindow(obj) {\n        return obj && obj.document && obj.location && obj.alert && obj.setInterval;\n    }\n\n\n    function isScope(obj) {\n        return obj && obj.$evalAsync && obj.$watch;\n    }\n\n\n    function isFile(obj) {\n        return toString.apply(obj) === '[object File]';\n    }\n\n\n    function isBoolean(value) {\n        return typeof value == 'boolean';\n    }\n\n\n    function trim(value) {\n        return isString(value) ? value.replace(/^\\s*/, '').replace(/\\s*$/, '') : value;\n    }\n\n    /**\n     * @ngdoc function\n     * @name angular.isElement\n     * @function\n     *\n     * @description\n     * Determines if a reference is a DOM element (or wrapped jQuery element).\n     *\n     * @param {*} value Reference to check.\n     * @returns {boolean} True if `value` is a DOM element (or wrapped jQuery element).\n     */\n    function isElement(node) {\n        return node &&\n            (node.nodeName  // we are a direct element\n                || (node.bind && node.find));  // we have a bind and find method part of jQuery API\n    }\n\n    /**\n     * @param str 'key1,key2,...'\n     * @returns {object} in the form of {key1:true, key2:true, ...}\n     */\n    function makeMap(str){\n        var obj = {}, items = str.split(\",\"), i;\n        for ( i = 0; i < items.length; i++ )\n            obj[ items[i] ] = true;\n        return obj;\n    }\n\n\n    if (msie < 9) {\n        nodeName_ = function(element) {\n            element = element.nodeName ? element : element[0];\n            return (element.scopeName && element.scopeName != 'HTML')\n                ? uppercase(element.scopeName + ':' + element.nodeName) : element.nodeName;\n        };\n    } else {\n        nodeName_ = function(element) {\n            return element.nodeName ? element.nodeName : element[0].nodeName;\n        };\n    }\n\n\n    function map(obj, iterator, context) {\n        var results = [];\n        forEach(obj, function(value, index, list) {\n            results.push(iterator.call(context, value, index, list));\n        });\n        return results;\n    }\n\n\n    /**\n     * @description\n     * Determines the number of elements in an array, the number of properties an object has, or\n     * the length of a string.\n     *\n     * Note: This function is used to augment the Object type in Angular expressions. See\n     * {@link angular.Object} for more information about Angular arrays.\n     *\n     * @param {Object|Array|string} obj Object, array, or string to inspect.\n     * @param {boolean} [ownPropsOnly=false] Count only \"own\" properties in an object\n     * @returns {number} The size of `obj` or `0` if `obj` is neither an object nor an array.\n     */\n    function size(obj, ownPropsOnly) {\n        var size = 0, key;\n\n        if (isArray(obj) || isString(obj)) {\n            return obj.length;\n        } else if (isObject(obj)){\n            for (key in obj)\n                if (!ownPropsOnly || obj.hasOwnProperty(key))\n                    size++;\n        }\n\n        return size;\n    }\n\n\n    function includes(array, obj) {\n        return indexOf(array, obj) != -1;\n    }\n\n    function indexOf(array, obj) {\n        if (array.indexOf) return array.indexOf(obj);\n\n        for ( var i = 0; i < array.length; i++) {\n            if (obj === array[i]) return i;\n        }\n        return -1;\n    }\n\n    function arrayRemove(array, value) {\n        var index = indexOf(array, value);\n        if (index >=0)\n            array.splice(index, 1);\n        return value;\n    }\n\n    function isLeafNode (node) {\n        if (node) {\n            switch (node.nodeName) {\n                case \"OPTION\":\n                case \"PRE\":\n                case \"TITLE\":\n                    return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * @ngdoc function\n     * @name angular.copy\n     * @function\n     *\n     * @description\n     * Creates a deep copy of `source`, which should be an object or an array.\n     *\n     * * If no destination is supplied, a copy of the object or array is created.\n     * * If a destination is provided, all of its elements (for array) or properties (for objects)\n     *   are deleted and then all elements/properties from the source are copied to it.\n     * * If  `source` is not an object or array, `source` is returned.\n     *\n     * Note: this function is used to augment the Object type in Angular expressions. See\n     * {@link ng.$filter} for more information about Angular arrays.\n     *\n     * @param {*} source The source that will be used to make a copy.\n     *                   Can be any type, including primitives, `null`, and `undefined`.\n     * @param {(Object|Array)=} destination Destination into which the source is copied. If\n     *     provided, must be of the same type as `source`.\n     * @returns {*} The copy or updated `destination`, if `destination` was specified.\n     */\n    function copy(source, destination){\n        if (isWindow(source) || isScope(source)) throw Error(\"Can't copy Window or Scope\");\n        if (!destination) {\n            destination = source;\n            if (source) {\n                if (isArray(source)) {\n                    destination = copy(source, []);\n                } else if (isDate(source)) {\n                    destination = new Date(source.getTime());\n                } else if (isObject(source)) {\n                    destination = copy(source, {});\n                }\n            }\n        } else {\n            if (source === destination) throw Error(\"Can't copy equivalent objects or arrays\");\n            if (isArray(source)) {\n                destination.length = 0;\n                for ( var i = 0; i < source.length; i++) {\n                    destination.push(copy(source[i]));\n                }\n            } else {\n                var h = destination.$$hashKey;\n                forEach(destination, function(value, key){\n                    delete destination[key];\n                });\n                for ( var key in source) {\n                    destination[key] = copy(source[key]);\n                }\n                setHashKey(destination,h);\n            }\n        }\n        return destination;\n    }\n\n    /**\n     * Create a shallow copy of an object\n     */\n    function shallowCopy(src, dst) {\n        dst = dst || {};\n\n        for(var key in src) {\n            if (src.hasOwnProperty(key) && key.substr(0, 2) !== '$$') {\n                dst[key] = src[key];\n            }\n        }\n\n        return dst;\n    }\n\n\n    /**\n     * @ngdoc function\n     * @name angular.equals\n     * @function\n     *\n     * @description\n     * Determines if two objects or two values are equivalent. Supports value types, arrays and\n     * objects.\n     *\n     * Two objects or values are considered equivalent if at least one of the following is true:\n     *\n     * * Both objects or values pass `===` comparison.\n     * * Both objects or values are of the same type and all of their properties pass `===` comparison.\n     * * Both values are NaN. (In JavasScript, NaN == NaN => false. But we consider two NaN as equal)\n     *\n     * During a property comparision, properties of `function` type and properties with names\n     * that begin with `$` are ignored.\n     *\n     * Scope and DOMWindow objects are being compared only by identify (`===`).\n     *\n     * @param {*} o1 Object or value to compare.\n     * @param {*} o2 Object or value to compare.\n     * @returns {boolean} True if arguments are equal.\n     */\n    function equals(o1, o2) {\n        if (o1 === o2) return true;\n        if (o1 === null || o2 === null) return false;\n        if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN\n        var t1 = typeof o1, t2 = typeof o2, length, key, keySet;\n        if (t1 == t2) {\n            if (t1 == 'object') {\n                if (isArray(o1)) {\n                    if ((length = o1.length) == o2.length) {\n                        for(key=0; key<length; key++) {\n                            if (!equals(o1[key], o2[key])) return false;\n                        }\n                        return true;\n                    }\n                } else if (isDate(o1)) {\n                    return isDate(o2) && o1.getTime() == o2.getTime();\n                } else {\n                    if (isScope(o1) || isScope(o2) || isWindow(o1) || isWindow(o2)) return false;\n                    keySet = {};\n                    for(key in o1) {\n                        if (key.charAt(0) === '$' || isFunction(o1[key])) continue;\n                        if (!equals(o1[key], o2[key])) return false;\n                        keySet[key] = true;\n                    }\n                    for(key in o2) {\n                        if (!keySet[key] &&\n                            key.charAt(0) !== '$' &&\n                            o2[key] !== undefined &&\n                            !isFunction(o2[key])) return false;\n                    }\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n\n    function concat(array1, array2, index) {\n        return array1.concat(slice.call(array2, index));\n    }\n\n    function sliceArgs(args, startIndex) {\n        return slice.call(args, startIndex || 0);\n    }\n\n\n    /**\n     * @ngdoc function\n     * @name angular.bind\n     * @function\n     *\n     * @description\n     * Returns a function which calls function `fn` bound to `self` (`self` becomes the `this` for\n     * `fn`). You can supply optional `args` that are prebound to the function. This feature is also\n     * known as [function currying](http://en.wikipedia.org/wiki/Currying).\n     *\n     * @param {Object} self Context which `fn` should be evaluated in.\n     * @param {function()} fn Function to be bound.\n     * @param {...*} args Optional arguments to be prebound to the `fn` function call.\n     * @returns {function()} Function that wraps the `fn` with all the specified bindings.\n     */\n    function bind(self, fn) {\n        var curryArgs = arguments.length > 2 ? sliceArgs(arguments, 2) : [];\n        if (isFunction(fn) && !(fn instanceof RegExp)) {\n            return curryArgs.length\n                ? function() {\n                return arguments.length\n                    ? fn.apply(self, curryArgs.concat(slice.call(arguments, 0)))\n                    : fn.apply(self, curryArgs);\n            }\n                : function() {\n                return arguments.length\n                    ? fn.apply(self, arguments)\n                    : fn.call(self);\n            };\n        } else {\n            // in IE, native methods are not functions so they cannot be bound (note: they don't need to be)\n            return fn;\n        }\n    }\n\n\n    function toJsonReplacer(key, value) {\n        var val = value;\n\n        if (/^\\$+/.test(key)) {\n            val = undefined;\n        } else if (isWindow(value)) {\n            val = '$WINDOW';\n        } else if (value &&  document === value) {\n            val = '$DOCUMENT';\n        } else if (isScope(value)) {\n            val = '$SCOPE';\n        }\n\n        return val;\n    }\n\n\n    /**\n     * @ngdoc function\n     * @name angular.toJson\n     * @function\n     *\n     * @description\n     * Serializes input into a JSON-formatted string.\n     *\n     * @param {Object|Array|Date|string|number} obj Input to be serialized into JSON.\n     * @param {boolean=} pretty If set to true, the JSON output will contain newlines and whitespace.\n     * @returns {string} Jsonified string representing `obj`.\n     */\n    function toJson(obj, pretty) {\n        return JSON.stringify(obj, toJsonReplacer, pretty ? '  ' : null);\n    }\n\n\n    /**\n     * @ngdoc function\n     * @name angular.fromJson\n     * @function\n     *\n     * @description\n     * Deserializes a JSON string.\n     *\n     * @param {string} json JSON string to deserialize.\n     * @returns {Object|Array|Date|string|number} Deserialized thingy.\n     */\n    function fromJson(json) {\n        return isString(json)\n            ? JSON.parse(json)\n            : json;\n    }\n\n\n    function toBoolean(value) {\n        if (value && value.length !== 0) {\n            var v = lowercase(\"\" + value);\n            value = !(v == 'f' || v == '0' || v == 'false' || v == 'no' || v == 'n' || v == '[]');\n        } else {\n            value = false;\n        }\n        return value;\n    }\n\n    /**\n     * @returns {string} Returns the string representation of the element.\n     */\n    function startingTag(element) {\n        element = jqLite(element).clone();\n        try {\n            // turns out IE does not let you set .html() on elements which\n            // are not allowed to have children. So we just ignore it.\n            element.html('');\n        } catch(e) {}\n        // As Per DOM Standards\n        var TEXT_NODE = 3;\n        var elemHtml = jqLite('<div>').append(element).html();\n        try {\n            return element[0].nodeType === TEXT_NODE ? lowercase(elemHtml) :\n                elemHtml.\n                    match(/^(<[^>]+>)/)[1].\n                    replace(/^<([\\w\\-]+)/, function(match, nodeName) { return '<' + lowercase(nodeName); });\n        } catch(e) {\n            return lowercase(elemHtml);\n        }\n\n    }\n\n\n/////////////////////////////////////////////////\n\n    /**\n     * Parses an escaped url query string into key-value pairs.\n     * @returns Object.<(string|boolean)>\n     */\n    function parseKeyValue(/**string*/keyValue) {\n        var obj = {}, key_value, key;\n        forEach((keyValue || \"\").split('&'), function(keyValue){\n            if (keyValue) {\n                key_value = keyValue.split('=');\n                key = decodeURIComponent(key_value[0]);\n                obj[key] = isDefined(key_value[1]) ? decodeURIComponent(key_value[1]) : true;\n            }\n        });\n        return obj;\n    }\n\n    function toKeyValue(obj) {\n        var parts = [];\n        forEach(obj, function(value, key) {\n            parts.push(encodeUriQuery(key, true) + (value === true ? '' : '=' + encodeUriQuery(value, true)));\n        });\n        return parts.length ? parts.join('&') : '';\n    }\n\n\n    /**\n     * We need our custom method because encodeURIComponent is too agressive and doesn't follow\n     * http://www.ietf.org/rfc/rfc3986.txt with regards to the character set (pchar) allowed in path\n     * segments:\n     *    segment       = *pchar\n     *    pchar         = unreserved / pct-encoded / sub-delims / \":\" / \"@\"\n     *    pct-encoded   = \"%\" HEXDIG HEXDIG\n     *    unreserved    = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\n     *    sub-delims    = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\"\n     *                     / \"*\" / \"+\" / \",\" / \";\" / \"=\"\n     */\n    function encodeUriSegment(val) {\n        return encodeUriQuery(val, true).\n            replace(/%26/gi, '&').\n            replace(/%3D/gi, '=').\n            replace(/%2B/gi, '+');\n    }\n\n\n    /**\n     * This method is intended for encoding *key* or *value* parts of query component. We need a custom\n     * method becuase encodeURIComponent is too agressive and encodes stuff that doesn't have to be\n     * encoded per http://tools.ietf.org/html/rfc3986:\n     *    query       = *( pchar / \"/\" / \"?\" )\n     *    pchar         = unreserved / pct-encoded / sub-delims / \":\" / \"@\"\n     *    unreserved    = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\n     *    pct-encoded   = \"%\" HEXDIG HEXDIG\n     *    sub-delims    = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\"\n     *                     / \"*\" / \"+\" / \",\" / \";\" / \"=\"\n     */\n    function encodeUriQuery(val, pctEncodeSpaces) {\n        return encodeURIComponent(val).\n            replace(/%40/gi, '@').\n            replace(/%3A/gi, ':').\n            replace(/%24/g, '$').\n            replace(/%2C/gi, ',').\n            replace(/%20/g, (pctEncodeSpaces ? '%20' : '+'));\n    }\n\n\n    /**\n     * @ngdoc directive\n     * @name ng.directive:ngApp\n     *\n     * @element ANY\n     * @param {angular.Module} ngApp an optional application\n     *   {@link angular.module module} name to load.\n     *\n     * @description\n     *\n     * Use this directive to auto-bootstrap an application. Only\n     * one directive can be used per HTML document. The directive\n     * designates the root of the application and is typically placed\n     * at the root of the page.\n     *\n     * In the example below if the `ngApp` directive would not be placed\n     * on the `html` element then the document would not be compiled\n     * and the `{{ 1+2 }}` would not be resolved to `3`.\n     *\n     * `ngApp` is the easiest way to bootstrap an application.\n     *\n     <doc:example>\n     <doc:source>\n     I can add: 1 + 2 =  {{ 1+2 }}\n     </doc:source>\n     </doc:example>\n     *\n     */\n    function angularInit(element, bootstrap) {\n        var elements = [element],\n            appElement,\n            module,\n            names = ['ng:app', 'ng-app', 'x-ng-app', 'data-ng-app'],\n            NG_APP_CLASS_REGEXP = /\\sng[:\\-]app(:\\s*([\\w\\d_]+);?)?\\s/;\n\n        function append(element) {\n            element && elements.push(element);\n        }\n\n        forEach(names, function(name) {\n            names[name] = true;\n            append(document.getElementById(name));\n            name = name.replace(':', '\\\\:');\n            if (element.querySelectorAll) {\n                forEach(element.querySelectorAll('.' + name), append);\n                forEach(element.querySelectorAll('.' + name + '\\\\:'), append);\n                forEach(element.querySelectorAll('[' + name + ']'), append);\n            }\n        });\n\n        forEach(elements, function(element) {\n            if (!appElement) {\n                var className = ' ' + element.className + ' ';\n                var match = NG_APP_CLASS_REGEXP.exec(className);\n                if (match) {\n                    appElement = element;\n                    module = (match[2] || '').replace(/\\s+/g, ',');\n                } else {\n                    forEach(element.attributes, function(attr) {\n                        if (!appElement && names[attr.name]) {\n                            appElement = element;\n                            module = attr.value;\n                        }\n                    });\n                }\n            }\n        });\n        if (appElement) {\n            bootstrap(appElement, module ? [module] : []);\n        }\n    }\n\n    /**\n     * @ngdoc function\n     * @name angular.bootstrap\n     * @description\n     * Use this function to manually start up angular application.\n     *\n     * See: {@link guide/bootstrap Bootstrap}\n     *\n     * @param {Element} element DOM element which is the root of angular application.\n     * @param {Array<String|Function>=} modules an array of module declarations. See: {@link angular.module modules}\n     * @returns {AUTO.$injector} Returns the newly created injector for this app.\n     */\n    function bootstrap(element, modules) {\n        var resumeBootstrapInternal = function() {\n            element = jqLite(element);\n            modules = modules || [];\n            modules.unshift(['$provide', function($provide) {\n                $provide.value('$rootElement', element);\n            }]);\n            modules.unshift('ng');\n            var injector = createInjector(modules);\n            injector.invoke(['$rootScope', '$rootElement', '$compile', '$injector',\n                function(scope, element, compile, injector) {\n                    scope.$apply(function() {\n                        element.data('$injector', injector);\n                        compile(element)(scope);\n                    });\n                }]\n            );\n            return injector;\n        };\n\n        var NG_DEFER_BOOTSTRAP = /^NG_DEFER_BOOTSTRAP!/;\n\n        if (window && !NG_DEFER_BOOTSTRAP.test(window.name)) {\n            return resumeBootstrapInternal();\n        }\n\n        window.name = window.name.replace(NG_DEFER_BOOTSTRAP, '');\n        angular.resumeBootstrap = function(extraModules) {\n            forEach(extraModules, function(module) {\n                modules.push(module);\n            });\n            resumeBootstrapInternal();\n        };\n    }\n\n    var SNAKE_CASE_REGEXP = /[A-Z]/g;\n    function snake_case(name, separator){\n        separator = separator || '_';\n        return name.replace(SNAKE_CASE_REGEXP, function(letter, pos) {\n            return (pos ? separator : '') + letter.toLowerCase();\n        });\n    }\n\n    function bindJQuery() {\n        // bind to jQuery if present;\n        jQuery = window.jQuery;\n        // reset to jQuery or default to us.\n        if (jQuery) {\n            jqLite = jQuery;\n            extend(jQuery.fn, {\n                scope: JQLitePrototype.scope,\n                controller: JQLitePrototype.controller,\n                injector: JQLitePrototype.injector,\n                inheritedData: JQLitePrototype.inheritedData\n            });\n            JQLitePatchJQueryRemove('remove', true);\n            JQLitePatchJQueryRemove('empty');\n            JQLitePatchJQueryRemove('html');\n        } else {\n            jqLite = JQLite;\n        }\n        angular.element = jqLite;\n    }\n\n    /**\n     * throw error if the argument is falsy.\n     */\n    function assertArg(arg, name, reason) {\n        if (!arg) {\n            throw new Error(\"Argument '\" + (name || '?') + \"' is \" + (reason || \"required\"));\n        }\n        return arg;\n    }\n\n    function assertArgFn(arg, name, acceptArrayAnnotation) {\n        if (acceptArrayAnnotation && isArray(arg)) {\n            arg = arg[arg.length - 1];\n        }\n\n        assertArg(isFunction(arg), name, 'not a function, got ' +\n            (arg && typeof arg == 'object' ? arg.constructor.name || 'Object' : typeof arg));\n        return arg;\n    }\n\n    /**\n     * @ngdoc interface\n     * @name angular.Module\n     * @description\n     *\n     * Interface for configuring angular {@link angular.module modules}.\n     */\n\n    function setupModuleLoader(window) {\n\n        function ensure(obj, name, factory) {\n            return obj[name] || (obj[name] = factory());\n        }\n\n        return ensure(ensure(window, 'angular', Object), 'module', function() {\n            /** @type {Object.<string, angular.Module>} */\n            var modules = {};\n\n            /**\n             * @ngdoc function\n             * @name angular.module\n             * @description\n             *\n             * The `angular.module` is a global place for creating and registering Angular modules. All\n             * modules (angular core or 3rd party) that should be available to an application must be\n             * registered using this mechanism.\n             *\n             *\n             * # Module\n             *\n             * A module is a collocation of services, directives, filters, and configuration information. Module\n             * is used to configure the {@link AUTO.$injector $injector}.\n             *\n             * <pre>\n             * // Create a new module\n             * var myModule = angular.module('myModule', []);\n             *\n             * // register a new service\n             * myModule.value('appName', 'MyCoolApp');\n             *\n             * // configure existing services inside initialization blocks.\n             * myModule.config(function($locationProvider) {\n     *   // Configure existing providers\n     *   $locationProvider.hashPrefix('!');\n     * });\n             * </pre>\n             *\n             * Then you can create an injector and load your modules like this:\n             *\n             * <pre>\n             * var injector = angular.injector(['ng', 'MyModule'])\n             * </pre>\n             *\n             * However it's more likely that you'll just use\n             * {@link ng.directive:ngApp ngApp} or\n             * {@link angular.bootstrap} to simplify this process for you.\n             *\n             * @param {!string} name The name of the module to create or retrieve.\n             * @param {Array.<string>=} requires If specified then new module is being created. If unspecified then the\n             *        the module is being retrieved for further configuration.\n             * @param {Function} configFn Optional configuration function for the module. Same as\n             *        {@link angular.Module#config Module#config()}.\n             * @returns {module} new module with the {@link angular.Module} api.\n             */\n            return function module(name, requires, configFn) {\n                if (requires && modules.hasOwnProperty(name)) {\n                    modules[name] = null;\n                }\n                return ensure(modules, name, function() {\n                    if (!requires) {\n                        throw Error('No module: ' + name);\n                    }\n\n                    /** @type {!Array.<Array.<*>>} */\n                    var invokeQueue = [];\n\n                    /** @type {!Array.<Function>} */\n                    var runBlocks = [];\n\n                    var config = invokeLater('$injector', 'invoke');\n\n                    /** @type {angular.Module} */\n                    var moduleInstance = {\n                        // Private state\n                        _invokeQueue: invokeQueue,\n                        _runBlocks: runBlocks,\n\n                        /**\n                         * @ngdoc property\n                         * @name angular.Module#requires\n                         * @propertyOf angular.Module\n                         * @returns {Array.<string>} List of module names which must be loaded before this module.\n                         * @description\n                         * Holds the list of modules which the injector will load before the current module is loaded.\n                         */\n                        requires: requires,\n\n                        /**\n                         * @ngdoc property\n                         * @name angular.Module#name\n                         * @propertyOf angular.Module\n                         * @returns {string} Name of the module.\n                         * @description\n                         */\n                        name: name,\n\n\n                        /**\n                         * @ngdoc method\n                         * @name angular.Module#provider\n                         * @methodOf angular.Module\n                         * @param {string} name service name\n                         * @param {Function} providerType Construction function for creating new instance of the service.\n                         * @description\n                         * See {@link AUTO.$provide#provider $provide.provider()}.\n                         */\n                        provider: invokeLater('$provide', 'provider'),\n\n                        /**\n                         * @ngdoc method\n                         * @name angular.Module#factory\n                         * @methodOf angular.Module\n                         * @param {string} name service name\n                         * @param {Function} providerFunction Function for creating new instance of the service.\n                         * @description\n                         * See {@link AUTO.$provide#factory $provide.factory()}.\n                         */\n                        factory: invokeLater('$provide', 'factory'),\n\n                        /**\n                         * @ngdoc method\n                         * @name angular.Module#service\n                         * @methodOf angular.Module\n                         * @param {string} name service name\n                         * @param {Function} constructor A constructor function that will be instantiated.\n                         * @description\n                         * See {@link AUTO.$provide#service $provide.service()}.\n                         */\n                        service: invokeLater('$provide', 'service'),\n\n                        /**\n                         * @ngdoc method\n                         * @name angular.Module#value\n                         * @methodOf angular.Module\n                         * @param {string} name service name\n                         * @param {*} object Service instance object.\n                         * @description\n                         * See {@link AUTO.$provide#value $provide.value()}.\n                         */\n                        value: invokeLater('$provide', 'value'),\n\n                        /**\n                         * @ngdoc method\n                         * @name angular.Module#constant\n                         * @methodOf angular.Module\n                         * @param {string} name constant name\n                         * @param {*} object Constant value.\n                         * @description\n                         * Because the constant are fixed, they get applied before other provide methods.\n                         * See {@link AUTO.$provide#constant $provide.constant()}.\n                         */\n                        constant: invokeLater('$provide', 'constant', 'unshift'),\n\n                        /**\n                         * @ngdoc method\n                         * @name angular.Module#filter\n                         * @methodOf angular.Module\n                         * @param {string} name Filter name.\n                         * @param {Function} filterFactory Factory function for creating new instance of filter.\n                         * @description\n                         * See {@link ng.$filterProvider#register $filterProvider.register()}.\n                         */\n                        filter: invokeLater('$filterProvider', 'register'),\n\n                        /**\n                         * @ngdoc method\n                         * @name angular.Module#controller\n                         * @methodOf angular.Module\n                         * @param {string} name Controller name.\n                         * @param {Function} constructor Controller constructor function.\n                         * @description\n                         * See {@link ng.$controllerProvider#register $controllerProvider.register()}.\n                         */\n                        controller: invokeLater('$controllerProvider', 'register'),\n\n                        /**\n                         * @ngdoc method\n                         * @name angular.Module#directive\n                         * @methodOf angular.Module\n                         * @param {string} name directive name\n                         * @param {Function} directiveFactory Factory function for creating new instance of\n                         * directives.\n                         * @description\n                         * See {@link ng.$compileProvider#directive $compileProvider.directive()}.\n                         */\n                        directive: invokeLater('$compileProvider', 'directive'),\n\n                        /**\n                         * @ngdoc method\n                         * @name angular.Module#config\n                         * @methodOf angular.Module\n                         * @param {Function} configFn Execute this function on module load. Useful for service\n                         *    configuration.\n                         * @description\n                         * Use this method to register work which needs to be performed on module loading.\n                         */\n                        config: config,\n\n                        /**\n                         * @ngdoc method\n                         * @name angular.Module#run\n                         * @methodOf angular.Module\n                         * @param {Function} initializationFn Execute this function after injector creation.\n                         *    Useful for application initialization.\n                         * @description\n                         * Use this method to register work which should be performed when the injector is done\n                         * loading all modules.\n                         */\n                        run: function(block) {\n                            runBlocks.push(block);\n                            return this;\n                        }\n                    };\n\n                    if (configFn) {\n                        config(configFn);\n                    }\n\n                    return  moduleInstance;\n\n                    /**\n                     * @param {string} provider\n                     * @param {string} method\n                     * @param {String=} insertMethod\n                     * @returns {angular.Module}\n                     */\n                    function invokeLater(provider, method, insertMethod) {\n                        return function() {\n                            invokeQueue[insertMethod || 'push']([provider, method, arguments]);\n                            return moduleInstance;\n                        }\n                    }\n                });\n            };\n        });\n\n    }\n\n    /**\n     * @ngdoc property\n     * @name angular.version\n     * @description\n     * An object that contains information about the current AngularJS version. This object has the\n     * following properties:\n     *\n     * - `full` \u2013 `{string}` \u2013 Full version string, such as \"0.9.18\".\n     * - `major` \u2013 `{number}` \u2013 Major version number, such as \"0\".\n     * - `minor` \u2013 `{number}` \u2013 Minor version number, such as \"9\".\n     * - `dot` \u2013 `{number}` \u2013 Dot version number, such as \"18\".\n     * - `codeName` \u2013 `{string}` \u2013 Code name of the release, such as \"jiggling-armfat\".\n     */\n    var version = {\n        full: '1.0.7',    // all of these placeholder strings will be replaced by grunt's\n        major: 1,    // package task\n        minor: 0,\n        dot: 7,\n        codeName: 'monochromatic-rainbow'\n    };\n\n\n    function publishExternalAPI(angular){\n        extend(angular, {\n            'bootstrap': bootstrap,\n            'copy': copy,\n            'extend': extend,\n            'equals': equals,\n            'element': jqLite,\n            'forEach': forEach,\n            'injector': createInjector,\n            'noop':noop,\n            'bind':bind,\n            'toJson': toJson,\n            'fromJson': fromJson,\n            'identity':identity,\n            'isUndefined': isUndefined,\n            'isDefined': isDefined,\n            'isString': isString,\n            'isFunction': isFunction,\n            'isObject': isObject,\n            'isNumber': isNumber,\n            'isElement': isElement,\n            'isArray': isArray,\n            'version': version,\n            'isDate': isDate,\n            'lowercase': lowercase,\n            'uppercase': uppercase,\n            'callbacks': {counter: 0}\n        });\n\n        angularModule = setupModuleLoader(window);\n        try {\n            angularModule('ngLocale');\n        } catch (e) {\n            angularModule('ngLocale', []).provider('$locale', $LocaleProvider);\n        }\n\n        angularModule('ng', ['ngLocale'], ['$provide',\n            function ngModule($provide) {\n                $provide.provider('$compile', $CompileProvider).\n                    directive({\n                        a: htmlAnchorDirective,\n                        input: inputDirective,\n                        textarea: inputDirective,\n                        form: formDirective,\n                        script: scriptDirective,\n                        select: selectDirective,\n                        style: styleDirective,\n                        option: optionDirective,\n                        ngBind: ngBindDirective,\n                        ngBindHtmlUnsafe: ngBindHtmlUnsafeDirective,\n                        ngBindTemplate: ngBindTemplateDirective,\n                        ngClass: ngClassDirective,\n                        ngClassEven: ngClassEvenDirective,\n                        ngClassOdd: ngClassOddDirective,\n                        ngCsp: ngCspDirective,\n                        ngCloak: ngCloakDirective,\n                        ngController: ngControllerDirective,\n                        ngForm: ngFormDirective,\n                        ngHide: ngHideDirective,\n                        ngInclude: ngIncludeDirective,\n                        ngInit: ngInitDirective,\n                        ngNonBindable: ngNonBindableDirective,\n                        ngPluralize: ngPluralizeDirective,\n                        ngRepeat: ngRepeatDirective,\n                        ngShow: ngShowDirective,\n                        ngSubmit: ngSubmitDirective,\n                        ngStyle: ngStyleDirective,\n                        ngSwitch: ngSwitchDirective,\n                        ngSwitchWhen: ngSwitchWhenDirective,\n                        ngSwitchDefault: ngSwitchDefaultDirective,\n                        ngOptions: ngOptionsDirective,\n                        ngView: ngViewDirective,\n                        ngTransclude: ngTranscludeDirective,\n                        ngModel: ngModelDirective,\n                        ngList: ngListDirective,\n                        ngChange: ngChangeDirective,\n                        required: requiredDirective,\n                        ngRequired: requiredDirective,\n                        ngValue: ngValueDirective\n                    }).\n                    directive(ngAttributeAliasDirectives).\n                    directive(ngEventDirectives);\n                $provide.provider({\n                    $anchorScroll: $AnchorScrollProvider,\n                    $browser: $BrowserProvider,\n                    $cacheFactory: $CacheFactoryProvider,\n                    $controller: $ControllerProvider,\n                    $document: $DocumentProvider,\n                    $exceptionHandler: $ExceptionHandlerProvider,\n                    $filter: $FilterProvider,\n                    $interpolate: $InterpolateProvider,\n                    $http: $HttpProvider,\n                    $httpBackend: $HttpBackendProvider,\n                    $location: $LocationProvider,\n                    $log: $LogProvider,\n                    $parse: $ParseProvider,\n                    $route: $RouteProvider,\n                    $routeParams: $RouteParamsProvider,\n                    $rootScope: $RootScopeProvider,\n                    $q: $QProvider,\n                    $sniffer: $SnifferProvider,\n                    $templateCache: $TemplateCacheProvider,\n                    $timeout: $TimeoutProvider,\n                    $window: $WindowProvider\n                });\n            }\n        ]);\n    }\n\n//////////////////////////////////\n//JQLite\n//////////////////////////////////\n\n    /**\n     * @ngdoc function\n     * @name angular.element\n     * @function\n     *\n     * @description\n     * Wraps a raw DOM element or HTML string as a [jQuery](http://jquery.com) element.\n     * `angular.element` can be either an alias for [jQuery](http://api.jquery.com/jQuery/) function, if\n     * jQuery is available, or a function that wraps the element or string in Angular's jQuery lite\n     * implementation (commonly referred to as jqLite).\n     *\n     * Real jQuery always takes precedence over jqLite, provided it was loaded before `DOMContentLoaded`\n     * event fired.\n     *\n     * jqLite is a tiny, API-compatible subset of jQuery that allows\n     * Angular to manipulate the DOM. jqLite implements only the most commonly needed functionality\n     * within a very small footprint, so only a subset of the jQuery API - methods, arguments and\n     * invocation styles - are supported.\n     *\n     * Note: All element references in Angular are always wrapped with jQuery or jqLite; they are never\n     * raw DOM references.\n     *\n     * ## Angular's jQuery lite provides the following methods:\n     *\n     * - [addClass()](http://api.jquery.com/addClass/)\n     * - [after()](http://api.jquery.com/after/)\n     * - [append()](http://api.jquery.com/append/)\n     * - [attr()](http://api.jquery.com/attr/)\n     * - [bind()](http://api.jquery.com/bind/) - Does not support namespaces\n     * - [children()](http://api.jquery.com/children/) - Does not support selectors\n     * - [clone()](http://api.jquery.com/clone/)\n     * - [contents()](http://api.jquery.com/contents/)\n     * - [css()](http://api.jquery.com/css/)\n     * - [data()](http://api.jquery.com/data/)\n     * - [eq()](http://api.jquery.com/eq/)\n     * - [find()](http://api.jquery.com/find/) - Limited to lookups by tag name\n     * - [hasClass()](http://api.jquery.com/hasClass/)\n     * - [html()](http://api.jquery.com/html/)\n     * - [next()](http://api.jquery.com/next/) - Does not support selectors\n     * - [parent()](http://api.jquery.com/parent/) - Does not support selectors\n     * - [prepend()](http://api.jquery.com/prepend/)\n     * - [prop()](http://api.jquery.com/prop/)\n     * - [ready()](http://api.jquery.com/ready/)\n     * - [remove()](http://api.jquery.com/remove/)\n     * - [removeAttr()](http://api.jquery.com/removeAttr/)\n     * - [removeClass()](http://api.jquery.com/removeClass/)\n     * - [removeData()](http://api.jquery.com/removeData/)\n     * - [replaceWith()](http://api.jquery.com/replaceWith/)\n     * - [text()](http://api.jquery.com/text/)\n     * - [toggleClass()](http://api.jquery.com/toggleClass/)\n     * - [triggerHandler()](http://api.jquery.com/triggerHandler/) - Doesn't pass native event objects to handlers.\n     * - [unbind()](http://api.jquery.com/unbind/) - Does not support namespaces\n     * - [val()](http://api.jquery.com/val/)\n     * - [wrap()](http://api.jquery.com/wrap/)\n     *\n     * ## In addtion to the above, Angular provides additional methods to both jQuery and jQuery lite:\n     *\n     * - `controller(name)` - retrieves the controller of the current element or its parent. By default\n     *   retrieves controller associated with the `ngController` directive. If `name` is provided as\n     *   camelCase directive name, then the controller for this directive will be retrieved (e.g.\n     *   `'ngModel'`).\n     * - `injector()` - retrieves the injector of the current element or its parent.\n     * - `scope()` - retrieves the {@link api/ng.$rootScope.Scope scope} of the current\n     *   element or its parent.\n     * - `inheritedData()` - same as `data()`, but walks up the DOM until a value is found or the top\n     *   parent element is reached.\n     *\n     * @param {string|DOMElement} element HTML string or DOMElement to be wrapped into jQuery.\n     * @returns {Object} jQuery object.\n     */\n\n    var jqCache = JQLite.cache = {},\n        jqName = JQLite.expando = 'ng-' + new Date().getTime(),\n        jqId = 1,\n        addEventListenerFn = (window.document.addEventListener\n            ? function(element, type, fn) {element.addEventListener(type, fn, false);}\n            : function(element, type, fn) {element.attachEvent('on' + type, fn);}),\n        removeEventListenerFn = (window.document.removeEventListener\n            ? function(element, type, fn) {element.removeEventListener(type, fn, false); }\n            : function(element, type, fn) {element.detachEvent('on' + type, fn); });\n\n    function jqNextId() { return ++jqId; }\n\n\n    var SPECIAL_CHARS_REGEXP = /([\\:\\-\\_]+(.))/g;\n    var MOZ_HACK_REGEXP = /^moz([A-Z])/;\n\n    /**\n     * Converts snake_case to camelCase.\n     * Also there is special case for Moz prefix starting with upper case letter.\n     * @param name Name to normalize\n     */\n    function camelCase(name) {\n        return name.\n            replace(SPECIAL_CHARS_REGEXP, function(_, separator, letter, offset) {\n                return offset ? letter.toUpperCase() : letter;\n            }).\n            replace(MOZ_HACK_REGEXP, 'Moz$1');\n    }\n\n/////////////////////////////////////////////\n// jQuery mutation patch\n//\n//  In conjunction with bindJQuery intercepts all jQuery's DOM destruction apis and fires a\n// $destroy event on all DOM nodes being removed.\n//\n/////////////////////////////////////////////\n\n    function JQLitePatchJQueryRemove(name, dispatchThis) {\n        var originalJqFn = jQuery.fn[name];\n        originalJqFn = originalJqFn.$original || originalJqFn;\n        removePatch.$original = originalJqFn;\n        jQuery.fn[name] = removePatch;\n\n        function removePatch() {\n            var list = [this],\n                fireEvent = dispatchThis,\n                set, setIndex, setLength,\n                element, childIndex, childLength, children,\n                fns, events;\n\n            while(list.length) {\n                set = list.shift();\n                for(setIndex = 0, setLength = set.length; setIndex < setLength; setIndex++) {\n                    element = jqLite(set[setIndex]);\n                    if (fireEvent) {\n                        element.triggerHandler('$destroy');\n                    } else {\n                        fireEvent = !fireEvent;\n                    }\n                    for(childIndex = 0, childLength = (children = element.children()).length;\n                        childIndex < childLength;\n                        childIndex++) {\n                        list.push(jQuery(children[childIndex]));\n                    }\n                }\n            }\n            return originalJqFn.apply(this, arguments);\n        }\n    }\n\n/////////////////////////////////////////////\n    function JQLite(element) {\n        if (element instanceof JQLite) {\n            return element;\n        }\n        if (!(this instanceof JQLite)) {\n            if (isString(element) && element.charAt(0) != '<') {\n                throw Error('selectors not implemented');\n            }\n            return new JQLite(element);\n        }\n\n        if (isString(element)) {\n            var div = document.createElement('div');\n            // Read about the NoScope elements here:\n            // http://msdn.microsoft.com/en-us/library/ms533897(VS.85).aspx\n            div.innerHTML = '<div>&#160;</div>' + element; // IE insanity to make NoScope elements work!\n            div.removeChild(div.firstChild); // remove the superfluous div\n            JQLiteAddNodes(this, div.childNodes);\n            this.remove(); // detach the elements from the temporary DOM div.\n        } else {\n            JQLiteAddNodes(this, element);\n        }\n    }\n\n    function JQLiteClone(element) {\n        return element.cloneNode(true);\n    }\n\n    function JQLiteDealoc(element){\n        JQLiteRemoveData(element);\n        for ( var i = 0, children = element.childNodes || []; i < children.length; i++) {\n            JQLiteDealoc(children[i]);\n        }\n    }\n\n    function JQLiteUnbind(element, type, fn) {\n        var events = JQLiteExpandoStore(element, 'events'),\n            handle = JQLiteExpandoStore(element, 'handle');\n\n        if (!handle) return; //no listeners registered\n\n        if (isUndefined(type)) {\n            forEach(events, function(eventHandler, type) {\n                removeEventListenerFn(element, type, eventHandler);\n                delete events[type];\n            });\n        } else {\n            if (isUndefined(fn)) {\n                removeEventListenerFn(element, type, events[type]);\n                delete events[type];\n            } else {\n                arrayRemove(events[type], fn);\n            }\n        }\n    }\n\n    function JQLiteRemoveData(element) {\n        var expandoId = element[jqName],\n            expandoStore = jqCache[expandoId];\n\n        if (expandoStore) {\n            if (expandoStore.handle) {\n                expandoStore.events.$destroy && expandoStore.handle({}, '$destroy');\n                JQLiteUnbind(element);\n            }\n            delete jqCache[expandoId];\n            element[jqName] = undefined; // ie does not allow deletion of attributes on elements.\n        }\n    }\n\n    function JQLiteExpandoStore(element, key, value) {\n        var expandoId = element[jqName],\n            expandoStore = jqCache[expandoId || -1];\n\n        if (isDefined(value)) {\n            if (!expandoStore) {\n                element[jqName] = expandoId = jqNextId();\n                expandoStore = jqCache[expandoId] = {};\n            }\n            expandoStore[key] = value;\n        } else {\n            return expandoStore && expandoStore[key];\n        }\n    }\n\n    function JQLiteData(element, key, value) {\n        var data = JQLiteExpandoStore(element, 'data'),\n            isSetter = isDefined(value),\n            keyDefined = !isSetter && isDefined(key),\n            isSimpleGetter = keyDefined && !isObject(key);\n\n        if (!data && !isSimpleGetter) {\n            JQLiteExpandoStore(element, 'data', data = {});\n        }\n\n        if (isSetter) {\n            data[key] = value;\n        } else {\n            if (keyDefined) {\n                if (isSimpleGetter) {\n                    // don't create data in this case.\n                    return data && data[key];\n                } else {\n                    extend(data, key);\n                }\n            } else {\n                return data;\n            }\n        }\n    }\n\n    function JQLiteHasClass(element, selector) {\n        return ((\" \" + element.className + \" \").replace(/[\\n\\t]/g, \" \").\n            indexOf( \" \" + selector + \" \" ) > -1);\n    }\n\n    function JQLiteRemoveClass(element, cssClasses) {\n        if (cssClasses) {\n            forEach(cssClasses.split(' '), function(cssClass) {\n                element.className = trim(\n                    (\" \" + element.className + \" \")\n                        .replace(/[\\n\\t]/g, \" \")\n                        .replace(\" \" + trim(cssClass) + \" \", \" \")\n                );\n            });\n        }\n    }\n\n    function JQLiteAddClass(element, cssClasses) {\n        if (cssClasses) {\n            forEach(cssClasses.split(' '), function(cssClass) {\n                if (!JQLiteHasClass(element, cssClass)) {\n                    element.className = trim(element.className + ' ' + trim(cssClass));\n                }\n            });\n        }\n    }\n\n    function JQLiteAddNodes(root, elements) {\n        if (elements) {\n            elements = (!elements.nodeName && isDefined(elements.length) && !isWindow(elements))\n                ? elements\n                : [ elements ];\n            for(var i=0; i < elements.length; i++) {\n                root.push(elements[i]);\n            }\n        }\n    }\n\n    function JQLiteController(element, name) {\n        return JQLiteInheritedData(element, '$' + (name || 'ngController' ) + 'Controller');\n    }\n\n    function JQLiteInheritedData(element, name, value) {\n        element = jqLite(element);\n\n        // if element is the document object work with the html element instead\n        // this makes $(document).scope() possible\n        if(element[0].nodeType == 9) {\n            element = element.find('html');\n        }\n\n        while (element.length) {\n            if (value = element.data(name)) return value;\n            element = element.parent();\n        }\n    }\n\n//////////////////////////////////////////\n// Functions which are declared directly.\n//////////////////////////////////////////\n    var JQLitePrototype = JQLite.prototype = {\n        ready: function(fn) {\n            var fired = false;\n\n            function trigger() {\n                if (fired) return;\n                fired = true;\n                fn();\n            }\n\n            this.bind('DOMContentLoaded', trigger); // works for modern browsers and IE9\n            // we can not use jqLite since we are not done loading and jQuery could be loaded later.\n            JQLite(window).bind('load', trigger); // fallback to window.onload for others\n        },\n        toString: function() {\n            var value = [];\n            forEach(this, function(e){ value.push('' + e);});\n            return '[' + value.join(', ') + ']';\n        },\n\n        eq: function(index) {\n            return (index >= 0) ? jqLite(this[index]) : jqLite(this[this.length + index]);\n        },\n\n        length: 0,\n        push: push,\n        sort: [].sort,\n        splice: [].splice\n    };\n\n//////////////////////////////////////////\n// Functions iterating getter/setters.\n// these functions return self on setter and\n// value on get.\n//////////////////////////////////////////\n    var BOOLEAN_ATTR = {};\n    forEach('multiple,selected,checked,disabled,readOnly,required'.split(','), function(value) {\n        BOOLEAN_ATTR[lowercase(value)] = value;\n    });\n    var BOOLEAN_ELEMENTS = {};\n    forEach('input,select,option,textarea,button,form'.split(','), function(value) {\n        BOOLEAN_ELEMENTS[uppercase(value)] = true;\n    });\n\n    function getBooleanAttrName(element, name) {\n        // check dom last since we will most likely fail on name\n        var booleanAttr = BOOLEAN_ATTR[name.toLowerCase()];\n\n        // booleanAttr is here twice to minimize DOM access\n        return booleanAttr && BOOLEAN_ELEMENTS[element.nodeName] && booleanAttr;\n    }\n\n    forEach({\n        data: JQLiteData,\n        inheritedData: JQLiteInheritedData,\n\n        scope: function(element) {\n            return JQLiteInheritedData(element, '$scope');\n        },\n\n        controller: JQLiteController ,\n\n        injector: function(element) {\n            return JQLiteInheritedData(element, '$injector');\n        },\n\n        removeAttr: function(element,name) {\n            element.removeAttribute(name);\n        },\n\n        hasClass: JQLiteHasClass,\n\n        css: function(element, name, value) {\n            name = camelCase(name);\n\n            if (isDefined(value)) {\n                element.style[name] = value;\n            } else {\n                var val;\n\n                if (msie <= 8) {\n                    // this is some IE specific weirdness that jQuery 1.6.4 does not sure why\n                    val = element.currentStyle && element.currentStyle[name];\n                    if (val === '') val = 'auto';\n                }\n\n                val = val || element.style[name];\n\n                if (msie <= 8) {\n                    // jquery weirdness :-/\n                    val = (val === '') ? undefined : val;\n                }\n\n                return  val;\n            }\n        },\n\n        attr: function(element, name, value){\n            var lowercasedName = lowercase(name);\n            if (BOOLEAN_ATTR[lowercasedName]) {\n                if (isDefined(value)) {\n                    if (!!value) {\n                        element[name] = true;\n                        element.setAttribute(name, lowercasedName);\n                    } else {\n                        element[name] = false;\n                        element.removeAttribute(lowercasedName);\n                    }\n                } else {\n                    return (element[name] ||\n                        (element.attributes.getNamedItem(name)|| noop).specified)\n                        ? lowercasedName\n                        : undefined;\n                }\n            } else if (isDefined(value)) {\n                element.setAttribute(name, value);\n            } else if (element.getAttribute) {\n                // the extra argument \"2\" is to get the right thing for a.href in IE, see jQuery code\n                // some elements (e.g. Document) don't have get attribute, so return undefined\n                var ret = element.getAttribute(name, 2);\n                // normalize non-existing attributes to undefined (as jQuery)\n                return ret === null ? undefined : ret;\n            }\n        },\n\n        prop: function(element, name, value) {\n            if (isDefined(value)) {\n                element[name] = value;\n            } else {\n                return element[name];\n            }\n        },\n\n        text: extend((msie < 9)\n            ? function(element, value) {\n            if (element.nodeType == 1 /** Element */) {\n                if (isUndefined(value))\n                    return element.innerText;\n                element.innerText = value;\n            } else {\n                if (isUndefined(value))\n                    return element.nodeValue;\n                element.nodeValue = value;\n            }\n        }\n            : function(element, value) {\n            if (isUndefined(value)) {\n                return element.textContent;\n            }\n            element.textContent = value;\n        }, {$dv:''}),\n\n        val: function(element, value) {\n            if (isUndefined(value)) {\n                return element.value;\n            }\n            element.value = value;\n        },\n\n        html: function(element, value) {\n            if (isUndefined(value)) {\n                return element.innerHTML;\n            }\n            for (var i = 0, childNodes = element.childNodes; i < childNodes.length; i++) {\n                JQLiteDealoc(childNodes[i]);\n            }\n            element.innerHTML = value;\n        }\n    }, function(fn, name){\n        /**\n         * Properties: writes return selection, reads return first value\n         */\n        JQLite.prototype[name] = function(arg1, arg2) {\n            var i, key;\n\n            // JQLiteHasClass has only two arguments, but is a getter-only fn, so we need to special-case it\n            // in a way that survives minification.\n            if (((fn.length == 2 && (fn !== JQLiteHasClass && fn !== JQLiteController)) ? arg1 : arg2) === undefined) {\n                if (isObject(arg1)) {\n\n                    // we are a write, but the object properties are the key/values\n                    for(i=0; i < this.length; i++) {\n                        if (fn === JQLiteData) {\n                            // data() takes the whole object in jQuery\n                            fn(this[i], arg1);\n                        } else {\n                            for (key in arg1) {\n                                fn(this[i], key, arg1[key]);\n                            }\n                        }\n                    }\n                    // return self for chaining\n                    return this;\n                } else {\n                    // we are a read, so read the first child.\n                    if (this.length)\n                        return fn(this[0], arg1, arg2);\n                }\n            } else {\n                // we are a write, so apply to all children\n                for(i=0; i < this.length; i++) {\n                    fn(this[i], arg1, arg2);\n                }\n                // return self for chaining\n                return this;\n            }\n            return fn.$dv;\n        };\n    });\n\n    function createEventHandler(element, events) {\n        var eventHandler = function (event, type) {\n            if (!event.preventDefault) {\n                event.preventDefault = function() {\n                    event.returnValue = false; //ie\n                };\n            }\n\n            if (!event.stopPropagation) {\n                event.stopPropagation = function() {\n                    event.cancelBubble = true; //ie\n                };\n            }\n\n            if (!event.target) {\n                event.target = event.srcElement || document;\n            }\n\n            if (isUndefined(event.defaultPrevented)) {\n                var prevent = event.preventDefault;\n                event.preventDefault = function() {\n                    event.defaultPrevented = true;\n                    prevent.call(event);\n                };\n                event.defaultPrevented = false;\n            }\n\n            event.isDefaultPrevented = function() {\n                return event.defaultPrevented;\n            };\n\n            forEach(events[type || event.type], function(fn) {\n                fn.call(element, event);\n            });\n\n            // Remove monkey-patched methods (IE),\n            // as they would cause memory leaks in IE8.\n            if (msie <= 8) {\n                // IE7/8 does not allow to delete property on native object\n                event.preventDefault = null;\n                event.stopPropagation = null;\n                event.isDefaultPrevented = null;\n            } else {\n                // It shouldn't affect normal browsers (native methods are defined on prototype).\n                delete event.preventDefault;\n                delete event.stopPropagation;\n                delete event.isDefaultPrevented;\n            }\n        };\n        eventHandler.elem = element;\n        return eventHandler;\n    }\n\n//////////////////////////////////////////\n// Functions iterating traversal.\n// These functions chain results into a single\n// selector.\n//////////////////////////////////////////\n    forEach({\n        removeData: JQLiteRemoveData,\n\n        dealoc: JQLiteDealoc,\n\n        bind: function bindFn(element, type, fn){\n            var events = JQLiteExpandoStore(element, 'events'),\n                handle = JQLiteExpandoStore(element, 'handle');\n\n            if (!events) JQLiteExpandoStore(element, 'events', events = {});\n            if (!handle) JQLiteExpandoStore(element, 'handle', handle = createEventHandler(element, events));\n\n            forEach(type.split(' '), function(type){\n                var eventFns = events[type];\n\n                if (!eventFns) {\n                    if (type == 'mouseenter' || type == 'mouseleave') {\n                        var contains = document.body.contains || document.body.compareDocumentPosition ?\n                            function( a, b ) {\n                                var adown = a.nodeType === 9 ? a.documentElement : a,\n                                    bup = b && b.parentNode;\n                                return a === bup || !!( bup && bup.nodeType === 1 && (\n                                    adown.contains ?\n                                        adown.contains( bup ) :\n                                        a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16\n                                    ));\n                            } :\n                            function( a, b ) {\n                                if ( b ) {\n                                    while ( (b = b.parentNode) ) {\n                                        if ( b === a ) {\n                                            return true;\n                                        }\n                                    }\n                                }\n                                return false;\n                            };\n\n                        events[type] = [];\n\n                        // Refer to jQuery's implementation of mouseenter & mouseleave\n                        // Read about mouseenter and mouseleave:\n                        // http://www.quirksmode.org/js/events_mouse.html#link8\n                        var eventmap = { mouseleave : \"mouseout\", mouseenter : \"mouseover\"}\n                        bindFn(element, eventmap[type], function(event) {\n                            var ret, target = this, related = event.relatedTarget;\n                            // For mousenter/leave call the handler if related is outside the target.\n                            // NB: No relatedTarget if the mouse left/entered the browser window\n                            if ( !related || (related !== target && !contains(target, related)) ){\n                                handle(event, type);\n                            }\n\n                        });\n\n                    } else {\n                        addEventListenerFn(element, type, handle);\n                        events[type] = [];\n                    }\n                    eventFns = events[type]\n                }\n                eventFns.push(fn);\n            });\n        },\n\n        unbind: JQLiteUnbind,\n\n        replaceWith: function(element, replaceNode) {\n            var index, parent = element.parentNode;\n            JQLiteDealoc(element);\n            forEach(new JQLite(replaceNode), function(node){\n                if (index) {\n                    parent.insertBefore(node, index.nextSibling);\n                } else {\n                    parent.replaceChild(node, element);\n                }\n                index = node;\n            });\n        },\n\n        children: function(element) {\n            var children = [];\n            forEach(element.childNodes, function(element){\n                if (element.nodeType === 1)\n                    children.push(element);\n            });\n            return children;\n        },\n\n        contents: function(element) {\n            return element.childNodes || [];\n        },\n\n        append: function(element, node) {\n            forEach(new JQLite(node), function(child){\n                if (element.nodeType === 1)\n                    element.appendChild(child);\n            });\n        },\n\n        prepend: function(element, node) {\n            if (element.nodeType === 1) {\n                var index = element.firstChild;\n                forEach(new JQLite(node), function(child){\n                    if (index) {\n                        element.insertBefore(child, index);\n                    } else {\n                        element.appendChild(child);\n                        index = child;\n                    }\n                });\n            }\n        },\n\n        wrap: function(element, wrapNode) {\n            wrapNode = jqLite(wrapNode)[0];\n            var parent = element.parentNode;\n            if (parent) {\n                parent.replaceChild(wrapNode, element);\n            }\n            wrapNode.appendChild(element);\n        },\n\n        remove: function(element) {\n            JQLiteDealoc(element);\n            var parent = element.parentNode;\n            if (parent) parent.removeChild(element);\n        },\n\n        after: function(element, newElement) {\n            var index = element, parent = element.parentNode;\n            forEach(new JQLite(newElement), function(node){\n                parent.insertBefore(node, index.nextSibling);\n                index = node;\n            });\n        },\n\n        addClass: JQLiteAddClass,\n        removeClass: JQLiteRemoveClass,\n\n        toggleClass: function(element, selector, condition) {\n            if (isUndefined(condition)) {\n                condition = !JQLiteHasClass(element, selector);\n            }\n            (condition ? JQLiteAddClass : JQLiteRemoveClass)(element, selector);\n        },\n\n        parent: function(element) {\n            var parent = element.parentNode;\n            return parent && parent.nodeType !== 11 ? parent : null;\n        },\n\n        next: function(element) {\n            if (element.nextElementSibling) {\n                return element.nextElementSibling;\n            }\n\n            // IE8 doesn't have nextElementSibling\n            var elm = element.nextSibling;\n            while (elm != null && elm.nodeType !== 1) {\n                elm = elm.nextSibling;\n            }\n            return elm;\n        },\n\n        find: function(element, selector) {\n            return element.getElementsByTagName(selector);\n        },\n\n        clone: JQLiteClone,\n\n        triggerHandler: function(element, eventName) {\n            var eventFns = (JQLiteExpandoStore(element, 'events') || {})[eventName];\n\n            forEach(eventFns, function(fn) {\n                fn.call(element, null);\n            });\n        }\n    }, function(fn, name){\n        /**\n         * chaining functions\n         */\n        JQLite.prototype[name] = function(arg1, arg2) {\n            var value;\n            for(var i=0; i < this.length; i++) {\n                if (value == undefined) {\n                    value = fn(this[i], arg1, arg2);\n                    if (value !== undefined) {\n                        // any function which returns a value needs to be wrapped\n                        value = jqLite(value);\n                    }\n                } else {\n                    JQLiteAddNodes(value, fn(this[i], arg1, arg2));\n                }\n            }\n            return value == undefined ? this : value;\n        };\n    });\n\n    /**\n     * Computes a hash of an 'obj'.\n     * Hash of a:\n     *  string is string\n     *  number is number as string\n     *  object is either result of calling $$hashKey function on the object or uniquely generated id,\n     *         that is also assigned to the $$hashKey property of the object.\n     *\n     * @param obj\n     * @returns {string} hash string such that the same input will have the same hash string.\n     *         The resulting string key is in 'type:hashKey' format.\n     */\n    function hashKey(obj) {\n        var objType = typeof obj,\n            key;\n\n        if (objType == 'object' && obj !== null) {\n            if (typeof (key = obj.$$hashKey) == 'function') {\n                // must invoke on object to keep the right this\n                key = obj.$$hashKey();\n            } else if (key === undefined) {\n                key = obj.$$hashKey = nextUid();\n            }\n        } else {\n            key = obj;\n        }\n\n        return objType + ':' + key;\n    }\n\n    /**\n     * HashMap which can use objects as keys\n     */\n    function HashMap(array){\n        forEach(array, this.put, this);\n    }\n    HashMap.prototype = {\n        /**\n         * Store key value pair\n         * @param key key to store can be any type\n         * @param value value to store can be any type\n         */\n        put: function(key, value) {\n            this[hashKey(key)] = value;\n        },\n\n        /**\n         * @param key\n         * @returns the value for the key\n         */\n        get: function(key) {\n            return this[hashKey(key)];\n        },\n\n        /**\n         * Remove the key/value pair\n         * @param key\n         */\n        remove: function(key) {\n            var value = this[key = hashKey(key)];\n            delete this[key];\n            return value;\n        }\n    };\n\n    /**\n     * A map where multiple values can be added to the same key such that they form a queue.\n     * @returns {HashQueueMap}\n     */\n    function HashQueueMap() {}\n    HashQueueMap.prototype = {\n        /**\n         * Same as array push, but using an array as the value for the hash\n         */\n        push: function(key, value) {\n            var array = this[key = hashKey(key)];\n            if (!array) {\n                this[key] = [value];\n            } else {\n                array.push(value);\n            }\n        },\n\n        /**\n         * Same as array shift, but using an array as the value for the hash\n         */\n        shift: function(key) {\n            var array = this[key = hashKey(key)];\n            if (array) {\n                if (array.length == 1) {\n                    delete this[key];\n                    return array[0];\n                } else {\n                    return array.shift();\n                }\n            }\n        },\n\n        /**\n         * return the first item without deleting it\n         */\n        peek: function(key) {\n            var array = this[hashKey(key)];\n            if (array) {\n                return array[0];\n            }\n        }\n    };\n\n    /**\n     * @ngdoc function\n     * @name angular.injector\n     * @function\n     *\n     * @description\n     * Creates an injector function that can be used for retrieving services as well as for\n     * dependency injection (see {@link guide/di dependency injection}).\n     *\n\n     * @param {Array.<string|Function>} modules A list of module functions or their aliases. See\n     *        {@link angular.module}. The `ng` module must be explicitly added.\n     * @returns {function()} Injector function. See {@link AUTO.$injector $injector}.\n     *\n     * @example\n     * Typical usage\n     * <pre>\n     *   // create an injector\n     *   var $injector = angular.injector(['ng']);\n     *\n     *   // use the injector to kick off your application\n     *   // use the type inference to auto inject arguments, or use implicit injection\n     *   $injector.invoke(function($rootScope, $compile, $document){\n *     $compile($document)($rootScope);\n *     $rootScope.$digest();\n *   });\n     * </pre>\n     */\n\n\n    /**\n     * @ngdoc overview\n     * @name AUTO\n     * @description\n     *\n     * Implicit module which gets automatically added to each {@link AUTO.$injector $injector}.\n     */\n\n    var FN_ARGS = /^function\\s*[^\\(]*\\(\\s*([^\\)]*)\\)/m;\n    var FN_ARG_SPLIT = /,/;\n    var FN_ARG = /^\\s*(_?)(\\S+?)\\1\\s*$/;\n    var STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;\n    function annotate(fn) {\n        var $inject,\n            fnText,\n            argDecl,\n            last;\n\n        if (typeof fn == 'function') {\n            if (!($inject = fn.$inject)) {\n                $inject = [];\n                fnText = fn.toString().replace(STRIP_COMMENTS, '');\n                argDecl = fnText.match(FN_ARGS);\n                forEach(argDecl[1].split(FN_ARG_SPLIT), function(arg){\n                    arg.replace(FN_ARG, function(all, underscore, name){\n                        $inject.push(name);\n                    });\n                });\n                fn.$inject = $inject;\n            }\n        } else if (isArray(fn)) {\n            last = fn.length - 1;\n            assertArgFn(fn[last], 'fn');\n            $inject = fn.slice(0, last);\n        } else {\n            assertArgFn(fn, 'fn', true);\n        }\n        return $inject;\n    }\n\n///////////////////////////////////////\n\n    /**\n     * @ngdoc object\n     * @name AUTO.$injector\n     * @function\n     *\n     * @description\n     *\n     * `$injector` is used to retrieve object instances as defined by\n     * {@link AUTO.$provide provider}, instantiate types, invoke methods,\n     * and load modules.\n     *\n     * The following always holds true:\n     *\n     * <pre>\n     *   var $injector = angular.injector();\n     *   expect($injector.get('$injector')).toBe($injector);\n     *   expect($injector.invoke(function($injector){\n *     return $injector;\n *   }).toBe($injector);\n     * </pre>\n     *\n     * # Injection Function Annotation\n     *\n     * JavaScript does not have annotations, and annotations are needed for dependency injection. The\n     * following are all valid ways of annotating function with injection arguments and are equivalent.\n     *\n     * <pre>\n     *   // inferred (only works if code not minified/obfuscated)\n     *   $injector.invoke(function(serviceA){});\n     *\n     *   // annotated\n     *   function explicit(serviceA) {};\n     *   explicit.$inject = ['serviceA'];\n     *   $injector.invoke(explicit);\n     *\n     *   // inline\n     *   $injector.invoke(['serviceA', function(serviceA){}]);\n     * </pre>\n     *\n     * ## Inference\n     *\n     * In JavaScript calling `toString()` on a function returns the function definition. The definition can then be\n     * parsed and the function arguments can be extracted. *NOTE:* This does not work with minification, and obfuscation\n     * tools since these tools change the argument names.\n     *\n     * ## `$inject` Annotation\n     * By adding a `$inject` property onto a function the injection parameters can be specified.\n     *\n     * ## Inline\n     * As an array of injection names, where the last item in the array is the function to call.\n     */\n\n    /**\n     * @ngdoc method\n     * @name AUTO.$injector#get\n     * @methodOf AUTO.$injector\n     *\n     * @description\n     * Return an instance of the service.\n     *\n     * @param {string} name The name of the instance to retrieve.\n     * @return {*} The instance.\n     */\n\n    /**\n     * @ngdoc method\n     * @name AUTO.$injector#invoke\n     * @methodOf AUTO.$injector\n     *\n     * @description\n     * Invoke the method and supply the method arguments from the `$injector`.\n     *\n     * @param {!function} fn The function to invoke. The function arguments come form the function annotation.\n     * @param {Object=} self The `this` for the invoked method.\n     * @param {Object=} locals Optional object. If preset then any argument names are read from this object first, before\n     *   the `$injector` is consulted.\n     * @returns {*} the value returned by the invoked `fn` function.\n     */\n\n    /**\n     * @ngdoc method\n     * @name AUTO.$injector#instantiate\n     * @methodOf AUTO.$injector\n     * @description\n     * Create a new instance of JS type. The method takes a constructor function invokes the new operator and supplies\n     * all of the arguments to the constructor function as specified by the constructor annotation.\n     *\n     * @param {function} Type Annotated constructor function.\n     * @param {Object=} locals Optional object. If preset then any argument names are read from this object first, before\n     *   the `$injector` is consulted.\n     * @returns {Object} new instance of `Type`.\n     */\n\n    /**\n     * @ngdoc method\n     * @name AUTO.$injector#annotate\n     * @methodOf AUTO.$injector\n     *\n     * @description\n     * Returns an array of service names which the function is requesting for injection. This API is used by the injector\n     * to determine which services need to be injected into the function when the function is invoked. There are three\n     * ways in which the function can be annotated with the needed dependencies.\n     *\n     * # Argument names\n     *\n     * The simplest form is to extract the dependencies from the arguments of the function. This is done by converting\n     * the function into a string using `toString()` method and extracting the argument names.\n     * <pre>\n     *   // Given\n     *   function MyController($scope, $route) {\n *     // ...\n *   }\n     *\n     *   // Then\n     *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);\n     * </pre>\n     *\n     * This method does not work with code minfication / obfuscation. For this reason the following annotation strategies\n     * are supported.\n     *\n     * # The `$inject` property\n     *\n     * If a function has an `$inject` property and its value is an array of strings, then the strings represent names of\n     * services to be injected into the function.\n     * <pre>\n     *   // Given\n     *   var MyController = function(obfuscatedScope, obfuscatedRoute) {\n *     // ...\n *   }\n     *   // Define function dependencies\n     *   MyController.$inject = ['$scope', '$route'];\n     *\n     *   // Then\n     *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);\n     * </pre>\n     *\n     * # The array notation\n     *\n     * It is often desirable to inline Injected functions and that's when setting the `$inject` property is very\n     * inconvenient. In these situations using the array notation to specify the dependencies in a way that survives\n     * minification is a better choice:\n     *\n     * <pre>\n     *   // We wish to write this (not minification / obfuscation safe)\n     *   injector.invoke(function($compile, $rootScope) {\n *     // ...\n *   });\n     *\n     *   // We are forced to write break inlining\n     *   var tmpFn = function(obfuscatedCompile, obfuscatedRootScope) {\n *     // ...\n *   };\n     *   tmpFn.$inject = ['$compile', '$rootScope'];\n     *   injector.invoke(tmpFn);\n     *\n     *   // To better support inline function the inline annotation is supported\n     *   injector.invoke(['$compile', '$rootScope', function(obfCompile, obfRootScope) {\n *     // ...\n *   }]);\n     *\n     *   // Therefore\n     *   expect(injector.annotate(\n     *      ['$compile', '$rootScope', function(obfus_$compile, obfus_$rootScope) {}])\n     *    ).toEqual(['$compile', '$rootScope']);\n     * </pre>\n     *\n     * @param {function|Array.<string|Function>} fn Function for which dependent service names need to be retrieved as described\n     *   above.\n     *\n     * @returns {Array.<string>} The names of the services which the function requires.\n     */\n\n\n\n\n    /**\n     * @ngdoc object\n     * @name AUTO.$provide\n     *\n     * @description\n     *\n     * Use `$provide` to register new providers with the `$injector`. The providers are the factories for the instance.\n     * The providers share the same name as the instance they create with `Provider` suffixed to them.\n     *\n     * A provider is an object with a `$get()` method. The injector calls the `$get` method to create a new instance of\n     * a service. The Provider can have additional methods which would allow for configuration of the provider.\n     *\n     * <pre>\n     *   function GreetProvider() {\n *     var salutation = 'Hello';\n *\n *     this.salutation = function(text) {\n *       salutation = text;\n *     };\n *\n *     this.$get = function() {\n *       return function (name) {\n *         return salutation + ' ' + name + '!';\n *       };\n *     };\n *   }\n     *\n     *   describe('Greeter', function(){\n *\n *     beforeEach(module(function($provide) {\n *       $provide.provider('greet', GreetProvider);\n *     }));\n *\n *     it('should greet', inject(function(greet) {\n *       expect(greet('angular')).toEqual('Hello angular!');\n *     }));\n *\n *     it('should allow configuration of salutation', function() {\n *       module(function(greetProvider) {\n *         greetProvider.salutation('Ahoj');\n *       });\n *       inject(function(greet) {\n *         expect(greet('angular')).toEqual('Ahoj angular!');\n *       });\n *     });\n * </pre>\n */\n\n    /**\n     * @ngdoc method\n     * @name AUTO.$provide#provider\n     * @methodOf AUTO.$provide\n     * @description\n     *\n     * Register a provider for a service. The providers can be retrieved and can have additional configuration methods.\n     *\n     * @param {string} name The name of the instance. NOTE: the provider will be available under `name + 'Provider'` key.\n     * @param {(Object|function())} provider If the provider is:\n     *\n     *   - `Object`: then it should have a `$get` method. The `$get` method will be invoked using\n     *               {@link AUTO.$injector#invoke $injector.invoke()} when an instance needs to be created.\n     *   - `Constructor`: a new instance of the provider will be created using\n     *               {@link AUTO.$injector#instantiate $injector.instantiate()}, then treated as `object`.\n     *\n     * @returns {Object} registered provider instance\n     */\n\n    /**\n     * @ngdoc method\n     * @name AUTO.$provide#factory\n     * @methodOf AUTO.$provide\n     * @description\n     *\n     * A short hand for configuring services if only `$get` method is required.\n     *\n     * @param {string} name The name of the instance.\n     * @param {function()} $getFn The $getFn for the instance creation. Internally this is a short hand for\n     * `$provide.provider(name, {$get: $getFn})`.\n     * @returns {Object} registered provider instance\n     */\n\n\n    /**\n     * @ngdoc method\n     * @name AUTO.$provide#service\n     * @methodOf AUTO.$provide\n     * @description\n     *\n     * A short hand for registering service of given class.\n     *\n     * @param {string} name The name of the instance.\n     * @param {Function} constructor A class (constructor function) that will be instantiated.\n     * @returns {Object} registered provider instance\n     */\n\n\n    /**\n     * @ngdoc method\n     * @name AUTO.$provide#value\n     * @methodOf AUTO.$provide\n     * @description\n     *\n     * A short hand for configuring services if the `$get` method is a constant.\n     *\n     * @param {string} name The name of the instance.\n     * @param {*} value The value.\n     * @returns {Object} registered provider instance\n     */\n\n\n    /**\n     * @ngdoc method\n     * @name AUTO.$provide#constant\n     * @methodOf AUTO.$provide\n     * @description\n     *\n     * A constant value, but unlike {@link AUTO.$provide#value value} it can be injected\n     * into configuration function (other modules) and it is not interceptable by\n     * {@link AUTO.$provide#decorator decorator}.\n     *\n     * @param {string} name The name of the constant.\n     * @param {*} value The constant value.\n     * @returns {Object} registered instance\n     */\n\n\n    /**\n     * @ngdoc method\n     * @name AUTO.$provide#decorator\n     * @methodOf AUTO.$provide\n     * @description\n     *\n     * Decoration of service, allows the decorator to intercept the service instance creation. The\n     * returned instance may be the original instance, or a new instance which delegates to the\n     * original instance.\n     *\n     * @param {string} name The name of the service to decorate.\n     * @param {function()} decorator This function will be invoked when the service needs to be\n     *    instantiated. The function is called using the {@link AUTO.$injector#invoke\n     *    injector.invoke} method and is therefore fully injectable. Local injection arguments:\n     *\n     *    * `$delegate` - The original service instance, which can be monkey patched, configured,\n     *      decorated or delegated to.\n     */\n\n\n    function createInjector(modulesToLoad) {\n        var INSTANTIATING = {},\n            providerSuffix = 'Provider',\n            path = [],\n            loadedModules = new HashMap(),\n            providerCache = {\n                $provide: {\n                    provider: supportObject(provider),\n                    factory: supportObject(factory),\n                    service: supportObject(service),\n                    value: supportObject(value),\n                    constant: supportObject(constant),\n                    decorator: decorator\n                }\n            },\n            providerInjector = createInternalInjector(providerCache, function() {\n                throw Error(\"Unknown provider: \" + path.join(' <- '));\n            }),\n            instanceCache = {},\n            instanceInjector = (instanceCache.$injector =\n                createInternalInjector(instanceCache, function(servicename) {\n                    var provider = providerInjector.get(servicename + providerSuffix);\n                    return instanceInjector.invoke(provider.$get, provider);\n                }));\n\n\n        forEach(loadModules(modulesToLoad), function(fn) { instanceInjector.invoke(fn || noop); });\n\n        return instanceInjector;\n\n        ////////////////////////////////////\n        // $provider\n        ////////////////////////////////////\n\n        function supportObject(delegate) {\n            return function(key, value) {\n                if (isObject(key)) {\n                    forEach(key, reverseParams(delegate));\n                } else {\n                    return delegate(key, value);\n                }\n            }\n        }\n\n        function provider(name, provider_) {\n            if (isFunction(provider_) || isArray(provider_)) {\n                provider_ = providerInjector.instantiate(provider_);\n            }\n            if (!provider_.$get) {\n                throw Error('Provider ' + name + ' must define $get factory method.');\n            }\n            return providerCache[name + providerSuffix] = provider_;\n        }\n\n        function factory(name, factoryFn) { return provider(name, { $get: factoryFn }); }\n\n        function service(name, constructor) {\n            return factory(name, ['$injector', function($injector) {\n                return $injector.instantiate(constructor);\n            }]);\n        }\n\n        function value(name, value) { return factory(name, valueFn(value)); }\n\n        function constant(name, value) {\n            providerCache[name] = value;\n            instanceCache[name] = value;\n        }\n\n        function decorator(serviceName, decorFn) {\n            var origProvider = providerInjector.get(serviceName + providerSuffix),\n                orig$get = origProvider.$get;\n\n            origProvider.$get = function() {\n                var origInstance = instanceInjector.invoke(orig$get, origProvider);\n                return instanceInjector.invoke(decorFn, null, {$delegate: origInstance});\n            };\n        }\n\n        ////////////////////////////////////\n        // Module Loading\n        ////////////////////////////////////\n        function loadModules(modulesToLoad){\n            var runBlocks = [];\n            forEach(modulesToLoad, function(module) {\n                if (loadedModules.get(module)) return;\n                loadedModules.put(module, true);\n                if (isString(module)) {\n                    var moduleFn = angularModule(module);\n                    runBlocks = runBlocks.concat(loadModules(moduleFn.requires)).concat(moduleFn._runBlocks);\n\n                    try {\n                        for(var invokeQueue = moduleFn._invokeQueue, i = 0, ii = invokeQueue.length; i < ii; i++) {\n                            var invokeArgs = invokeQueue[i],\n                                provider = invokeArgs[0] == '$injector'\n                                    ? providerInjector\n                                    : providerInjector.get(invokeArgs[0]);\n\n                            provider[invokeArgs[1]].apply(provider, invokeArgs[2]);\n                        }\n                    } catch (e) {\n                        if (e.message) e.message += ' from ' + module;\n                        throw e;\n                    }\n                } else if (isFunction(module)) {\n                    try {\n                        runBlocks.push(providerInjector.invoke(module));\n                    } catch (e) {\n                        if (e.message) e.message += ' from ' + module;\n                        throw e;\n                    }\n                } else if (isArray(module)) {\n                    try {\n                        runBlocks.push(providerInjector.invoke(module));\n                    } catch (e) {\n                        if (e.message) e.message += ' from ' + String(module[module.length - 1]);\n                        throw e;\n                    }\n                } else {\n                    assertArgFn(module, 'module');\n                }\n            });\n            return runBlocks;\n        }\n\n        ////////////////////////////////////\n        // internal Injector\n        ////////////////////////////////////\n\n        function createInternalInjector(cache, factory) {\n\n            function getService(serviceName) {\n                if (typeof serviceName !== 'string') {\n                    throw Error('Service name expected');\n                }\n                if (cache.hasOwnProperty(serviceName)) {\n                    if (cache[serviceName] === INSTANTIATING) {\n                        throw Error('Circular dependency: ' + path.join(' <- '));\n                    }\n                    return cache[serviceName];\n                } else {\n                    try {\n                        path.unshift(serviceName);\n                        cache[serviceName] = INSTANTIATING;\n                        return cache[serviceName] = factory(serviceName);\n                    } finally {\n                        path.shift();\n                    }\n                }\n            }\n\n            function invoke(fn, self, locals){\n                var args = [],\n                    $inject = annotate(fn),\n                    length, i,\n                    key;\n\n                for(i = 0, length = $inject.length; i < length; i++) {\n                    key = $inject[i];\n                    args.push(\n                        locals && locals.hasOwnProperty(key)\n                            ? locals[key]\n                            : getService(key)\n                    );\n                }\n                if (!fn.$inject) {\n                    // this means that we must be an array.\n                    fn = fn[length];\n                }\n\n\n                // Performance optimization: http://jsperf.com/apply-vs-call-vs-invoke\n                switch (self ? -1 : args.length) {\n                    case  0: return fn();\n                    case  1: return fn(args[0]);\n                    case  2: return fn(args[0], args[1]);\n                    case  3: return fn(args[0], args[1], args[2]);\n                    case  4: return fn(args[0], args[1], args[2], args[3]);\n                    case  5: return fn(args[0], args[1], args[2], args[3], args[4]);\n                    case  6: return fn(args[0], args[1], args[2], args[3], args[4], args[5]);\n                    case  7: return fn(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);\n                    case  8: return fn(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]);\n                    case  9: return fn(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]);\n                    case 10: return fn(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]);\n                    default: return fn.apply(self, args);\n                }\n            }\n\n            function instantiate(Type, locals) {\n                var Constructor = function() {},\n                    instance, returnedValue;\n\n                // Check if Type is annotated and use just the given function at n-1 as parameter\n                // e.g. someModule.factory('greeter', ['$window', function(renamed$window) {}]);\n                Constructor.prototype = (isArray(Type) ? Type[Type.length - 1] : Type).prototype;\n                instance = new Constructor();\n                returnedValue = invoke(Type, instance, locals);\n\n                return isObject(returnedValue) ? returnedValue : instance;\n            }\n\n            return {\n                invoke: invoke,\n                instantiate: instantiate,\n                get: getService,\n                annotate: annotate\n            };\n        }\n    }\n\n    /**\n     * @ngdoc function\n     * @name ng.$anchorScroll\n     * @requires $window\n     * @requires $location\n     * @requires $rootScope\n     *\n     * @description\n     * When called, it checks current value of `$location.hash()` and scroll to related element,\n     * according to rules specified in\n     * {@link http://dev.w3.org/html5/spec/Overview.html#the-indicated-part-of-the-document Html5 spec}.\n     *\n     * It also watches the `$location.hash()` and scroll whenever it changes to match any anchor.\n     * This can be disabled by calling `$anchorScrollProvider.disableAutoScrolling()`.\n     */\n    function $AnchorScrollProvider() {\n\n        var autoScrollingEnabled = true;\n\n        this.disableAutoScrolling = function() {\n            autoScrollingEnabled = false;\n        };\n\n        this.$get = ['$window', '$location', '$rootScope', function($window, $location, $rootScope) {\n            var document = $window.document;\n\n            // helper function to get first anchor from a NodeList\n            // can't use filter.filter, as it accepts only instances of Array\n            // and IE can't convert NodeList to an array using [].slice\n            // TODO(vojta): use filter if we change it to accept lists as well\n            function getFirstAnchor(list) {\n                var result = null;\n                forEach(list, function(element) {\n                    if (!result && lowercase(element.nodeName) === 'a') result = element;\n                });\n                return result;\n            }\n\n            function scroll() {\n                var hash = $location.hash(), elm;\n\n                // empty hash, scroll to the top of the page\n                if (!hash) $window.scrollTo(0, 0);\n\n                // element with given id\n                else if ((elm = document.getElementById(hash))) elm.scrollIntoView();\n\n                // first anchor with given name :-D\n                else if ((elm = getFirstAnchor(document.getElementsByName(hash)))) elm.scrollIntoView();\n\n                // no element and hash == 'top', scroll to the top of the page\n                else if (hash === 'top') $window.scrollTo(0, 0);\n            }\n\n            // does not scroll when user clicks on anchor link that is currently on\n            // (no url change, no $location.hash() change), browser native does scroll\n            if (autoScrollingEnabled) {\n                $rootScope.$watch(function autoScrollWatch() {return $location.hash();},\n                    function autoScrollWatchAction() {\n                        $rootScope.$evalAsync(scroll);\n                    });\n            }\n\n            return scroll;\n        }];\n    }\n\n    /**\n     * ! This is a private undocumented service !\n     *\n     * @name ng.$browser\n     * @requires $log\n     * @description\n     * This object has two goals:\n     *\n     * - hide all the global state in the browser caused by the window object\n     * - abstract away all the browser specific features and inconsistencies\n     *\n     * For tests we provide {@link ngMock.$browser mock implementation} of the `$browser`\n     * service, which can be used for convenient testing of the application without the interaction with\n     * the real browser apis.\n     */\n    /**\n     * @param {object} window The global window object.\n     * @param {object} document jQuery wrapped document.\n     * @param {function()} XHR XMLHttpRequest constructor.\n     * @param {object} $log console.log or an object with the same interface.\n     * @param {object} $sniffer $sniffer service\n     */\n    function Browser(window, document, $log, $sniffer) {\n        var self = this,\n            rawDocument = document[0],\n            location = window.location,\n            history = window.history,\n            setTimeout = window.setTimeout,\n            clearTimeout = window.clearTimeout,\n            pendingDeferIds = {};\n\n        self.isMock = false;\n\n        var outstandingRequestCount = 0;\n        var outstandingRequestCallbacks = [];\n\n        // TODO(vojta): remove this temporary api\n        self.$$completeOutstandingRequest = completeOutstandingRequest;\n        self.$$incOutstandingRequestCount = function() { outstandingRequestCount++; };\n\n        /**\n         * Executes the `fn` function(supports currying) and decrements the `outstandingRequestCallbacks`\n         * counter. If the counter reaches 0, all the `outstandingRequestCallbacks` are executed.\n         */\n        function completeOutstandingRequest(fn) {\n            try {\n                fn.apply(null, sliceArgs(arguments, 1));\n            } finally {\n                outstandingRequestCount--;\n                if (outstandingRequestCount === 0) {\n                    while(outstandingRequestCallbacks.length) {\n                        try {\n                            outstandingRequestCallbacks.pop()();\n                        } catch (e) {\n                            $log.error(e);\n                        }\n                    }\n                }\n            }\n        }\n\n        /**\n         * @private\n         * Note: this method is used only by scenario runner\n         * TODO(vojta): prefix this method with $$ ?\n         * @param {function()} callback Function that will be called when no outstanding request\n         */\n        self.notifyWhenNoOutstandingRequests = function(callback) {\n            // force browser to execute all pollFns - this is needed so that cookies and other pollers fire\n            // at some deterministic time in respect to the test runner's actions. Leaving things up to the\n            // regular poller would result in flaky tests.\n            forEach(pollFns, function(pollFn){ pollFn(); });\n\n            if (outstandingRequestCount === 0) {\n                callback();\n            } else {\n                outstandingRequestCallbacks.push(callback);\n            }\n        };\n\n        //////////////////////////////////////////////////////////////\n        // Poll Watcher API\n        //////////////////////////////////////////////////////////////\n        var pollFns = [],\n            pollTimeout;\n\n        /**\n         * @name ng.$browser#addPollFn\n         * @methodOf ng.$browser\n         *\n         * @param {function()} fn Poll function to add\n         *\n         * @description\n         * Adds a function to the list of functions that poller periodically executes,\n         * and starts polling if not started yet.\n         *\n         * @returns {function()} the added function\n         */\n        self.addPollFn = function(fn) {\n            if (isUndefined(pollTimeout)) startPoller(100, setTimeout);\n            pollFns.push(fn);\n            return fn;\n        };\n\n        /**\n         * @param {number} interval How often should browser call poll functions (ms)\n         * @param {function()} setTimeout Reference to a real or fake `setTimeout` function.\n         *\n         * @description\n         * Configures the poller to run in the specified intervals, using the specified\n         * setTimeout fn and kicks it off.\n         */\n        function startPoller(interval, setTimeout) {\n            (function check() {\n                forEach(pollFns, function(pollFn){ pollFn(); });\n                pollTimeout = setTimeout(check, interval);\n            })();\n        }\n\n        //////////////////////////////////////////////////////////////\n        // URL API\n        //////////////////////////////////////////////////////////////\n\n        var lastBrowserUrl = location.href,\n            baseElement = document.find('base');\n\n        /**\n         * @name ng.$browser#url\n         * @methodOf ng.$browser\n         *\n         * @description\n         * GETTER:\n         * Without any argument, this method just returns current value of location.href.\n         *\n         * SETTER:\n         * With at least one argument, this method sets url to new value.\n         * If html5 history api supported, pushState/replaceState is used, otherwise\n         * location.href/location.replace is used.\n         * Returns its own instance to allow chaining\n         *\n         * NOTE: this api is intended for use only by the $location service. Please use the\n         * {@link ng.$location $location service} to change url.\n         *\n         * @param {string} url New url (when used as setter)\n         * @param {boolean=} replace Should new url replace current history record ?\n         */\n        self.url = function(url, replace) {\n            // setter\n            if (url) {\n                if (lastBrowserUrl == url) return;\n                lastBrowserUrl = url;\n                if ($sniffer.history) {\n                    if (replace) history.replaceState(null, '', url);\n                    else {\n                        history.pushState(null, '', url);\n                        // Crazy Opera Bug: http://my.opera.com/community/forums/topic.dml?id=1185462\n                        baseElement.attr('href', baseElement.attr('href'));\n                    }\n                } else {\n                    if (replace) location.replace(url);\n                    else location.href = url;\n                }\n                return self;\n                // getter\n            } else {\n                // the replacement is a workaround for https://bugzilla.mozilla.org/show_bug.cgi?id=407172\n                return location.href.replace(/%27/g,\"'\");\n            }\n        };\n\n        var urlChangeListeners = [],\n            urlChangeInit = false;\n\n        function fireUrlChange() {\n            if (lastBrowserUrl == self.url()) return;\n\n            lastBrowserUrl = self.url();\n            forEach(urlChangeListeners, function(listener) {\n                listener(self.url());\n            });\n        }\n\n        /**\n         * @name ng.$browser#onUrlChange\n         * @methodOf ng.$browser\n         * @TODO(vojta): refactor to use node's syntax for events\n         *\n         * @description\n         * Register callback function that will be called, when url changes.\n         *\n         * It's only called when the url is changed by outside of angular:\n         * - user types different url into address bar\n         * - user clicks on history (forward/back) button\n         * - user clicks on a link\n         *\n         * It's not called when url is changed by $browser.url() method\n         *\n         * The listener gets called with new url as parameter.\n         *\n         * NOTE: this api is intended for use only by the $location service. Please use the\n         * {@link ng.$location $location service} to monitor url changes in angular apps.\n         *\n         * @param {function(string)} listener Listener function to be called when url changes.\n         * @return {function(string)} Returns the registered listener fn - handy if the fn is anonymous.\n         */\n        self.onUrlChange = function(callback) {\n            if (!urlChangeInit) {\n                // We listen on both (hashchange/popstate) when available, as some browsers (e.g. Opera)\n                // don't fire popstate when user change the address bar and don't fire hashchange when url\n                // changed by push/replaceState\n\n                // html5 history api - popstate event\n                if ($sniffer.history) jqLite(window).bind('popstate', fireUrlChange);\n                // hashchange event\n                if ($sniffer.hashchange) jqLite(window).bind('hashchange', fireUrlChange);\n                // polling\n                else self.addPollFn(fireUrlChange);\n\n                urlChangeInit = true;\n            }\n\n            urlChangeListeners.push(callback);\n            return callback;\n        };\n\n        //////////////////////////////////////////////////////////////\n        // Misc API\n        //////////////////////////////////////////////////////////////\n\n        /**\n         * Returns current <base href>\n         * (always relative - without domain)\n         *\n         * @returns {string=}\n         */\n        self.baseHref = function() {\n            var href = baseElement.attr('href');\n            return href ? href.replace(/^https?\\:\\/\\/[^\\/]*/, '') : '';\n        };\n\n        //////////////////////////////////////////////////////////////\n        // Cookies API\n        //////////////////////////////////////////////////////////////\n        var lastCookies = {};\n        var lastCookieString = '';\n        var cookiePath = self.baseHref();\n\n        /**\n         * @name ng.$browser#cookies\n         * @methodOf ng.$browser\n         *\n         * @param {string=} name Cookie name\n         * @param {string=} value Cokkie value\n         *\n         * @description\n         * The cookies method provides a 'private' low level access to browser cookies.\n         * It is not meant to be used directly, use the $cookie service instead.\n         *\n         * The return values vary depending on the arguments that the method was called with as follows:\n         * <ul>\n         *   <li>cookies() -> hash of all cookies, this is NOT a copy of the internal state, so do not modify it</li>\n         *   <li>cookies(name, value) -> set name to value, if value is undefined delete the cookie</li>\n         *   <li>cookies(name) -> the same as (name, undefined) == DELETES (no one calls it right now that way)</li>\n         * </ul>\n         *\n         * @returns {Object} Hash of all cookies (if called without any parameter)\n         */\n        self.cookies = function(name, value) {\n            var cookieLength, cookieArray, cookie, i, index;\n\n            if (name) {\n                if (value === undefined) {\n                    rawDocument.cookie = escape(name) + \"=;path=\" + cookiePath + \";expires=Thu, 01 Jan 1970 00:00:00 GMT\";\n                } else {\n                    if (isString(value)) {\n                        cookieLength = (rawDocument.cookie = escape(name) + '=' + escape(value) + ';path=' + cookiePath).length + 1;\n\n                        // per http://www.ietf.org/rfc/rfc2109.txt browser must allow at minimum:\n                        // - 300 cookies\n                        // - 20 cookies per unique domain\n                        // - 4096 bytes per cookie\n                        if (cookieLength > 4096) {\n                            $log.warn(\"Cookie '\"+ name +\"' possibly not set or overflowed because it was too large (\"+\n                                cookieLength + \" > 4096 bytes)!\");\n                        }\n                    }\n                }\n            } else {\n                if (rawDocument.cookie !== lastCookieString) {\n                    lastCookieString = rawDocument.cookie;\n                    cookieArray = lastCookieString.split(\"; \");\n                    lastCookies = {};\n\n                    for (i = 0; i < cookieArray.length; i++) {\n                        cookie = cookieArray[i];\n                        index = cookie.indexOf('=');\n                        if (index > 0) { //ignore nameless cookies\n                            var name = unescape(cookie.substring(0, index));\n                            // the first value that is seen for a cookie is the most\n                            // specific one.  values for the same cookie name that\n                            // follow are for less specific paths.\n                            if (lastCookies[name] === undefined) {\n                                lastCookies[name] = unescape(cookie.substring(index + 1));\n                            }\n                        }\n                    }\n                }\n                return lastCookies;\n            }\n        };\n\n\n        /**\n         * @name ng.$browser#defer\n         * @methodOf ng.$browser\n         * @param {function()} fn A function, who's execution should be defered.\n         * @param {number=} [delay=0] of milliseconds to defer the function execution.\n         * @returns {*} DeferId that can be used to cancel the task via `$browser.defer.cancel()`.\n         *\n         * @description\n         * Executes a fn asynchroniously via `setTimeout(fn, delay)`.\n         *\n         * Unlike when calling `setTimeout` directly, in test this function is mocked and instead of using\n         * `setTimeout` in tests, the fns are queued in an array, which can be programmatically flushed\n         * via `$browser.defer.flush()`.\n         *\n         */\n        self.defer = function(fn, delay) {\n            var timeoutId;\n            outstandingRequestCount++;\n            timeoutId = setTimeout(function() {\n                delete pendingDeferIds[timeoutId];\n                completeOutstandingRequest(fn);\n            }, delay || 0);\n            pendingDeferIds[timeoutId] = true;\n            return timeoutId;\n        };\n\n\n        /**\n         * @name ng.$browser#defer.cancel\n         * @methodOf ng.$browser.defer\n         *\n         * @description\n         * Cancels a defered task identified with `deferId`.\n         *\n         * @param {*} deferId Token returned by the `$browser.defer` function.\n         * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfuly canceled.\n         */\n        self.defer.cancel = function(deferId) {\n            if (pendingDeferIds[deferId]) {\n                delete pendingDeferIds[deferId];\n                clearTimeout(deferId);\n                completeOutstandingRequest(noop);\n                return true;\n            }\n            return false;\n        };\n\n    }\n\n    function $BrowserProvider(){\n        this.$get = ['$window', '$log', '$sniffer', '$document',\n            function( $window,   $log,   $sniffer,   $document){\n                return new Browser($window, $document, $log, $sniffer);\n            }];\n    }\n\n    /**\n     * @ngdoc object\n     * @name ng.$cacheFactory\n     *\n     * @description\n     * Factory that constructs cache objects.\n     *\n     *\n     * @param {string} cacheId Name or id of the newly created cache.\n     * @param {object=} options Options object that specifies the cache behavior. Properties:\n     *\n     *   - `{number=}` `capacity` \u2014 turns the cache into LRU cache.\n     *\n     * @returns {object} Newly created cache object with the following set of methods:\n     *\n     * - `{object}` `info()` \u2014 Returns id, size, and options of cache.\n     * - `{void}` `put({string} key, {*} value)` \u2014 Puts a new key-value pair into the cache.\n     * - `{{*}}` `get({string} key)` \u2014 Returns cached value for `key` or undefined for cache miss.\n     * - `{void}` `remove({string} key)` \u2014 Removes a key-value pair from the cache.\n     * - `{void}` `removeAll()` \u2014 Removes all cached values.\n     * - `{void}` `destroy()` \u2014 Removes references to this cache from $cacheFactory.\n     *\n     */\n    function $CacheFactoryProvider() {\n\n        this.$get = function() {\n            var caches = {};\n\n            function cacheFactory(cacheId, options) {\n                if (cacheId in caches) {\n                    throw Error('cacheId ' + cacheId + ' taken');\n                }\n\n                var size = 0,\n                    stats = extend({}, options, {id: cacheId}),\n                    data = {},\n                    capacity = (options && options.capacity) || Number.MAX_VALUE,\n                    lruHash = {},\n                    freshEnd = null,\n                    staleEnd = null;\n\n                return caches[cacheId] = {\n\n                    put: function(key, value) {\n                        var lruEntry = lruHash[key] || (lruHash[key] = {key: key});\n\n                        refresh(lruEntry);\n\n                        if (isUndefined(value)) return;\n                        if (!(key in data)) size++;\n                        data[key] = value;\n\n                        if (size > capacity) {\n                            this.remove(staleEnd.key);\n                        }\n                    },\n\n\n                    get: function(key) {\n                        var lruEntry = lruHash[key];\n\n                        if (!lruEntry) return;\n\n                        refresh(lruEntry);\n\n                        return data[key];\n                    },\n\n\n                    remove: function(key) {\n                        var lruEntry = lruHash[key];\n\n                        if (!lruEntry) return;\n\n                        if (lruEntry == freshEnd) freshEnd = lruEntry.p;\n                        if (lruEntry == staleEnd) staleEnd = lruEntry.n;\n                        link(lruEntry.n,lruEntry.p);\n\n                        delete lruHash[key];\n                        delete data[key];\n                        size--;\n                    },\n\n\n                    removeAll: function() {\n                        data = {};\n                        size = 0;\n                        lruHash = {};\n                        freshEnd = staleEnd = null;\n                    },\n\n\n                    destroy: function() {\n                        data = null;\n                        stats = null;\n                        lruHash = null;\n                        delete caches[cacheId];\n                    },\n\n\n                    info: function() {\n                        return extend({}, stats, {size: size});\n                    }\n                };\n\n\n                /**\n                 * makes the `entry` the freshEnd of the LRU linked list\n                 */\n                function refresh(entry) {\n                    if (entry != freshEnd) {\n                        if (!staleEnd) {\n                            staleEnd = entry;\n                        } else if (staleEnd == entry) {\n                            staleEnd = entry.n;\n                        }\n\n                        link(entry.n, entry.p);\n                        link(entry, freshEnd);\n                        freshEnd = entry;\n                        freshEnd.n = null;\n                    }\n                }\n\n\n                /**\n                 * bidirectionally links two entries of the LRU linked list\n                 */\n                function link(nextEntry, prevEntry) {\n                    if (nextEntry != prevEntry) {\n                        if (nextEntry) nextEntry.p = prevEntry; //p stands for previous, 'prev' didn't minify\n                        if (prevEntry) prevEntry.n = nextEntry; //n stands for next, 'next' didn't minify\n                    }\n                }\n            }\n\n\n            cacheFactory.info = function() {\n                var info = {};\n                forEach(caches, function(cache, cacheId) {\n                    info[cacheId] = cache.info();\n                });\n                return info;\n            };\n\n\n            cacheFactory.get = function(cacheId) {\n                return caches[cacheId];\n            };\n\n\n            return cacheFactory;\n        };\n    }\n\n    /**\n     * @ngdoc object\n     * @name ng.$templateCache\n     *\n     * @description\n     * Cache used for storing html templates.\n     *\n     * See {@link ng.$cacheFactory $cacheFactory}.\n     *\n     */\n    function $TemplateCacheProvider() {\n        this.$get = ['$cacheFactory', function($cacheFactory) {\n            return $cacheFactory('templates');\n        }];\n    }\n\n    /* ! VARIABLE/FUNCTION NAMING CONVENTIONS THAT APPLY TO THIS FILE!\n     *\n     * DOM-related variables:\n     *\n     * - \"node\" - DOM Node\n     * - \"element\" - DOM Element or Node\n     * - \"$node\" or \"$element\" - jqLite-wrapped node or element\n     *\n     *\n     * Compiler related stuff:\n     *\n     * - \"linkFn\" - linking fn of a single directive\n     * - \"nodeLinkFn\" - function that aggregates all linking fns for a particular node\n     * - \"childLinkFn\" -  function that aggregates all linking fns for child nodes of a particular node\n     * - \"compositeLinkFn\" - function that aggregates all linking fns for a compilation root (nodeList)\n     */\n\n\n    var NON_ASSIGNABLE_MODEL_EXPRESSION = 'Non-assignable model expression: ';\n\n\n    /**\n     * @ngdoc function\n     * @name ng.$compile\n     * @function\n     *\n     * @description\n     * Compiles a piece of HTML string or DOM into a template and produces a template function, which\n     * can then be used to link {@link ng.$rootScope.Scope scope} and the template together.\n     *\n     * The compilation is a process of walking the DOM tree and trying to match DOM elements to\n     * {@link ng.$compileProvider#directive directives}. For each match it\n     * executes corresponding template function and collects the\n     * instance functions into a single template function which is then returned.\n     *\n     * The template function can then be used once to produce the view or as it is the case with\n     * {@link ng.directive:ngRepeat repeater} many-times, in which\n     * case each call results in a view that is a DOM clone of the original template.\n     *\n     <doc:example module=\"compile\">\n     <doc:source>\n     <script>\n     // declare a new module, and inject the $compileProvider\n     angular.module('compile', [], function($compileProvider) {\n        // configure new 'compile' directive by passing a directive\n        // factory function. The factory function injects the '$compile'\n        $compileProvider.directive('compile', function($compile) {\n          // directive factory creates a link function\n          return function(scope, element, attrs) {\n            scope.$watch(\n              function(scope) {\n                 // watch the 'compile' expression for changes\n                return scope.$eval(attrs.compile);\n              },\n              function(value) {\n                // when the 'compile' expression changes\n                // assign it into the current DOM\n                element.html(value);\n\n                // compile the new DOM and link it to the current\n                // scope.\n                // NOTE: we only compile .childNodes so that\n                // we don't get into infinite loop compiling ourselves\n                $compile(element.contents())(scope);\n              }\n            );\n          };\n        })\n      });\n\n     function Ctrl($scope) {\n        $scope.name = 'Angular';\n        $scope.html = 'Hello {{name}}';\n      }\n     </script>\n     <div ng-controller=\"Ctrl\">\n     <input ng-model=\"name\"> <br>\n     <textarea ng-model=\"html\"></textarea> <br>\n     <div compile=\"html\"></div>\n     </div>\n     </doc:source>\n     <doc:scenario>\n     it('should auto compile', function() {\n       expect(element('div[compile]').text()).toBe('Hello Angular');\n       input('html').enter('{{name}}!');\n       expect(element('div[compile]').text()).toBe('Angular!');\n     });\n     </doc:scenario>\n     </doc:example>\n\n     *\n     *\n     * @param {string|DOMElement} element Element or HTML string to compile into a template function.\n     * @param {function(angular.Scope[, cloneAttachFn]} transclude function available to directives.\n     * @param {number} maxPriority only apply directives lower then given priority (Only effects the\n     *                 root element(s), not their children)\n     * @returns {function(scope[, cloneAttachFn])} a link function which is used to bind template\n     * (a DOM element/tree) to a scope. Where:\n     *\n     *  * `scope` - A {@link ng.$rootScope.Scope Scope} to bind to.\n     *  * `cloneAttachFn` - If `cloneAttachFn` is provided, then the link function will clone the\n     *               `template` and call the `cloneAttachFn` function allowing the caller to attach the\n     *               cloned elements to the DOM document at the appropriate place. The `cloneAttachFn` is\n     *               called as: <br> `cloneAttachFn(clonedElement, scope)` where:\n     *\n     *      * `clonedElement` - is a clone of the original `element` passed into the compiler.\n     *      * `scope` - is the current scope with which the linking function is working with.\n     *\n     * Calling the linking function returns the element of the template. It is either the original element\n     * passed in, or the clone of the element if the `cloneAttachFn` is provided.\n     *\n     * After linking the view is not updated until after a call to $digest which typically is done by\n     * Angular automatically.\n     *\n     * If you need access to the bound view, there are two ways to do it:\n     *\n     * - If you are not asking the linking function to clone the template, create the DOM element(s)\n     *   before you send them to the compiler and keep this reference around.\n     *   <pre>\n     *     var element = $compile('<p>{{total}}</p>')(scope);\n     *   </pre>\n     *\n     * - if on the other hand, you need the element to be cloned, the view reference from the original\n     *   example would not point to the clone, but rather to the original template that was cloned. In\n     *   this case, you can access the clone via the cloneAttachFn:\n     *   <pre>\n     *     var templateHTML = angular.element('<p>{{total}}</p>'),\n     *         scope = ....;\n     *\n     *     var clonedElement = $compile(templateHTML)(scope, function(clonedElement, scope) {\n *       //attach the clone to DOM document at the right place\n *     });\n     *\n     *     //now we have reference to the cloned DOM via `clone`\n     *   </pre>\n     *\n     *\n     * For information on how the compiler works, see the\n     * {@link guide/compiler Angular HTML Compiler} section of the Developer Guide.\n     */\n\n\n    /**\n     * @ngdoc service\n     * @name ng.$compileProvider\n     * @function\n     *\n     * @description\n     */\n    $CompileProvider.$inject = ['$provide'];\n    function $CompileProvider($provide) {\n        var hasDirectives = {},\n            Suffix = 'Directive',\n            COMMENT_DIRECTIVE_REGEXP = /^\\s*directive\\:\\s*([\\d\\w\\-_]+)\\s+(.*)$/,\n            CLASS_DIRECTIVE_REGEXP = /(([\\d\\w\\-_]+)(?:\\:([^;]+))?;?)/,\n            MULTI_ROOT_TEMPLATE_ERROR = 'Template must have exactly one root element. was: ',\n            urlSanitizationWhitelist = /^\\s*(https?|ftp|mailto|file):/;\n\n\n        /**\n         * @ngdoc function\n         * @name ng.$compileProvider#directive\n         * @methodOf ng.$compileProvider\n         * @function\n         *\n         * @description\n         * Register a new directives with the compiler.\n         *\n         * @param {string} name Name of the directive in camel-case. (ie <code>ngBind</code> which will match as\n         *                <code>ng-bind</code>).\n         * @param {function} directiveFactory An injectable directive factroy function. See {@link guide/directive} for more\n         *                info.\n         * @returns {ng.$compileProvider} Self for chaining.\n         */\n        this.directive = function registerDirective(name, directiveFactory) {\n            if (isString(name)) {\n                assertArg(directiveFactory, 'directive');\n                if (!hasDirectives.hasOwnProperty(name)) {\n                    hasDirectives[name] = [];\n                    $provide.factory(name + Suffix, ['$injector', '$exceptionHandler',\n                        function($injector, $exceptionHandler) {\n                            var directives = [];\n                            forEach(hasDirectives[name], function(directiveFactory) {\n                                try {\n                                    var directive = $injector.invoke(directiveFactory);\n                                    if (isFunction(directive)) {\n                                        directive = { compile: valueFn(directive) };\n                                    } else if (!directive.compile && directive.link) {\n                                        directive.compile = valueFn(directive.link);\n                                    }\n                                    directive.priority = directive.priority || 0;\n                                    directive.name = directive.name || name;\n                                    directive.require = directive.require || (directive.controller && directive.name);\n                                    directive.restrict = directive.restrict || 'A';\n                                    directives.push(directive);\n                                } catch (e) {\n                                    $exceptionHandler(e);\n                                }\n                            });\n                            return directives;\n                        }]);\n                }\n                hasDirectives[name].push(directiveFactory);\n            } else {\n                forEach(name, reverseParams(registerDirective));\n            }\n            return this;\n        };\n\n\n        /**\n         * @ngdoc function\n         * @name ng.$compileProvider#urlSanitizationWhitelist\n         * @methodOf ng.$compileProvider\n         * @function\n         *\n         * @description\n         * Retrieves or overrides the default regular expression that is used for whitelisting of safe\n         * urls during a[href] sanitization.\n         *\n         * The sanitization is a security measure aimed at prevent XSS attacks via html links.\n         *\n         * Any url about to be assigned to a[href] via data-binding is first normalized and turned into an\n         * absolute url. Afterwards the url is matched against the `urlSanitizationWhitelist` regular\n         * expression. If a match is found the original url is written into the dom. Otherwise the\n         * absolute url is prefixed with `'unsafe:'` string and only then it is written into the DOM.\n         *\n         * @param {RegExp=} regexp New regexp to whitelist urls with.\n         * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for\n         *    chaining otherwise.\n         */\n        this.urlSanitizationWhitelist = function(regexp) {\n            if (isDefined(regexp)) {\n                urlSanitizationWhitelist = regexp;\n                return this;\n            }\n            return urlSanitizationWhitelist;\n        };\n\n\n        this.$get = [\n            '$injector', '$interpolate', '$exceptionHandler', '$http', '$templateCache', '$parse',\n            '$controller', '$rootScope', '$document',\n            function($injector,   $interpolate,   $exceptionHandler,   $http,   $templateCache,   $parse,\n                     $controller,   $rootScope,   $document) {\n\n                var Attributes = function(element, attr) {\n                    this.$$element = element;\n                    this.$attr = attr || {};\n                };\n\n                Attributes.prototype = {\n                    $normalize: directiveNormalize,\n\n\n                    /**\n                     * Set a normalized attribute on the element in a way such that all directives\n                     * can share the attribute. This function properly handles boolean attributes.\n                     * @param {string} key Normalized key. (ie ngAttribute)\n                     * @param {string|boolean} value The value to set. If `null` attribute will be deleted.\n                     * @param {boolean=} writeAttr If false, does not write the value to DOM element attribute.\n                     *     Defaults to true.\n                     * @param {string=} attrName Optional none normalized name. Defaults to key.\n                     */\n                    $set: function(key, value, writeAttr, attrName) {\n                        var booleanKey = getBooleanAttrName(this.$$element[0], key),\n                            $$observers = this.$$observers,\n                            normalizedVal;\n\n                        if (booleanKey) {\n                            this.$$element.prop(key, value);\n                            attrName = booleanKey;\n                        }\n\n                        this[key] = value;\n\n                        // translate normalized key to actual key\n                        if (attrName) {\n                            this.$attr[key] = attrName;\n                        } else {\n                            attrName = this.$attr[key];\n                            if (!attrName) {\n                                this.$attr[key] = attrName = snake_case(key, '-');\n                            }\n                        }\n\n\n                        // sanitize a[href] values\n                        if (nodeName_(this.$$element[0]) === 'A' && key === 'href') {\n                            urlSanitizationNode.setAttribute('href', value);\n\n                            // href property always returns normalized absolute url, so we can match against that\n                            normalizedVal = urlSanitizationNode.href;\n                            if (!normalizedVal.match(urlSanitizationWhitelist)) {\n                                this[key] = value = 'unsafe:' + normalizedVal;\n                            }\n                        }\n\n\n                        if (writeAttr !== false) {\n                            if (value === null || value === undefined) {\n                                this.$$element.removeAttr(attrName);\n                            } else {\n                                this.$$element.attr(attrName, value);\n                            }\n                        }\n\n                        // fire observers\n                        $$observers && forEach($$observers[key], function(fn) {\n                            try {\n                                fn(value);\n                            } catch (e) {\n                                $exceptionHandler(e);\n                            }\n                        });\n                    },\n\n\n                    /**\n                     * Observe an interpolated attribute.\n                     * The observer will never be called, if given attribute is not interpolated.\n                     *\n                     * @param {string} key Normalized key. (ie ngAttribute) .\n                     * @param {function(*)} fn Function that will be called whenever the attribute value changes.\n                     * @returns {function(*)} the `fn` Function passed in.\n                     */\n                    $observe: function(key, fn) {\n                        var attrs = this,\n                            $$observers = (attrs.$$observers || (attrs.$$observers = {})),\n                            listeners = ($$observers[key] || ($$observers[key] = []));\n\n                        listeners.push(fn);\n                        $rootScope.$evalAsync(function() {\n                            if (!listeners.$$inter) {\n                                // no one registered attribute interpolation function, so lets call it manually\n                                fn(attrs[key]);\n                            }\n                        });\n                        return fn;\n                    }\n                };\n\n                var urlSanitizationNode = $document[0].createElement('a'),\n                    startSymbol = $interpolate.startSymbol(),\n                    endSymbol = $interpolate.endSymbol(),\n                    denormalizeTemplate = (startSymbol == '{{' || endSymbol  == '}}')\n                        ? identity\n                        : function denormalizeTemplate(template) {\n                        return template.replace(/\\{\\{/g, startSymbol).replace(/}}/g, endSymbol);\n                    };\n\n\n                return compile;\n\n                //================================\n\n                function compile($compileNodes, transcludeFn, maxPriority) {\n                    if (!($compileNodes instanceof jqLite)) {\n                        // jquery always rewraps, whereas we need to preserve the original selector so that we can modify it.\n                        $compileNodes = jqLite($compileNodes);\n                    }\n                    // We can not compile top level text elements since text nodes can be merged and we will\n                    // not be able to attach scope data to them, so we will wrap them in <span>\n                    forEach($compileNodes, function(node, index){\n                        if (node.nodeType == 3 /* text node */ && node.nodeValue.match(/\\S+/) /* non-empty */ ) {\n                            $compileNodes[index] = jqLite(node).wrap('<span></span>').parent()[0];\n                        }\n                    });\n                    var compositeLinkFn = compileNodes($compileNodes, transcludeFn, $compileNodes, maxPriority);\n                    return function publicLinkFn(scope, cloneConnectFn){\n                        assertArg(scope, 'scope');\n                        // important!!: we must call our jqLite.clone() since the jQuery one is trying to be smart\n                        // and sometimes changes the structure of the DOM.\n                        var $linkNode = cloneConnectFn\n                            ? JQLitePrototype.clone.call($compileNodes) // IMPORTANT!!!\n                            : $compileNodes;\n\n                        // Attach scope only to non-text nodes.\n                        for(var i = 0, ii = $linkNode.length; i<ii; i++) {\n                            var node = $linkNode[i];\n                            if (node.nodeType == 1 /* element */ || node.nodeType == 9 /* document */) {\n                                $linkNode.eq(i).data('$scope', scope);\n                            }\n                        }\n                        safeAddClass($linkNode, 'ng-scope');\n                        if (cloneConnectFn) cloneConnectFn($linkNode, scope);\n                        if (compositeLinkFn) compositeLinkFn(scope, $linkNode, $linkNode);\n                        return $linkNode;\n                    };\n                }\n\n                function wrongMode(localName, mode) {\n                    throw Error(\"Unsupported '\" + mode + \"' for '\" + localName + \"'.\");\n                }\n\n                function safeAddClass($element, className) {\n                    try {\n                        $element.addClass(className);\n                    } catch(e) {\n                        // ignore, since it means that we are trying to set class on\n                        // SVG element, where class name is read-only.\n                    }\n                }\n\n                /**\n                 * Compile function matches each node in nodeList against the directives. Once all directives\n                 * for a particular node are collected their compile functions are executed. The compile\n                 * functions return values - the linking functions - are combined into a composite linking\n                 * function, which is the a linking function for the node.\n                 *\n                 * @param {NodeList} nodeList an array of nodes or NodeList to compile\n                 * @param {function(angular.Scope[, cloneAttachFn]} transcludeFn A linking function, where the\n                 *        scope argument is auto-generated to the new child of the transcluded parent scope.\n                 * @param {DOMElement=} $rootElement If the nodeList is the root of the compilation tree then the\n                 *        rootElement must be set the jqLite collection of the compile root. This is\n                 *        needed so that the jqLite collection items can be replaced with widgets.\n                 * @param {number=} max directive priority\n                 * @returns {?function} A composite linking function of all of the matched directives or null.\n                 */\n                function compileNodes(nodeList, transcludeFn, $rootElement, maxPriority) {\n                    var linkFns = [],\n                        nodeLinkFn, childLinkFn, directives, attrs, linkFnFound;\n\n                    for(var i = 0; i < nodeList.length; i++) {\n                        attrs = new Attributes();\n\n                        // we must always refer to nodeList[i] since the nodes can be replaced underneath us.\n                        directives = collectDirectives(nodeList[i], [], attrs, maxPriority);\n\n                        nodeLinkFn = (directives.length)\n                            ? applyDirectivesToNode(directives, nodeList[i], attrs, transcludeFn, $rootElement)\n                            : null;\n\n                        childLinkFn = (nodeLinkFn && nodeLinkFn.terminal || !nodeList[i].childNodes || !nodeList[i].childNodes.length)\n                            ? null\n                            : compileNodes(nodeList[i].childNodes,\n                            nodeLinkFn ? nodeLinkFn.transclude : transcludeFn);\n\n                        linkFns.push(nodeLinkFn);\n                        linkFns.push(childLinkFn);\n                        linkFnFound = (linkFnFound || nodeLinkFn || childLinkFn);\n                    }\n\n                    // return a linking function if we have found anything, null otherwise\n                    return linkFnFound ? compositeLinkFn : null;\n\n                    function compositeLinkFn(scope, nodeList, $rootElement, boundTranscludeFn) {\n                        var nodeLinkFn, childLinkFn, node, childScope, childTranscludeFn, i, ii, n;\n\n                        // copy nodeList so that linking doesn't break due to live list updates.\n                        var stableNodeList = [];\n                        for (i = 0, ii = nodeList.length; i < ii; i++) {\n                            stableNodeList.push(nodeList[i]);\n                        }\n\n                        for(i = 0, n = 0, ii = linkFns.length; i < ii; n++) {\n                            node = stableNodeList[n];\n                            nodeLinkFn = linkFns[i++];\n                            childLinkFn = linkFns[i++];\n\n                            if (nodeLinkFn) {\n                                if (nodeLinkFn.scope) {\n                                    childScope = scope.$new(isObject(nodeLinkFn.scope));\n                                    jqLite(node).data('$scope', childScope);\n                                } else {\n                                    childScope = scope;\n                                }\n                                childTranscludeFn = nodeLinkFn.transclude;\n                                if (childTranscludeFn || (!boundTranscludeFn && transcludeFn)) {\n                                    nodeLinkFn(childLinkFn, childScope, node, $rootElement,\n                                        (function(transcludeFn) {\n                                            return function(cloneFn) {\n                                                var transcludeScope = scope.$new();\n                                                transcludeScope.$$transcluded = true;\n\n                                                return transcludeFn(transcludeScope, cloneFn).\n                                                    bind('$destroy', bind(transcludeScope, transcludeScope.$destroy));\n                                            };\n                                        })(childTranscludeFn || transcludeFn)\n                                    );\n                                } else {\n                                    nodeLinkFn(childLinkFn, childScope, node, undefined, boundTranscludeFn);\n                                }\n                            } else if (childLinkFn) {\n                                childLinkFn(scope, node.childNodes, undefined, boundTranscludeFn);\n                            }\n                        }\n                    }\n                }\n\n\n                /**\n                 * Looks for directives on the given node and adds them to the directive collection which is\n                 * sorted.\n                 *\n                 * @param node Node to search.\n                 * @param directives An array to which the directives are added to. This array is sorted before\n                 *        the function returns.\n                 * @param attrs The shared attrs object which is used to populate the normalized attributes.\n                 * @param {number=} maxPriority Max directive priority.\n                 */\n                function collectDirectives(node, directives, attrs, maxPriority) {\n                    var nodeType = node.nodeType,\n                        attrsMap = attrs.$attr,\n                        match,\n                        className;\n\n                    switch(nodeType) {\n                        case 1: /* Element */\n                            // use the node name: <directive>\n                            addDirective(directives,\n                                directiveNormalize(nodeName_(node).toLowerCase()), 'E', maxPriority);\n\n                            // iterate over the attributes\n                            for (var attr, name, nName, value, nAttrs = node.attributes,\n                                     j = 0, jj = nAttrs && nAttrs.length; j < jj; j++) {\n                                attr = nAttrs[j];\n                                if (attr.specified) {\n                                    name = attr.name;\n                                    nName = directiveNormalize(name.toLowerCase());\n                                    attrsMap[nName] = name;\n                                    attrs[nName] = value = trim((msie && name == 'href')\n                                        ? decodeURIComponent(node.getAttribute(name, 2))\n                                        : attr.value);\n                                    if (getBooleanAttrName(node, nName)) {\n                                        attrs[nName] = true; // presence means true\n                                    }\n                                    addAttrInterpolateDirective(node, directives, value, nName);\n                                    addDirective(directives, nName, 'A', maxPriority);\n                                }\n                            }\n\n                            // use class as directive\n                            className = node.className;\n                            if (isString(className) && className !== '') {\n                                while (match = CLASS_DIRECTIVE_REGEXP.exec(className)) {\n                                    nName = directiveNormalize(match[2]);\n                                    if (addDirective(directives, nName, 'C', maxPriority)) {\n                                        attrs[nName] = trim(match[3]);\n                                    }\n                                    className = className.substr(match.index + match[0].length);\n                                }\n                            }\n                            break;\n                        case 3: /* Text Node */\n                            addTextInterpolateDirective(directives, node.nodeValue);\n                            break;\n                        case 8: /* Comment */\n                            try {\n                                match = COMMENT_DIRECTIVE_REGEXP.exec(node.nodeValue);\n                                if (match) {\n                                    nName = directiveNormalize(match[1]);\n                                    if (addDirective(directives, nName, 'M', maxPriority)) {\n                                        attrs[nName] = trim(match[2]);\n                                    }\n                                }\n                            } catch (e) {\n                                // turns out that under some circumstances IE9 throws errors when one attempts to read comment's node value.\n                                // Just ignore it and continue. (Can't seem to reproduce in test case.)\n                            }\n                            break;\n                    }\n\n                    directives.sort(byPriority);\n                    return directives;\n                }\n\n\n                /**\n                 * Once the directives have been collected, their compile functions are executed. This method\n                 * is responsible for inlining directive templates as well as terminating the application\n                 * of the directives if the terminal directive has been reached.\n                 *\n                 * @param {Array} directives Array of collected directives to execute their compile function.\n                 *        this needs to be pre-sorted by priority order.\n                 * @param {Node} compileNode The raw DOM node to apply the compile functions to\n                 * @param {Object} templateAttrs The shared attribute function\n                 * @param {function(angular.Scope[, cloneAttachFn]} transcludeFn A linking function, where the\n                 *        scope argument is auto-generated to the new child of the transcluded parent scope.\n                 * @param {JQLite} jqCollection If we are working on the root of the compile tree then this\n                 *        argument has the root jqLite array so that we can replace nodes on it.\n                 * @returns linkFn\n                 */\n                function applyDirectivesToNode(directives, compileNode, templateAttrs, transcludeFn, jqCollection) {\n                    var terminalPriority = -Number.MAX_VALUE,\n                        preLinkFns = [],\n                        postLinkFns = [],\n                        newScopeDirective = null,\n                        newIsolateScopeDirective = null,\n                        templateDirective = null,\n                        $compileNode = templateAttrs.$$element = jqLite(compileNode),\n                        directive,\n                        directiveName,\n                        $template,\n                        transcludeDirective,\n                        childTranscludeFn = transcludeFn,\n                        controllerDirectives,\n                        linkFn,\n                        directiveValue;\n\n                    // executes all directives on the current element\n                    for(var i = 0, ii = directives.length; i < ii; i++) {\n                        directive = directives[i];\n                        $template = undefined;\n\n                        if (terminalPriority > directive.priority) {\n                            break; // prevent further processing of directives\n                        }\n\n                        if (directiveValue = directive.scope) {\n                            assertNoDuplicate('isolated scope', newIsolateScopeDirective, directive, $compileNode);\n                            if (isObject(directiveValue)) {\n                                safeAddClass($compileNode, 'ng-isolate-scope');\n                                newIsolateScopeDirective = directive;\n                            }\n                            safeAddClass($compileNode, 'ng-scope');\n                            newScopeDirective = newScopeDirective || directive;\n                        }\n\n                        directiveName = directive.name;\n\n                        if (directiveValue = directive.controller) {\n                            controllerDirectives = controllerDirectives || {};\n                            assertNoDuplicate(\"'\" + directiveName + \"' controller\",\n                                controllerDirectives[directiveName], directive, $compileNode);\n                            controllerDirectives[directiveName] = directive;\n                        }\n\n                        if (directiveValue = directive.transclude) {\n                            assertNoDuplicate('transclusion', transcludeDirective, directive, $compileNode);\n                            transcludeDirective = directive;\n                            terminalPriority = directive.priority;\n                            if (directiveValue == 'element') {\n                                $template = jqLite(compileNode);\n                                $compileNode = templateAttrs.$$element =\n                                    jqLite(document.createComment(' ' + directiveName + ': ' + templateAttrs[directiveName] + ' '));\n                                compileNode = $compileNode[0];\n                                replaceWith(jqCollection, jqLite($template[0]), compileNode);\n                                childTranscludeFn = compile($template, transcludeFn, terminalPriority);\n                            } else {\n                                $template = jqLite(JQLiteClone(compileNode)).contents();\n                                $compileNode.html(''); // clear contents\n                                childTranscludeFn = compile($template, transcludeFn);\n                            }\n                        }\n\n                        if ((directiveValue = directive.template)) {\n                            assertNoDuplicate('template', templateDirective, directive, $compileNode);\n                            templateDirective = directive;\n                            directiveValue = denormalizeTemplate(directiveValue);\n\n                            if (directive.replace) {\n                                $template = jqLite('<div>' +\n                                    trim(directiveValue) +\n                                    '</div>').contents();\n                                compileNode = $template[0];\n\n                                if ($template.length != 1 || compileNode.nodeType !== 1) {\n                                    throw new Error(MULTI_ROOT_TEMPLATE_ERROR + directiveValue);\n                                }\n\n                                replaceWith(jqCollection, $compileNode, compileNode);\n\n                                var newTemplateAttrs = {$attr: {}};\n\n                                // combine directives from the original node and from the template:\n                                // - take the array of directives for this element\n                                // - split it into two parts, those that were already applied and those that weren't\n                                // - collect directives from the template, add them to the second group and sort them\n                                // - append the second group with new directives to the first group\n                                directives = directives.concat(\n                                    collectDirectives(\n                                        compileNode,\n                                        directives.splice(i + 1, directives.length - (i + 1)),\n                                        newTemplateAttrs\n                                    )\n                                );\n                                mergeTemplateAttributes(templateAttrs, newTemplateAttrs);\n\n                                ii = directives.length;\n                            } else {\n                                $compileNode.html(directiveValue);\n                            }\n                        }\n\n                        if (directive.templateUrl) {\n                            assertNoDuplicate('template', templateDirective, directive, $compileNode);\n                            templateDirective = directive;\n                            nodeLinkFn = compileTemplateUrl(directives.splice(i, directives.length - i),\n                                nodeLinkFn, $compileNode, templateAttrs, jqCollection, directive.replace,\n                                childTranscludeFn);\n                            ii = directives.length;\n                        } else if (directive.compile) {\n                            try {\n                                linkFn = directive.compile($compileNode, templateAttrs, childTranscludeFn);\n                                if (isFunction(linkFn)) {\n                                    addLinkFns(null, linkFn);\n                                } else if (linkFn) {\n                                    addLinkFns(linkFn.pre, linkFn.post);\n                                }\n                            } catch (e) {\n                                $exceptionHandler(e, startingTag($compileNode));\n                            }\n                        }\n\n                        if (directive.terminal) {\n                            nodeLinkFn.terminal = true;\n                            terminalPriority = Math.max(terminalPriority, directive.priority);\n                        }\n\n                    }\n\n                    nodeLinkFn.scope = newScopeDirective && newScopeDirective.scope;\n                    nodeLinkFn.transclude = transcludeDirective && childTranscludeFn;\n\n                    // might be normal or delayed nodeLinkFn depending on if templateUrl is present\n                    return nodeLinkFn;\n\n                    ////////////////////\n\n                    function addLinkFns(pre, post) {\n                        if (pre) {\n                            pre.require = directive.require;\n                            preLinkFns.push(pre);\n                        }\n                        if (post) {\n                            post.require = directive.require;\n                            postLinkFns.push(post);\n                        }\n                    }\n\n\n                    function getControllers(require, $element) {\n                        var value, retrievalMethod = 'data', optional = false;\n                        if (isString(require)) {\n                            while((value = require.charAt(0)) == '^' || value == '?') {\n                                require = require.substr(1);\n                                if (value == '^') {\n                                    retrievalMethod = 'inheritedData';\n                                }\n                                optional = optional || value == '?';\n                            }\n                            value = $element[retrievalMethod]('$' + require + 'Controller');\n                            if (!value && !optional) {\n                                throw Error(\"No controller: \" + require);\n                            }\n                            return value;\n                        } else if (isArray(require)) {\n                            value = [];\n                            forEach(require, function(require) {\n                                value.push(getControllers(require, $element));\n                            });\n                        }\n                        return value;\n                    }\n\n\n                    function nodeLinkFn(childLinkFn, scope, linkNode, $rootElement, boundTranscludeFn) {\n                        var attrs, $element, i, ii, linkFn, controller;\n\n                        if (compileNode === linkNode) {\n                            attrs = templateAttrs;\n                        } else {\n                            attrs = shallowCopy(templateAttrs, new Attributes(jqLite(linkNode), templateAttrs.$attr));\n                        }\n                        $element = attrs.$$element;\n\n                        if (newIsolateScopeDirective) {\n                            var LOCAL_REGEXP = /^\\s*([@=&])\\s*(\\w*)\\s*$/;\n\n                            var parentScope = scope.$parent || scope;\n\n                            forEach(newIsolateScopeDirective.scope, function(definiton, scopeName) {\n                                var match = definiton.match(LOCAL_REGEXP) || [],\n                                    attrName = match[2]|| scopeName,\n                                    mode = match[1], // @, =, or &\n                                    lastValue,\n                                    parentGet, parentSet;\n\n                                scope.$$isolateBindings[scopeName] = mode + attrName;\n\n                                switch (mode) {\n\n                                    case '@': {\n                                        attrs.$observe(attrName, function(value) {\n                                            scope[scopeName] = value;\n                                        });\n                                        attrs.$$observers[attrName].$$scope = parentScope;\n                                        break;\n                                    }\n\n                                    case '=': {\n                                        parentGet = $parse(attrs[attrName]);\n                                        parentSet = parentGet.assign || function() {\n                                            // reset the change, or we will throw this exception on every $digest\n                                            lastValue = scope[scopeName] = parentGet(parentScope);\n                                            throw Error(NON_ASSIGNABLE_MODEL_EXPRESSION + attrs[attrName] +\n                                                ' (directive: ' + newIsolateScopeDirective.name + ')');\n                                        };\n                                        lastValue = scope[scopeName] = parentGet(parentScope);\n                                        scope.$watch(function parentValueWatch() {\n                                            var parentValue = parentGet(parentScope);\n\n                                            if (parentValue !== scope[scopeName]) {\n                                                // we are out of sync and need to copy\n                                                if (parentValue !== lastValue) {\n                                                    // parent changed and it has precedence\n                                                    lastValue = scope[scopeName] = parentValue;\n                                                } else {\n                                                    // if the parent can be assigned then do so\n                                                    parentSet(parentScope, parentValue = lastValue = scope[scopeName]);\n                                                }\n                                            }\n                                            return parentValue;\n                                        });\n                                        break;\n                                    }\n\n                                    case '&': {\n                                        parentGet = $parse(attrs[attrName]);\n                                        scope[scopeName] = function(locals) {\n                                            return parentGet(parentScope, locals);\n                                        };\n                                        break;\n                                    }\n\n                                    default: {\n                                        throw Error('Invalid isolate scope definition for directive ' +\n                                            newIsolateScopeDirective.name + ': ' + definiton);\n                                    }\n                                }\n                            });\n                        }\n\n                        if (controllerDirectives) {\n                            forEach(controllerDirectives, function(directive) {\n                                var locals = {\n                                    $scope: scope,\n                                    $element: $element,\n                                    $attrs: attrs,\n                                    $transclude: boundTranscludeFn\n                                };\n\n                                controller = directive.controller;\n                                if (controller == '@') {\n                                    controller = attrs[directive.name];\n                                }\n\n                                $element.data(\n                                    '$' + directive.name + 'Controller',\n                                    $controller(controller, locals));\n                            });\n                        }\n\n                        // PRELINKING\n                        for(i = 0, ii = preLinkFns.length; i < ii; i++) {\n                            try {\n                                linkFn = preLinkFns[i];\n                                linkFn(scope, $element, attrs,\n                                    linkFn.require && getControllers(linkFn.require, $element));\n                            } catch (e) {\n                                $exceptionHandler(e, startingTag($element));\n                            }\n                        }\n\n                        // RECURSION\n                        childLinkFn && childLinkFn(scope, linkNode.childNodes, undefined, boundTranscludeFn);\n\n                        // POSTLINKING\n                        for(i = 0, ii = postLinkFns.length; i < ii; i++) {\n                            try {\n                                linkFn = postLinkFns[i];\n                                linkFn(scope, $element, attrs,\n                                    linkFn.require && getControllers(linkFn.require, $element));\n                            } catch (e) {\n                                $exceptionHandler(e, startingTag($element));\n                            }\n                        }\n                    }\n                }\n\n\n                /**\n                 * looks up the directive and decorates it with exception handling and proper parameters. We\n                 * call this the boundDirective.\n                 *\n                 * @param {string} name name of the directive to look up.\n                 * @param {string} location The directive must be found in specific format.\n                 *   String containing any of theses characters:\n                 *\n                 *   * `E`: element name\n                 *   * `A': attribute\n                 *   * `C`: class\n                 *   * `M`: comment\n                 * @returns true if directive was added.\n                 */\n                function addDirective(tDirectives, name, location, maxPriority) {\n                    var match = false;\n                    if (hasDirectives.hasOwnProperty(name)) {\n                        for(var directive, directives = $injector.get(name + Suffix),\n                                i = 0, ii = directives.length; i<ii; i++) {\n                            try {\n                                directive = directives[i];\n                                if ( (maxPriority === undefined || maxPriority > directive.priority) &&\n                                    directive.restrict.indexOf(location) != -1) {\n                                    tDirectives.push(directive);\n                                    match = true;\n                                }\n                            } catch(e) { $exceptionHandler(e); }\n                        }\n                    }\n                    return match;\n                }\n\n\n                /**\n                 * When the element is replaced with HTML template then the new attributes\n                 * on the template need to be merged with the existing attributes in the DOM.\n                 * The desired effect is to have both of the attributes present.\n                 *\n                 * @param {object} dst destination attributes (original DOM)\n                 * @param {object} src source attributes (from the directive template)\n                 */\n                function mergeTemplateAttributes(dst, src) {\n                    var srcAttr = src.$attr,\n                        dstAttr = dst.$attr,\n                        $element = dst.$$element;\n\n                    // reapply the old attributes to the new element\n                    forEach(dst, function(value, key) {\n                        if (key.charAt(0) != '$') {\n                            if (src[key]) {\n                                value += (key === 'style' ? ';' : ' ') + src[key];\n                            }\n                            dst.$set(key, value, true, srcAttr[key]);\n                        }\n                    });\n\n                    // copy the new attributes on the old attrs object\n                    forEach(src, function(value, key) {\n                        if (key == 'class') {\n                            safeAddClass($element, value);\n                            dst['class'] = (dst['class'] ? dst['class'] + ' ' : '') + value;\n                        } else if (key == 'style') {\n                            $element.attr('style', $element.attr('style') + ';' + value);\n                        } else if (key.charAt(0) != '$' && !dst.hasOwnProperty(key)) {\n                            dst[key] = value;\n                            dstAttr[key] = srcAttr[key];\n                        }\n                    });\n                }\n\n\n                function compileTemplateUrl(directives, beforeTemplateNodeLinkFn, $compileNode, tAttrs,\n                                            $rootElement, replace, childTranscludeFn) {\n                    var linkQueue = [],\n                        afterTemplateNodeLinkFn,\n                        afterTemplateChildLinkFn,\n                        beforeTemplateCompileNode = $compileNode[0],\n                        origAsyncDirective = directives.shift(),\n                    // The fact that we have to copy and patch the directive seems wrong!\n                        derivedSyncDirective = extend({}, origAsyncDirective, {\n                            controller: null, templateUrl: null, transclude: null, scope: null\n                        });\n\n                    $compileNode.html('');\n\n                    $http.get(origAsyncDirective.templateUrl, {cache: $templateCache}).\n                        success(function(content) {\n                            var compileNode, tempTemplateAttrs, $template;\n\n                            content = denormalizeTemplate(content);\n\n                            if (replace) {\n                                $template = jqLite('<div>' + trim(content) + '</div>').contents();\n                                compileNode = $template[0];\n\n                                if ($template.length != 1 || compileNode.nodeType !== 1) {\n                                    throw new Error(MULTI_ROOT_TEMPLATE_ERROR + content);\n                                }\n\n                                tempTemplateAttrs = {$attr: {}};\n                                replaceWith($rootElement, $compileNode, compileNode);\n                                collectDirectives(compileNode, directives, tempTemplateAttrs);\n                                mergeTemplateAttributes(tAttrs, tempTemplateAttrs);\n                            } else {\n                                compileNode = beforeTemplateCompileNode;\n                                $compileNode.html(content);\n                            }\n\n                            directives.unshift(derivedSyncDirective);\n                            afterTemplateNodeLinkFn = applyDirectivesToNode(directives, compileNode, tAttrs, childTranscludeFn);\n                            afterTemplateChildLinkFn = compileNodes($compileNode[0].childNodes, childTranscludeFn);\n\n\n                            while(linkQueue.length) {\n                                var controller = linkQueue.pop(),\n                                    linkRootElement = linkQueue.pop(),\n                                    beforeTemplateLinkNode = linkQueue.pop(),\n                                    scope = linkQueue.pop(),\n                                    linkNode = compileNode;\n\n                                if (beforeTemplateLinkNode !== beforeTemplateCompileNode) {\n                                    // it was cloned therefore we have to clone as well.\n                                    linkNode = JQLiteClone(compileNode);\n                                    replaceWith(linkRootElement, jqLite(beforeTemplateLinkNode), linkNode);\n                                }\n\n                                afterTemplateNodeLinkFn(function() {\n                                    beforeTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, linkNode, $rootElement, controller);\n                                }, scope, linkNode, $rootElement, controller);\n                            }\n                            linkQueue = null;\n                        }).\n                        error(function(response, code, headers, config) {\n                            throw Error('Failed to load template: ' + config.url);\n                        });\n\n                    return function delayedNodeLinkFn(ignoreChildLinkFn, scope, node, rootElement, controller) {\n                        if (linkQueue) {\n                            linkQueue.push(scope);\n                            linkQueue.push(node);\n                            linkQueue.push(rootElement);\n                            linkQueue.push(controller);\n                        } else {\n                            afterTemplateNodeLinkFn(function() {\n                                beforeTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, node, rootElement, controller);\n                            }, scope, node, rootElement, controller);\n                        }\n                    };\n                }\n\n\n                /**\n                 * Sorting function for bound directives.\n                 */\n                function byPriority(a, b) {\n                    return b.priority - a.priority;\n                }\n\n\n                function assertNoDuplicate(what, previousDirective, directive, element) {\n                    if (previousDirective) {\n                        throw Error('Multiple directives [' + previousDirective.name + ', ' +\n                            directive.name + '] asking for ' + what + ' on: ' +  startingTag(element));\n                    }\n                }\n\n\n                function addTextInterpolateDirective(directives, text) {\n                    var interpolateFn = $interpolate(text, true);\n                    if (interpolateFn) {\n                        directives.push({\n                            priority: 0,\n                            compile: valueFn(function textInterpolateLinkFn(scope, node) {\n                                var parent = node.parent(),\n                                    bindings = parent.data('$binding') || [];\n                                bindings.push(interpolateFn);\n                                safeAddClass(parent.data('$binding', bindings), 'ng-binding');\n                                scope.$watch(interpolateFn, function interpolateFnWatchAction(value) {\n                                    node[0].nodeValue = value;\n                                });\n                            })\n                        });\n                    }\n                }\n\n\n                function addAttrInterpolateDirective(node, directives, value, name) {\n                    var interpolateFn = $interpolate(value, true);\n\n                    // no interpolation found -> ignore\n                    if (!interpolateFn) return;\n\n\n                    directives.push({\n                        priority: 100,\n                        compile: valueFn(function attrInterpolateLinkFn(scope, element, attr) {\n                            var $$observers = (attr.$$observers || (attr.$$observers = {}));\n\n                            if (name === 'class') {\n                                // we need to interpolate classes again, in the case the element was replaced\n                                // and therefore the two class attrs got merged - we want to interpolate the result\n                                interpolateFn = $interpolate(attr[name], true);\n                            }\n\n                            attr[name] = undefined;\n                            ($$observers[name] || ($$observers[name] = [])).$$inter = true;\n                            (attr.$$observers && attr.$$observers[name].$$scope || scope).\n                                $watch(interpolateFn, function interpolateFnWatchAction(value) {\n                                    attr.$set(name, value);\n                                });\n                        })\n                    });\n                }\n\n\n                /**\n                 * This is a special jqLite.replaceWith, which can replace items which\n                 * have no parents, provided that the containing jqLite collection is provided.\n                 *\n                 * @param {JqLite=} $rootElement The root of the compile tree. Used so that we can replace nodes\n                 *    in the root of the tree.\n                 * @param {JqLite} $element The jqLite element which we are going to replace. We keep the shell,\n                 *    but replace its DOM node reference.\n                 * @param {Node} newNode The new DOM node.\n                 */\n                function replaceWith($rootElement, $element, newNode) {\n                    var oldNode = $element[0],\n                        parent = oldNode.parentNode,\n                        i, ii;\n\n                    if ($rootElement) {\n                        for(i = 0, ii = $rootElement.length; i < ii; i++) {\n                            if ($rootElement[i] == oldNode) {\n                                $rootElement[i] = newNode;\n                                break;\n                            }\n                        }\n                    }\n\n                    if (parent) {\n                        parent.replaceChild(newNode, oldNode);\n                    }\n\n                    newNode[jqLite.expando] = oldNode[jqLite.expando];\n                    $element[0] = newNode;\n                }\n            }];\n    }\n\n    var PREFIX_REGEXP = /^(x[\\:\\-_]|data[\\:\\-_])/i;\n    /**\n     * Converts all accepted directives format into proper directive name.\n     * All of these will become 'myDirective':\n     *   my:DiRective\n     *   my-directive\n     *   x-my-directive\n     *   data-my:directive\n     *\n     * Also there is special case for Moz prefix starting with upper case letter.\n     * @param name Name to normalize\n     */\n    function directiveNormalize(name) {\n        return camelCase(name.replace(PREFIX_REGEXP, ''));\n    }\n\n    /**\n     * @ngdoc object\n     * @name ng.$compile.directive.Attributes\n     * @description\n     *\n     * A shared object between directive compile / linking functions which contains normalized DOM element\n     * attributes. The the values reflect current binding state `{{ }}`. The normalization is needed\n     * since all of these are treated as equivalent in Angular:\n     *\n     *          <span ng:bind=\"a\" ng-bind=\"a\" data-ng-bind=\"a\" x-ng-bind=\"a\">\n     */\n\n    /**\n     * @ngdoc property\n     * @name ng.$compile.directive.Attributes#$attr\n     * @propertyOf ng.$compile.directive.Attributes\n     * @returns {object} A map of DOM element attribute names to the normalized name. This is\n     *          needed to do reverse lookup from normalized name back to actual name.\n     */\n\n\n    /**\n     * @ngdoc function\n     * @name ng.$compile.directive.Attributes#$set\n     * @methodOf ng.$compile.directive.Attributes\n     * @function\n     *\n     * @description\n     * Set DOM element attribute value.\n     *\n     *\n     * @param {string} name Normalized element attribute name of the property to modify. The name is\n     *          revers translated using the {@link ng.$compile.directive.Attributes#$attr $attr}\n     *          property to the original name.\n     * @param {string} value Value to set the attribute to.\n     */\n\n\n\n    /**\n     * Closure compiler type information\n     */\n\n    function nodesetLinkingFn(\n        /* angular.Scope */ scope,\n        /* NodeList */ nodeList,\n        /* Element */ rootElement,\n        /* function(Function) */ boundTranscludeFn\n        ){}\n\n    function directiveLinkingFn(\n        /* nodesetLinkingFn */ nodesetLinkingFn,\n        /* angular.Scope */ scope,\n        /* Node */ node,\n        /* Element */ rootElement,\n        /* function(Function) */ boundTranscludeFn\n        ){}\n\n    /**\n     * @ngdoc object\n     * @name ng.$controllerProvider\n     * @description\n     * The {@link ng.$controller $controller service} is used by Angular to create new\n     * controllers.\n     *\n     * This provider allows controller registration via the\n     * {@link ng.$controllerProvider#register register} method.\n     */\n    function $ControllerProvider() {\n        var controllers = {};\n\n\n        /**\n         * @ngdoc function\n         * @name ng.$controllerProvider#register\n         * @methodOf ng.$controllerProvider\n         * @param {string} name Controller name\n         * @param {Function|Array} constructor Controller constructor fn (optionally decorated with DI\n         *    annotations in the array notation).\n         */\n        this.register = function(name, constructor) {\n            if (isObject(name)) {\n                extend(controllers, name)\n            } else {\n                controllers[name] = constructor;\n            }\n        };\n\n\n        this.$get = ['$injector', '$window', function($injector, $window) {\n\n            /**\n             * @ngdoc function\n             * @name ng.$controller\n             * @requires $injector\n             *\n             * @param {Function|string} constructor If called with a function then it's considered to be the\n             *    controller constructor function. Otherwise it's considered to be a string which is used\n             *    to retrieve the controller constructor using the following steps:\n             *\n             *    * check if a controller with given name is registered via `$controllerProvider`\n             *    * check if evaluating the string on the current scope returns a constructor\n             *    * check `window[constructor]` on the global `window` object\n             *\n             * @param {Object} locals Injection locals for Controller.\n             * @return {Object} Instance of given controller.\n             *\n             * @description\n             * `$controller` service is responsible for instantiating controllers.\n             *\n             * It's just a simple call to {@link AUTO.$injector $injector}, but extracted into\n             * a service, so that one can override this service with {@link https://gist.github.com/1649788\n             * BC version}.\n             */\n            return function(constructor, locals) {\n                if(isString(constructor)) {\n                    var name = constructor;\n                    constructor = controllers.hasOwnProperty(name)\n                        ? controllers[name]\n                        : getter(locals.$scope, name, true) || getter($window, name, true);\n\n                    assertArgFn(constructor, name, true);\n                }\n\n                return $injector.instantiate(constructor, locals);\n            };\n        }];\n    }\n\n    /**\n     * @ngdoc object\n     * @name ng.$document\n     * @requires $window\n     *\n     * @description\n     * A {@link angular.element jQuery (lite)}-wrapped reference to the browser's `window.document`\n     * element.\n     */\n    function $DocumentProvider(){\n        this.$get = ['$window', function(window){\n            return jqLite(window.document);\n        }];\n    }\n\n    /**\n     * @ngdoc function\n     * @name ng.$exceptionHandler\n     * @requires $log\n     *\n     * @description\n     * Any uncaught exception in angular expressions is delegated to this service.\n     * The default implementation simply delegates to `$log.error` which logs it into\n     * the browser console.\n     *\n     * In unit tests, if `angular-mocks.js` is loaded, this service is overridden by\n     * {@link ngMock.$exceptionHandler mock $exceptionHandler} which aids in testing.\n     *\n     * @param {Error} exception Exception associated with the error.\n     * @param {string=} cause optional information about the context in which\n     *       the error was thrown.\n     *\n     */\n    function $ExceptionHandlerProvider() {\n        this.$get = ['$log', function($log) {\n            return function(exception, cause) {\n                $log.error.apply($log, arguments);\n            };\n        }];\n    }\n\n    /**\n     * @ngdoc object\n     * @name ng.$interpolateProvider\n     * @function\n     *\n     * @description\n     *\n     * Used for configuring the interpolation markup. Defaults to `{{` and `}}`.\n     */\n    function $InterpolateProvider() {\n        var startSymbol = '{{';\n        var endSymbol = '}}';\n\n        /**\n         * @ngdoc method\n         * @name ng.$interpolateProvider#startSymbol\n         * @methodOf ng.$interpolateProvider\n         * @description\n         * Symbol to denote start of expression in the interpolated string. Defaults to `{{`.\n   *\n   * @param {string=} value new value to set the starting symbol to.\n         * @returns {string|self} Returns the symbol when used as getter and self if used as setter.\n         */\n        this.startSymbol = function(value){\n            if (value) {\n                startSymbol = value;\n                return this;\n            } else {\n                return startSymbol;\n            }\n        };\n\n        /**\n         * @ngdoc method\n         * @name ng.$interpolateProvider#endSymbol\n         * @methodOf ng.$interpolateProvider\n         * @description\n         * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.\n         *\n         * @param {string=} value new value to set the ending symbol to.\n         * @returns {string|self} Returns the symbol when used as getter and self if used as setter.\n         */\n        this.endSymbol = function(value){\n            if (value) {\n                endSymbol = value;\n                return this;\n            } else {\n                return endSymbol;\n            }\n        };\n\n\n        this.$get = ['$parse', function($parse) {\n            var startSymbolLength = startSymbol.length,\n                endSymbolLength = endSymbol.length;\n\n            /**\n             * @ngdoc function\n             * @name ng.$interpolate\n             * @function\n             *\n             * @requires $parse\n             *\n             * @description\n             *\n             * Compiles a string with markup into an interpolation function. This service is used by the\n             * HTML {@link ng.$compile $compile} service for data binding. See\n             * {@link ng.$interpolateProvider $interpolateProvider} for configuring the\n             * interpolation markup.\n             *\n             *\n             <pre>\n             var $interpolate = ...; // injected\n             var exp = $interpolate('Hello {{name}}!');\n             expect(exp({name:'Angular'}).toEqual('Hello Angular!');\n             </pre>\n             *\n             *\n             * @param {string} text The text with markup to interpolate.\n             * @param {boolean=} mustHaveExpression if set to true then the interpolation string must have\n             *    embedded expression in order to return an interpolation function. Strings with no\n             *    embedded expression will return null for the interpolation function.\n             * @returns {function(context)} an interpolation function which is used to compute the interpolated\n             *    string. The function has these parameters:\n             *\n             *    * `context`: an object against which any expressions embedded in the strings are evaluated\n             *      against.\n             *\n             */\n            function $interpolate(text, mustHaveExpression) {\n                var startIndex,\n                    endIndex,\n                    index = 0,\n                    parts = [],\n                    length = text.length,\n                    hasInterpolation = false,\n                    fn,\n                    exp,\n                    concat = [];\n\n                while(index < length) {\n                    if ( ((startIndex = text.indexOf(startSymbol, index)) != -1) &&\n                        ((endIndex = text.indexOf(endSymbol, startIndex + startSymbolLength)) != -1) ) {\n                        (index != startIndex) && parts.push(text.substring(index, startIndex));\n                        parts.push(fn = $parse(exp = text.substring(startIndex + startSymbolLength, endIndex)));\n                        fn.exp = exp;\n                        index = endIndex + endSymbolLength;\n                        hasInterpolation = true;\n                    } else {\n                        // we did not find anything, so we have to add the remainder to the parts array\n                        (index != length) && parts.push(text.substring(index));\n                        index = length;\n                    }\n                }\n\n                if (!(length = parts.length)) {\n                    // we added, nothing, must have been an empty string.\n                    parts.push('');\n                    length = 1;\n                }\n\n                if (!mustHaveExpression  || hasInterpolation) {\n                    concat.length = length;\n                    fn = function(context) {\n                        for(var i = 0, ii = length, part; i<ii; i++) {\n                            if (typeof (part = parts[i]) == 'function') {\n                                part = part(context);\n                                if (part == null || part == undefined) {\n                                    part = '';\n                                } else if (typeof part != 'string') {\n                                    part = toJson(part);\n                                }\n                            }\n                            concat[i] = part;\n                        }\n                        return concat.join('');\n                    };\n                    fn.exp = text;\n                    fn.parts = parts;\n                    return fn;\n                }\n            }\n\n\n            /**\n             * @ngdoc method\n             * @name ng.$interpolate#startSymbol\n             * @methodOf ng.$interpolate\n             * @description\n             * Symbol to denote the start of expression in the interpolated string. Defaults to `{{`.\n     *\n     * Use {@link ng.$interpolateProvider#startSymbol $interpolateProvider#startSymbol} to change\n             * the symbol.\n             *\n             * @returns {string} start symbol.\n             */\n            $interpolate.startSymbol = function() {\n                return startSymbol;\n            }\n\n\n            /**\n             * @ngdoc method\n             * @name ng.$interpolate#endSymbol\n             * @methodOf ng.$interpolate\n             * @description\n             * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.\n             *\n             * Use {@link ng.$interpolateProvider#endSymbol $interpolateProvider#endSymbol} to change\n             * the symbol.\n             *\n             * @returns {string} start symbol.\n             */\n            $interpolate.endSymbol = function() {\n                return endSymbol;\n            }\n\n            return $interpolate;\n        }];\n    }\n\n    var URL_MATCH = /^([^:]+):\\/\\/(\\w+:{0,1}\\w*@)?(\\{?[\\w\\.-]*\\}?)(:([0-9]+))?(\\/[^\\?#]*)?(\\?([^#]*))?(#(.*))?$/,\n        PATH_MATCH = /^([^\\?#]*)?(\\?([^#]*))?(#(.*))?$/,\n        HASH_MATCH = PATH_MATCH,\n        DEFAULT_PORTS = {'http': 80, 'https': 443, 'ftp': 21};\n\n\n    /**\n     * Encode path using encodeUriSegment, ignoring forward slashes\n     *\n     * @param {string} path Path to encode\n     * @returns {string}\n     */\n    function encodePath(path) {\n        var segments = path.split('/'),\n            i = segments.length;\n\n        while (i--) {\n            segments[i] = encodeUriSegment(segments[i]);\n        }\n\n        return segments.join('/');\n    }\n\n    function stripHash(url) {\n        return url.split('#')[0];\n    }\n\n\n    function matchUrl(url, obj) {\n        var match = URL_MATCH.exec(url);\n\n        match = {\n            protocol: match[1],\n            host: match[3],\n            port: int(match[5]) || DEFAULT_PORTS[match[1]] || null,\n            path: match[6] || '/',\n            search: match[8],\n            hash: match[10]\n        };\n\n        if (obj) {\n            obj.$$protocol = match.protocol;\n            obj.$$host = match.host;\n            obj.$$port = match.port;\n        }\n\n        return match;\n    }\n\n\n    function composeProtocolHostPort(protocol, host, port) {\n        return protocol + '://' + host + (port == DEFAULT_PORTS[protocol] ? '' : ':' + port);\n    }\n\n\n    function pathPrefixFromBase(basePath) {\n        return basePath.substr(0, basePath.lastIndexOf('/'));\n    }\n\n\n    function convertToHtml5Url(url, basePath, hashPrefix) {\n        var match = matchUrl(url);\n\n        // already html5 url\n        if (decodeURIComponent(match.path) != basePath || isUndefined(match.hash) ||\n            match.hash.indexOf(hashPrefix) !== 0) {\n            return url;\n            // convert hashbang url -> html5 url\n        } else {\n            return composeProtocolHostPort(match.protocol, match.host, match.port) +\n                pathPrefixFromBase(basePath) + match.hash.substr(hashPrefix.length);\n        }\n    }\n\n\n    function convertToHashbangUrl(url, basePath, hashPrefix) {\n        var match = matchUrl(url);\n\n        // already hashbang url\n        if (decodeURIComponent(match.path) == basePath && !isUndefined(match.hash) &&\n            match.hash.indexOf(hashPrefix) === 0) {\n            return url;\n            // convert html5 url -> hashbang url\n        } else {\n            var search = match.search && '?' + match.search || '',\n                hash = match.hash && '#' + match.hash || '',\n                pathPrefix = pathPrefixFromBase(basePath),\n                path = match.path.substr(pathPrefix.length);\n\n            if (match.path.indexOf(pathPrefix) !== 0) {\n                throw Error('Invalid url \"' + url + '\", missing path prefix \"' + pathPrefix + '\" !');\n            }\n\n            return composeProtocolHostPort(match.protocol, match.host, match.port) + basePath +\n                '#' + hashPrefix + path + search + hash;\n        }\n    }\n\n\n    /**\n     * LocationUrl represents an url\n     * This object is exposed as $location service when HTML5 mode is enabled and supported\n     *\n     * @constructor\n     * @param {string} url HTML5 url\n     * @param {string} pathPrefix\n     */\n    function LocationUrl(url, pathPrefix, appBaseUrl) {\n        pathPrefix = pathPrefix || '';\n\n        /**\n         * Parse given html5 (regular) url string into properties\n         * @param {string} newAbsoluteUrl HTML5 url\n         * @private\n         */\n        this.$$parse = function(newAbsoluteUrl) {\n            var match = matchUrl(newAbsoluteUrl, this);\n\n            if (match.path.indexOf(pathPrefix) !== 0) {\n                throw Error('Invalid url \"' + newAbsoluteUrl + '\", missing path prefix \"' + pathPrefix + '\" !');\n            }\n\n            this.$$path = decodeURIComponent(match.path.substr(pathPrefix.length));\n            this.$$search = parseKeyValue(match.search);\n            this.$$hash = match.hash && decodeURIComponent(match.hash) || '';\n\n            this.$$compose();\n        };\n\n        /**\n         * Compose url and update `absUrl` property\n         * @private\n         */\n        this.$$compose = function() {\n            var search = toKeyValue(this.$$search),\n                hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';\n\n            this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;\n            this.$$absUrl = composeProtocolHostPort(this.$$protocol, this.$$host, this.$$port) +\n                pathPrefix + this.$$url;\n        };\n\n\n        this.$$rewriteAppUrl = function(absoluteLinkUrl) {\n            if(absoluteLinkUrl.indexOf(appBaseUrl) == 0) {\n                return absoluteLinkUrl;\n            }\n        }\n\n\n        this.$$parse(url);\n    }\n\n\n    /**\n     * LocationHashbangUrl represents url\n     * This object is exposed as $location service when html5 history api is disabled or not supported\n     *\n     * @constructor\n     * @param {string} url Legacy url\n     * @param {string} hashPrefix Prefix for hash part (containing path and search)\n     */\n    function LocationHashbangUrl(url, hashPrefix, appBaseUrl) {\n        var basePath;\n\n        /**\n         * Parse given hashbang url into properties\n         * @param {string} url Hashbang url\n         * @private\n         */\n        this.$$parse = function(url) {\n            var match = matchUrl(url, this);\n\n\n            if (match.hash && match.hash.indexOf(hashPrefix) !== 0) {\n                throw Error('Invalid url \"' + url + '\", missing hash prefix \"' + hashPrefix + '\" !');\n            }\n\n            basePath = match.path + (match.search ? '?' + match.search : '');\n            match = HASH_MATCH.exec((match.hash || '').substr(hashPrefix.length));\n            if (match[1]) {\n                this.$$path = (match[1].charAt(0) == '/' ? '' : '/') + decodeURIComponent(match[1]);\n            } else {\n                this.$$path = '';\n            }\n\n            this.$$search = parseKeyValue(match[3]);\n            this.$$hash = match[5] && decodeURIComponent(match[5]) || '';\n\n            this.$$compose();\n        };\n\n        /**\n         * Compose hashbang url and update `absUrl` property\n         * @private\n         */\n        this.$$compose = function() {\n            var search = toKeyValue(this.$$search),\n                hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';\n\n            this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;\n            this.$$absUrl = composeProtocolHostPort(this.$$protocol, this.$$host, this.$$port) +\n                basePath + (this.$$url ? '#' + hashPrefix + this.$$url : '');\n        };\n\n        this.$$rewriteAppUrl = function(absoluteLinkUrl) {\n            if(absoluteLinkUrl.indexOf(appBaseUrl) == 0) {\n                return absoluteLinkUrl;\n            }\n        }\n\n\n        this.$$parse(url);\n    }\n\n\n    LocationUrl.prototype = {\n\n        /**\n         * Has any change been replacing ?\n         * @private\n         */\n        $$replace: false,\n\n        /**\n         * @ngdoc method\n         * @name ng.$location#absUrl\n         * @methodOf ng.$location\n         *\n         * @description\n         * This method is getter only.\n         *\n         * Return full url representation with all segments encoded according to rules specified in\n         * {@link http://www.ietf.org/rfc/rfc3986.txt RFC 3986}.\n         *\n         * @return {string} full url\n         */\n        absUrl: locationGetter('$$absUrl'),\n\n        /**\n         * @ngdoc method\n         * @name ng.$location#url\n         * @methodOf ng.$location\n         *\n         * @description\n         * This method is getter / setter.\n         *\n         * Return url (e.g. `/path?a=b#hash`) when called without any parameter.\n         *\n         * Change path, search and hash, when called with parameter and return `$location`.\n         *\n         * @param {string=} url New url without base prefix (e.g. `/path?a=b#hash`)\n         * @return {string} url\n         */\n        url: function(url, replace) {\n            if (isUndefined(url))\n                return this.$$url;\n\n            var match = PATH_MATCH.exec(url);\n            if (match[1]) this.path(decodeURIComponent(match[1]));\n            if (match[2] || match[1]) this.search(match[3] || '');\n            this.hash(match[5] || '', replace);\n\n            return this;\n        },\n\n        /**\n         * @ngdoc method\n         * @name ng.$location#protocol\n         * @methodOf ng.$location\n         *\n         * @description\n         * This method is getter only.\n         *\n         * Return protocol of current url.\n         *\n         * @return {string} protocol of current url\n         */\n        protocol: locationGetter('$$protocol'),\n\n        /**\n         * @ngdoc method\n         * @name ng.$location#host\n         * @methodOf ng.$location\n         *\n         * @description\n         * This method is getter only.\n         *\n         * Return host of current url.\n         *\n         * @return {string} host of current url.\n         */\n        host: locationGetter('$$host'),\n\n        /**\n         * @ngdoc method\n         * @name ng.$location#port\n         * @methodOf ng.$location\n         *\n         * @description\n         * This method is getter only.\n         *\n         * Return port of current url.\n         *\n         * @return {Number} port\n         */\n        port: locationGetter('$$port'),\n\n        /**\n         * @ngdoc method\n         * @name ng.$location#path\n         * @methodOf ng.$location\n         *\n         * @description\n         * This method is getter / setter.\n         *\n         * Return path of current url when called without any parameter.\n         *\n         * Change path when called with parameter and return `$location`.\n         *\n         * Note: Path should always begin with forward slash (/), this method will add the forward slash\n         * if it is missing.\n         *\n         * @param {string=} path New path\n         * @return {string} path\n         */\n        path: locationGetterSetter('$$path', function(path) {\n            return path.charAt(0) == '/' ? path : '/' + path;\n        }),\n\n        /**\n         * @ngdoc method\n         * @name ng.$location#search\n         * @methodOf ng.$location\n         *\n         * @description\n         * This method is getter / setter.\n         *\n         * Return search part (as object) of current url when called without any parameter.\n         *\n         * Change search part when called with parameter and return `$location`.\n         *\n         * @param {string|object<string,string>=} search New search params - string or hash object\n         * @param {string=} paramValue If `search` is a string, then `paramValue` will override only a\n         *    single search parameter. If the value is `null`, the parameter will be deleted.\n         *\n         * @return {string} search\n         */\n        search: function(search, paramValue) {\n            if (isUndefined(search))\n                return this.$$search;\n\n            if (isDefined(paramValue)) {\n                if (paramValue === null) {\n                    delete this.$$search[search];\n                } else {\n                    this.$$search[search] = paramValue;\n                }\n            } else {\n                this.$$search = isString(search) ? parseKeyValue(search) : search;\n            }\n\n            this.$$compose();\n            return this;\n        },\n\n        /**\n         * @ngdoc method\n         * @name ng.$location#hash\n         * @methodOf ng.$location\n         *\n         * @description\n         * This method is getter / setter.\n         *\n         * Return hash fragment when called without any parameter.\n         *\n         * Change hash fragment when called with parameter and return `$location`.\n         *\n         * @param {string=} hash New hash fragment\n         * @return {string} hash\n         */\n        hash: locationGetterSetter('$$hash', identity),\n\n        /**\n         * @ngdoc method\n         * @name ng.$location#replace\n         * @methodOf ng.$location\n         *\n         * @description\n         * If called, all changes to $location during current `$digest` will be replacing current history\n         * record, instead of adding new one.\n         */\n        replace: function() {\n            this.$$replace = true;\n            return this;\n        }\n    };\n\n    LocationHashbangUrl.prototype = inherit(LocationUrl.prototype);\n\n    function LocationHashbangInHtml5Url(url, hashPrefix, appBaseUrl, baseExtra) {\n        LocationHashbangUrl.apply(this, arguments);\n\n\n        this.$$rewriteAppUrl = function(absoluteLinkUrl) {\n            if (absoluteLinkUrl.indexOf(appBaseUrl) == 0) {\n                return appBaseUrl + baseExtra + '#' + hashPrefix  + absoluteLinkUrl.substr(appBaseUrl.length);\n            }\n        }\n    }\n\n    LocationHashbangInHtml5Url.prototype = inherit(LocationHashbangUrl.prototype);\n\n    function locationGetter(property) {\n        return function() {\n            return this[property];\n        };\n    }\n\n\n    function locationGetterSetter(property, preprocess) {\n        return function(value) {\n            if (isUndefined(value))\n                return this[property];\n\n            this[property] = preprocess(value);\n            this.$$compose();\n\n            return this;\n        };\n    }\n\n\n    /**\n     * @ngdoc object\n     * @name ng.$location\n     *\n     * @requires $browser\n     * @requires $sniffer\n     * @requires $rootElement\n     *\n     * @description\n     * The $location service parses the URL in the browser address bar (based on the\n     * {@link https://developer.mozilla.org/en/window.location window.location}) and makes the URL\n     * available to your application. Changes to the URL in the address bar are reflected into\n     * $location service and changes to $location are reflected into the browser address bar.\n     *\n     * **The $location service:**\n     *\n     * - Exposes the current URL in the browser address bar, so you can\n     *   - Watch and observe the URL.\n     *   - Change the URL.\n     * - Synchronizes the URL with the browser when the user\n     *   - Changes the address bar.\n     *   - Clicks the back or forward button (or clicks a History link).\n     *   - Clicks on a link.\n     * - Represents the URL object as a set of methods (protocol, host, port, path, search, hash).\n     *\n     * For more information see {@link guide/dev_guide.services.$location Developer Guide: Angular\n     * Services: Using $location}\n     */\n\n    /**\n     * @ngdoc object\n     * @name ng.$locationProvider\n     * @description\n     * Use the `$locationProvider` to configure how the application deep linking paths are stored.\n     */\n    function $LocationProvider(){\n        var hashPrefix = '',\n            html5Mode = false;\n\n        /**\n         * @ngdoc property\n         * @name ng.$locationProvider#hashPrefix\n         * @methodOf ng.$locationProvider\n         * @description\n         * @param {string=} prefix Prefix for hash part (containing path and search)\n         * @returns {*} current value if used as getter or itself (chaining) if used as setter\n         */\n        this.hashPrefix = function(prefix) {\n            if (isDefined(prefix)) {\n                hashPrefix = prefix;\n                return this;\n            } else {\n                return hashPrefix;\n            }\n        };\n\n        /**\n         * @ngdoc property\n         * @name ng.$locationProvider#html5Mode\n         * @methodOf ng.$locationProvider\n         * @description\n         * @param {string=} mode Use HTML5 strategy if available.\n         * @returns {*} current value if used as getter or itself (chaining) if used as setter\n         */\n        this.html5Mode = function(mode) {\n            if (isDefined(mode)) {\n                html5Mode = mode;\n                return this;\n            } else {\n                return html5Mode;\n            }\n        };\n\n        this.$get = ['$rootScope', '$browser', '$sniffer', '$rootElement',\n            function( $rootScope,   $browser,   $sniffer,   $rootElement) {\n                var $location,\n                    basePath,\n                    pathPrefix,\n                    initUrl = $browser.url(),\n                    initUrlParts = matchUrl(initUrl),\n                    appBaseUrl;\n\n                if (html5Mode) {\n                    basePath = $browser.baseHref() || '/';\n                    pathPrefix = pathPrefixFromBase(basePath);\n                    appBaseUrl =\n                        composeProtocolHostPort(initUrlParts.protocol, initUrlParts.host, initUrlParts.port) +\n                            pathPrefix + '/';\n\n                    if ($sniffer.history) {\n                        $location = new LocationUrl(\n                            convertToHtml5Url(initUrl, basePath, hashPrefix),\n                            pathPrefix, appBaseUrl);\n                    } else {\n                        $location = new LocationHashbangInHtml5Url(\n                            convertToHashbangUrl(initUrl, basePath, hashPrefix),\n                            hashPrefix, appBaseUrl, basePath.substr(pathPrefix.length + 1));\n                    }\n                } else {\n                    appBaseUrl =\n                        composeProtocolHostPort(initUrlParts.protocol, initUrlParts.host, initUrlParts.port) +\n                            (initUrlParts.path || '') +\n                            (initUrlParts.search ? ('?' + initUrlParts.search) : '') +\n                            '#' + hashPrefix + '/';\n\n                    $location = new LocationHashbangUrl(initUrl, hashPrefix, appBaseUrl);\n                }\n\n                $rootElement.bind('click', function(event) {\n                    // TODO(vojta): rewrite link when opening in new tab/window (in legacy browser)\n                    // currently we open nice url link and redirect then\n\n                    if (event.ctrlKey || event.metaKey || event.which == 2) return;\n\n                    var elm = jqLite(event.target);\n\n                    // traverse the DOM up to find first A tag\n                    while (lowercase(elm[0].nodeName) !== 'a') {\n                        // ignore rewriting if no A tag (reached root element, or no parent - removed from document)\n                        if (elm[0] === $rootElement[0] || !(elm = elm.parent())[0]) return;\n                    }\n\n                    var absHref = elm.prop('href'),\n                        rewrittenUrl = $location.$$rewriteAppUrl(absHref);\n\n                    if (absHref && !elm.attr('target') && rewrittenUrl) {\n                        // update location manually\n                        $location.$$parse(rewrittenUrl);\n                        $rootScope.$apply();\n                        event.preventDefault();\n                        // hack to work around FF6 bug 684208 when scenario runner clicks on links\n                        window.angular['ff-684208-preventDefault'] = true;\n                    }\n                });\n\n\n                // rewrite hashbang url <> html5 url\n                if ($location.absUrl() != initUrl) {\n                    $browser.url($location.absUrl(), true);\n                }\n\n                // update $location when $browser url changes\n                $browser.onUrlChange(function(newUrl) {\n                    if ($location.absUrl() != newUrl) {\n                        if ($rootScope.$broadcast('$locationChangeStart', newUrl, $location.absUrl()).defaultPrevented) {\n                            $browser.url($location.absUrl());\n                            return;\n                        }\n                        $rootScope.$evalAsync(function() {\n                            var oldUrl = $location.absUrl();\n\n                            $location.$$parse(newUrl);\n                            afterLocationChange(oldUrl);\n                        });\n                        if (!$rootScope.$$phase) $rootScope.$digest();\n                    }\n                });\n\n                // update browser\n                var changeCounter = 0;\n                $rootScope.$watch(function $locationWatch() {\n                    var oldUrl = $browser.url();\n                    var currentReplace = $location.$$replace;\n\n                    if (!changeCounter || oldUrl != $location.absUrl()) {\n                        changeCounter++;\n                        $rootScope.$evalAsync(function() {\n                            if ($rootScope.$broadcast('$locationChangeStart', $location.absUrl(), oldUrl).\n                                defaultPrevented) {\n                                $location.$$parse(oldUrl);\n                            } else {\n                                $browser.url($location.absUrl(), currentReplace);\n                                afterLocationChange(oldUrl);\n                            }\n                        });\n                    }\n                    $location.$$replace = false;\n\n                    return changeCounter;\n                });\n\n                return $location;\n\n                function afterLocationChange(oldUrl) {\n                    $rootScope.$broadcast('$locationChangeSuccess', $location.absUrl(), oldUrl);\n                }\n            }];\n    }\n\n    /**\n     * @ngdoc object\n     * @name ng.$log\n     * @requires $window\n     *\n     * @description\n     * Simple service for logging. Default implementation writes the message\n     * into the browser's console (if present).\n     *\n     * The main purpose of this service is to simplify debugging and troubleshooting.\n     *\n     * @example\n     <example>\n     <file name=\"script.js\">\n     function LogCtrl($scope, $log) {\n         $scope.$log = $log;\n         $scope.message = 'Hello World!';\n       }\n     </file>\n     <file name=\"index.html\">\n     <div ng-controller=\"LogCtrl\">\n     <p>Reload this page with open console, enter text and hit the log button...</p>\n     Message:\n     <input type=\"text\" ng-model=\"message\"/>\n     <button ng-click=\"$log.log(message)\">log</button>\n     <button ng-click=\"$log.warn(message)\">warn</button>\n     <button ng-click=\"$log.info(message)\">info</button>\n     <button ng-click=\"$log.error(message)\">error</button>\n     </div>\n     </file>\n     </example>\n     */\n\n    function $LogProvider(){\n        this.$get = ['$window', function($window){\n            return {\n                /**\n                 * @ngdoc method\n                 * @name ng.$log#log\n                 * @methodOf ng.$log\n                 *\n                 * @description\n                 * Write a log message\n                 */\n                log: consoleLog('log'),\n\n                /**\n                 * @ngdoc method\n                 * @name ng.$log#warn\n                 * @methodOf ng.$log\n                 *\n                 * @description\n                 * Write a warning message\n                 */\n                warn: consoleLog('warn'),\n\n                /**\n                 * @ngdoc method\n                 * @name ng.$log#info\n                 * @methodOf ng.$log\n                 *\n                 * @description\n                 * Write an information message\n                 */\n                info: consoleLog('info'),\n\n                /**\n                 * @ngdoc method\n                 * @name ng.$log#error\n                 * @methodOf ng.$log\n                 *\n                 * @description\n                 * Write an error message\n                 */\n                error: consoleLog('error')\n            };\n\n            function formatError(arg) {\n                if (arg instanceof Error) {\n                    if (arg.stack) {\n                        arg = (arg.message && arg.stack.indexOf(arg.message) === -1)\n                            ? 'Error: ' + arg.message + '\\n' + arg.stack\n                            : arg.stack;\n                    } else if (arg.sourceURL) {\n                        arg = arg.message + '\\n' + arg.sourceURL + ':' + arg.line;\n                    }\n                }\n                return arg;\n            }\n\n            function consoleLog(type) {\n                var console = $window.console || {},\n                    logFn = console[type] || console.log || noop;\n\n                if (logFn.apply) {\n                    return function() {\n                        var args = [];\n                        forEach(arguments, function(arg) {\n                            args.push(formatError(arg));\n                        });\n                        return logFn.apply(console, args);\n                    };\n                }\n\n                // we are IE which either doesn't have window.console => this is noop and we do nothing,\n                // or we are IE where console.log doesn't have apply so we log at least first 2 args\n                return function(arg1, arg2) {\n                    logFn(arg1, arg2);\n                }\n            }\n        }];\n    }\n\n    var OPERATORS = {\n        'null':function(){return null;},\n        'true':function(){return true;},\n        'false':function(){return false;},\n        undefined:noop,\n        '+':function(self, locals, a,b){\n            a=a(self, locals); b=b(self, locals);\n            if (isDefined(a)) {\n                if (isDefined(b)) {\n                    return a + b;\n                }\n                return a;\n            }\n            return isDefined(b)?b:undefined;},\n        '-':function(self, locals, a,b){a=a(self, locals); b=b(self, locals); return (isDefined(a)?a:0)-(isDefined(b)?b:0);},\n        '*':function(self, locals, a,b){return a(self, locals)*b(self, locals);},\n        '/':function(self, locals, a,b){return a(self, locals)/b(self, locals);},\n        '%':function(self, locals, a,b){return a(self, locals)%b(self, locals);},\n        '^':function(self, locals, a,b){return a(self, locals)^b(self, locals);},\n        '=':noop,\n        '==':function(self, locals, a,b){return a(self, locals)==b(self, locals);},\n        '!=':function(self, locals, a,b){return a(self, locals)!=b(self, locals);},\n        '<':function(self, locals, a,b){return a(self, locals)<b(self, locals);},\n        '>':function(self, locals, a,b){return a(self, locals)>b(self, locals);},\n        '<=':function(self, locals, a,b){return a(self, locals)<=b(self, locals);},\n        '>=':function(self, locals, a,b){return a(self, locals)>=b(self, locals);},\n        '&&':function(self, locals, a,b){return a(self, locals)&&b(self, locals);},\n        '||':function(self, locals, a,b){return a(self, locals)||b(self, locals);},\n        '&':function(self, locals, a,b){return a(self, locals)&b(self, locals);},\n//    '|':function(self, locals, a,b){return a|b;},\n        '|':function(self, locals, a,b){return b(self, locals)(self, locals, a(self, locals));},\n        '!':function(self, locals, a){return !a(self, locals);}\n    };\n    var ESCAPE = {\"n\":\"\\n\", \"f\":\"\\f\", \"r\":\"\\r\", \"t\":\"\\t\", \"v\":\"\\v\", \"'\":\"'\", '\"':'\"'};\n\n    function lex(text, csp){\n        var tokens = [],\n            token,\n            index = 0,\n            json = [],\n            ch,\n            lastCh = ':'; // can start regexp\n\n        while (index < text.length) {\n            ch = text.charAt(index);\n            if (is('\"\\'')) {\n                readString(ch);\n            } else if (isNumber(ch) || is('.') && isNumber(peek())) {\n                readNumber();\n            } else if (isIdent(ch)) {\n                readIdent();\n                // identifiers can only be if the preceding char was a { or ,\n                if (was('{,') && json[0]=='{' &&\n                    (token=tokens[tokens.length-1])) {\n                    token.json = token.text.indexOf('.') == -1;\n                }\n            } else if (is('(){}[].,;:')) {\n                tokens.push({\n                    index:index,\n                    text:ch,\n                    json:(was(':[,') && is('{[')) || is('}]:,')\n                });\n                if (is('{[')) json.unshift(ch);\n                if (is('}]')) json.shift();\n                index++;\n            } else if (isWhitespace(ch)) {\n                index++;\n                continue;\n            } else {\n                var ch2 = ch + peek(),\n                    fn = OPERATORS[ch],\n                    fn2 = OPERATORS[ch2];\n                if (fn2) {\n                    tokens.push({index:index, text:ch2, fn:fn2});\n                    index += 2;\n                } else if (fn) {\n                    tokens.push({index:index, text:ch, fn:fn, json: was('[,:') && is('+-')});\n                    index += 1;\n                } else {\n                    throwError(\"Unexpected next character \", index, index+1);\n                }\n            }\n            lastCh = ch;\n        }\n        return tokens;\n\n        function is(chars) {\n            return chars.indexOf(ch) != -1;\n        }\n\n        function was(chars) {\n            return chars.indexOf(lastCh) != -1;\n        }\n\n        function peek() {\n            return index + 1 < text.length ? text.charAt(index + 1) : false;\n        }\n        function isNumber(ch) {\n            return '0' <= ch && ch <= '9';\n        }\n        function isWhitespace(ch) {\n            return ch == ' ' || ch == '\\r' || ch == '\\t' ||\n                ch == '\\n' || ch == '\\v' || ch == '\\u00A0'; // IE treats non-breaking space as \\u00A0\n        }\n        function isIdent(ch) {\n            return 'a' <= ch && ch <= 'z' ||\n                'A' <= ch && ch <= 'Z' ||\n                '_' == ch || ch == '$';\n        }\n        function isExpOperator(ch) {\n            return ch == '-' || ch == '+' || isNumber(ch);\n        }\n\n        function throwError(error, start, end) {\n            end = end || index;\n            throw Error(\"Lexer Error: \" + error + \" at column\" +\n                (isDefined(start)\n                    ? \"s \" + start +  \"-\" + index + \" [\" + text.substring(start, end) + \"]\"\n                    : \" \" + end) +\n                \" in expression [\" + text + \"].\");\n        }\n\n        function readNumber() {\n            var number = \"\";\n            var start = index;\n            while (index < text.length) {\n                var ch = lowercase(text.charAt(index));\n                if (ch == '.' || isNumber(ch)) {\n                    number += ch;\n                } else {\n                    var peekCh = peek();\n                    if (ch == 'e' && isExpOperator(peekCh)) {\n                        number += ch;\n                    } else if (isExpOperator(ch) &&\n                        peekCh && isNumber(peekCh) &&\n                        number.charAt(number.length - 1) == 'e') {\n                        number += ch;\n                    } else if (isExpOperator(ch) &&\n                        (!peekCh || !isNumber(peekCh)) &&\n                        number.charAt(number.length - 1) == 'e') {\n                        throwError('Invalid exponent');\n                    } else {\n                        break;\n                    }\n                }\n                index++;\n            }\n            number = 1 * number;\n            tokens.push({index:start, text:number, json:true,\n                fn:function() {return number;}});\n        }\n        function readIdent() {\n            var ident = \"\",\n                start = index,\n                lastDot, peekIndex, methodName, ch;\n\n            while (index < text.length) {\n                ch = text.charAt(index);\n                if (ch == '.' || isIdent(ch) || isNumber(ch)) {\n                    if (ch == '.') lastDot = index;\n                    ident += ch;\n                } else {\n                    break;\n                }\n                index++;\n            }\n\n            //check if this is not a method invocation and if it is back out to last dot\n            if (lastDot) {\n                peekIndex = index;\n                while(peekIndex < text.length) {\n                    ch = text.charAt(peekIndex);\n                    if (ch == '(') {\n                        methodName = ident.substr(lastDot - start + 1);\n                        ident = ident.substr(0, lastDot - start);\n                        index = peekIndex;\n                        break;\n                    }\n                    if(isWhitespace(ch)) {\n                        peekIndex++;\n                    } else {\n                        break;\n                    }\n                }\n            }\n\n\n            var token = {\n                index:start,\n                text:ident\n            };\n\n            if (OPERATORS.hasOwnProperty(ident)) {\n                token.fn = token.json = OPERATORS[ident];\n            } else {\n                var getter = getterFn(ident, csp);\n                token.fn = extend(function(self, locals) {\n                    return (getter(self, locals));\n                }, {\n                    assign: function(self, value) {\n                        return setter(self, ident, value);\n                    }\n                });\n            }\n\n            tokens.push(token);\n\n            if (methodName) {\n                tokens.push({\n                    index:lastDot,\n                    text: '.',\n                    json: false\n                });\n                tokens.push({\n                    index: lastDot + 1,\n                    text: methodName,\n                    json: false\n                });\n            }\n        }\n\n        function readString(quote) {\n            var start = index;\n            index++;\n            var string = \"\";\n            var rawString = quote;\n            var escape = false;\n            while (index < text.length) {\n                var ch = text.charAt(index);\n                rawString += ch;\n                if (escape) {\n                    if (ch == 'u') {\n                        var hex = text.substring(index + 1, index + 5);\n                        if (!hex.match(/[\\da-f]{4}/i))\n                            throwError( \"Invalid unicode escape [\\\\u\" + hex + \"]\");\n                        index += 4;\n                        string += String.fromCharCode(parseInt(hex, 16));\n                    } else {\n                        var rep = ESCAPE[ch];\n                        if (rep) {\n                            string += rep;\n                        } else {\n                            string += ch;\n                        }\n                    }\n                    escape = false;\n                } else if (ch == '\\\\') {\n                    escape = true;\n                } else if (ch == quote) {\n                    index++;\n                    tokens.push({\n                        index:start,\n                        text:rawString,\n                        string:string,\n                        json:true,\n                        fn:function() { return string; }\n                    });\n                    return;\n                } else {\n                    string += ch;\n                }\n                index++;\n            }\n            throwError(\"Unterminated quote\", start);\n        }\n    }\n\n/////////////////////////////////////////\n\n    function parser(text, json, $filter, csp){\n        var ZERO = valueFn(0),\n            value,\n            tokens = lex(text, csp),\n            assignment = _assignment,\n            functionCall = _functionCall,\n            fieldAccess = _fieldAccess,\n            objectIndex = _objectIndex,\n            filterChain = _filterChain;\n\n        if(json){\n            // The extra level of aliasing is here, just in case the lexer misses something, so that\n            // we prevent any accidental execution in JSON.\n            assignment = logicalOR;\n            functionCall =\n                fieldAccess =\n                    objectIndex =\n                        filterChain =\n                            function() { throwError(\"is not valid json\", {text:text, index:0}); };\n            value = primary();\n        } else {\n            value = statements();\n        }\n        if (tokens.length !== 0) {\n            throwError(\"is an unexpected token\", tokens[0]);\n        }\n        return value;\n\n        ///////////////////////////////////\n        function throwError(msg, token) {\n            throw Error(\"Syntax Error: Token '\" + token.text +\n                \"' \" + msg + \" at column \" +\n                (token.index + 1) + \" of the expression [\" +\n                text + \"] starting at [\" + text.substring(token.index) + \"].\");\n        }\n\n        function peekToken() {\n            if (tokens.length === 0)\n                throw Error(\"Unexpected end of expression: \" + text);\n            return tokens[0];\n        }\n\n        function peek(e1, e2, e3, e4) {\n            if (tokens.length > 0) {\n                var token = tokens[0];\n                var t = token.text;\n                if (t==e1 || t==e2 || t==e3 || t==e4 ||\n                    (!e1 && !e2 && !e3 && !e4)) {\n                    return token;\n                }\n            }\n            return false;\n        }\n\n        function expect(e1, e2, e3, e4){\n            var token = peek(e1, e2, e3, e4);\n            if (token) {\n                if (json && !token.json) {\n                    throwError(\"is not valid json\", token);\n                }\n                tokens.shift();\n                return token;\n            }\n            return false;\n        }\n\n        function consume(e1){\n            if (!expect(e1)) {\n                throwError(\"is unexpected, expecting [\" + e1 + \"]\", peek());\n            }\n        }\n\n        function unaryFn(fn, right) {\n            return function(self, locals) {\n                return fn(self, locals, right);\n            };\n        }\n\n        function binaryFn(left, fn, right) {\n            return function(self, locals) {\n                return fn(self, locals, left, right);\n            };\n        }\n\n        function statements() {\n            var statements = [];\n            while(true) {\n                if (tokens.length > 0 && !peek('}', ')', ';', ']'))\n                    statements.push(filterChain());\n                if (!expect(';')) {\n                    // optimize for the common case where there is only one statement.\n                    // TODO(size): maybe we should not support multiple statements?\n                    return statements.length == 1\n                        ? statements[0]\n                        : function(self, locals){\n                        var value;\n                        for ( var i = 0; i < statements.length; i++) {\n                            var statement = statements[i];\n                            if (statement)\n                                value = statement(self, locals);\n                        }\n                        return value;\n                    };\n                }\n            }\n        }\n\n        function _filterChain() {\n            var left = expression();\n            var token;\n            while(true) {\n                if ((token = expect('|'))) {\n                    left = binaryFn(left, token.fn, filter());\n                } else {\n                    return left;\n                }\n            }\n        }\n\n        function filter() {\n            var token = expect();\n            var fn = $filter(token.text);\n            var argsFn = [];\n            while(true) {\n                if ((token = expect(':'))) {\n                    argsFn.push(expression());\n                } else {\n                    var fnInvoke = function(self, locals, input){\n                        var args = [input];\n                        for ( var i = 0; i < argsFn.length; i++) {\n                            args.push(argsFn[i](self, locals));\n                        }\n                        return fn.apply(self, args);\n                    };\n                    return function() {\n                        return fnInvoke;\n                    };\n                }\n            }\n        }\n\n        function expression() {\n            return assignment();\n        }\n\n        function _assignment() {\n            var left = logicalOR();\n            var right;\n            var token;\n            if ((token = expect('='))) {\n                if (!left.assign) {\n                    throwError(\"implies assignment but [\" +\n                        text.substring(0, token.index) + \"] can not be assigned to\", token);\n                }\n                right = logicalOR();\n                return function(scope, locals){\n                    return left.assign(scope, right(scope, locals), locals);\n                };\n            } else {\n                return left;\n            }\n        }\n\n        function logicalOR() {\n            var left = logicalAND();\n            var token;\n            while(true) {\n                if ((token = expect('||'))) {\n                    left = binaryFn(left, token.fn, logicalAND());\n                } else {\n                    return left;\n                }\n            }\n        }\n\n        function logicalAND() {\n            var left = equality();\n            var token;\n            if ((token = expect('&&'))) {\n                left = binaryFn(left, token.fn, logicalAND());\n            }\n            return left;\n        }\n\n        function equality() {\n            var left = relational();\n            var token;\n            if ((token = expect('==','!='))) {\n                left = binaryFn(left, token.fn, equality());\n            }\n            return left;\n        }\n\n        function relational() {\n            var left = additive();\n            var token;\n            if ((token = expect('<', '>', '<=', '>='))) {\n                left = binaryFn(left, token.fn, relational());\n            }\n            return left;\n        }\n\n        function additive() {\n            var left = multiplicative();\n            var token;\n            while ((token = expect('+','-'))) {\n                left = binaryFn(left, token.fn, multiplicative());\n            }\n            return left;\n        }\n\n        function multiplicative() {\n            var left = unary();\n            var token;\n            while ((token = expect('*','/','%'))) {\n                left = binaryFn(left, token.fn, unary());\n            }\n            return left;\n        }\n\n        function unary() {\n            var token;\n            if (expect('+')) {\n                return primary();\n            } else if ((token = expect('-'))) {\n                return binaryFn(ZERO, token.fn, unary());\n            } else if ((token = expect('!'))) {\n                return unaryFn(token.fn, unary());\n            } else {\n                return primary();\n            }\n        }\n\n\n        function primary() {\n            var primary;\n            if (expect('(')) {\n                primary = filterChain();\n                consume(')');\n            } else if (expect('[')) {\n                primary = arrayDeclaration();\n            } else if (expect('{')) {\n                primary = object();\n            } else {\n                var token = expect();\n                primary = token.fn;\n                if (!primary) {\n                    throwError(\"not a primary expression\", token);\n                }\n            }\n\n            var next, context;\n            while ((next = expect('(', '[', '.'))) {\n                if (next.text === '(') {\n                    primary = functionCall(primary, context);\n                    context = null;\n                } else if (next.text === '[') {\n                    context = primary;\n                    primary = objectIndex(primary);\n                } else if (next.text === '.') {\n                    context = primary;\n                    primary = fieldAccess(primary);\n                } else {\n                    throwError(\"IMPOSSIBLE\");\n                }\n            }\n            return primary;\n        }\n\n        function _fieldAccess(object) {\n            var field = expect().text;\n            var getter = getterFn(field, csp);\n            return extend(\n                function(scope, locals, self) {\n                    return getter(self || object(scope, locals), locals);\n                },\n                {\n                    assign:function(scope, value, locals) {\n                        return setter(object(scope, locals), field, value);\n                    }\n                }\n            );\n        }\n\n        function _objectIndex(obj) {\n            var indexFn = expression();\n            consume(']');\n            return extend(\n                function(self, locals){\n                    var o = obj(self, locals),\n                        i = indexFn(self, locals),\n                        v, p;\n\n                    if (!o) return undefined;\n                    v = o[i];\n                    if (v && v.then) {\n                        p = v;\n                        if (!('$$v' in v)) {\n                            p.$$v = undefined;\n                            p.then(function(val) { p.$$v = val; });\n                        }\n                        v = v.$$v;\n                    }\n                    return v;\n                }, {\n                    assign:function(self, value, locals){\n                        return obj(self, locals)[indexFn(self, locals)] = value;\n                    }\n                });\n        }\n\n        function _functionCall(fn, contextGetter) {\n            var argsFn = [];\n            if (peekToken().text != ')') {\n                do {\n                    argsFn.push(expression());\n                } while (expect(','));\n            }\n            consume(')');\n            return function(scope, locals){\n                var args = [],\n                    context = contextGetter ? contextGetter(scope, locals) : scope;\n\n                for ( var i = 0; i < argsFn.length; i++) {\n                    args.push(argsFn[i](scope, locals));\n                }\n                var fnPtr = fn(scope, locals, context) || noop;\n                // IE stupidity!\n                return fnPtr.apply\n                    ? fnPtr.apply(context, args)\n                    : fnPtr(args[0], args[1], args[2], args[3], args[4]);\n            };\n        }\n\n        // This is used with json array declaration\n        function arrayDeclaration () {\n            var elementFns = [];\n            if (peekToken().text != ']') {\n                do {\n                    elementFns.push(expression());\n                } while (expect(','));\n            }\n            consume(']');\n            return function(self, locals){\n                var array = [];\n                for ( var i = 0; i < elementFns.length; i++) {\n                    array.push(elementFns[i](self, locals));\n                }\n                return array;\n            };\n        }\n\n        function object () {\n            var keyValues = [];\n            if (peekToken().text != '}') {\n                do {\n                    var token = expect(),\n                        key = token.string || token.text;\n                    consume(\":\");\n                    var value = expression();\n                    keyValues.push({key:key, value:value});\n                } while (expect(','));\n            }\n            consume('}');\n            return function(self, locals){\n                var object = {};\n                for ( var i = 0; i < keyValues.length; i++) {\n                    var keyValue = keyValues[i];\n                    object[keyValue.key] = keyValue.value(self, locals);\n                }\n                return object;\n            };\n        }\n    }\n\n//////////////////////////////////////////////////\n// Parser helper functions\n//////////////////////////////////////////////////\n\n    function setter(obj, path, setValue) {\n        var element = path.split('.');\n        for (var i = 0; element.length > 1; i++) {\n            var key = element.shift();\n            var propertyObj = obj[key];\n            if (!propertyObj) {\n                propertyObj = {};\n                obj[key] = propertyObj;\n            }\n            obj = propertyObj;\n        }\n        obj[element.shift()] = setValue;\n        return setValue;\n    }\n\n    /**\n     * Return the value accesible from the object by path. Any undefined traversals are ignored\n     * @param {Object} obj starting object\n     * @param {string} path path to traverse\n     * @param {boolean=true} bindFnToScope\n     * @returns value as accesbile by path\n     */\n//TODO(misko): this function needs to be removed\n    function getter(obj, path, bindFnToScope) {\n        if (!path) return obj;\n        var keys = path.split('.');\n        var key;\n        var lastInstance = obj;\n        var len = keys.length;\n\n        for (var i = 0; i < len; i++) {\n            key = keys[i];\n            if (obj) {\n                obj = (lastInstance = obj)[key];\n            }\n        }\n        if (!bindFnToScope && isFunction(obj)) {\n            return bind(lastInstance, obj);\n        }\n        return obj;\n    }\n\n    var getterFnCache = {};\n\n    /**\n     * Implementation of the \"Black Hole\" variant from:\n     * - http://jsperf.com/angularjs-parse-getter/4\n     * - http://jsperf.com/path-evaluation-simplified/7\n     */\n    function cspSafeGetterFn(key0, key1, key2, key3, key4) {\n        return function(scope, locals) {\n            var pathVal = (locals && locals.hasOwnProperty(key0)) ? locals : scope,\n                promise;\n\n            if (pathVal === null || pathVal === undefined) return pathVal;\n\n            pathVal = pathVal[key0];\n            if (pathVal && pathVal.then) {\n                if (!(\"$$v\" in pathVal)) {\n                    promise = pathVal;\n                    promise.$$v = undefined;\n                    promise.then(function(val) { promise.$$v = val; });\n                }\n                pathVal = pathVal.$$v;\n            }\n            if (!key1 || pathVal === null || pathVal === undefined) return pathVal;\n\n            pathVal = pathVal[key1];\n            if (pathVal && pathVal.then) {\n                if (!(\"$$v\" in pathVal)) {\n                    promise = pathVal;\n                    promise.$$v = undefined;\n                    promise.then(function(val) { promise.$$v = val; });\n                }\n                pathVal = pathVal.$$v;\n            }\n            if (!key2 || pathVal === null || pathVal === undefined) return pathVal;\n\n            pathVal = pathVal[key2];\n            if (pathVal && pathVal.then) {\n                if (!(\"$$v\" in pathVal)) {\n                    promise = pathVal;\n                    promise.$$v = undefined;\n                    promise.then(function(val) { promise.$$v = val; });\n                }\n                pathVal = pathVal.$$v;\n            }\n            if (!key3 || pathVal === null || pathVal === undefined) return pathVal;\n\n            pathVal = pathVal[key3];\n            if (pathVal && pathVal.then) {\n                if (!(\"$$v\" in pathVal)) {\n                    promise = pathVal;\n                    promise.$$v = undefined;\n                    promise.then(function(val) { promise.$$v = val; });\n                }\n                pathVal = pathVal.$$v;\n            }\n            if (!key4 || pathVal === null || pathVal === undefined) return pathVal;\n\n            pathVal = pathVal[key4];\n            if (pathVal && pathVal.then) {\n                if (!(\"$$v\" in pathVal)) {\n                    promise = pathVal;\n                    promise.$$v = undefined;\n                    promise.then(function(val) { promise.$$v = val; });\n                }\n                pathVal = pathVal.$$v;\n            }\n            return pathVal;\n        };\n    }\n\n    function getterFn(path, csp) {\n        if (getterFnCache.hasOwnProperty(path)) {\n            return getterFnCache[path];\n        }\n\n        var pathKeys = path.split('.'),\n            pathKeysLength = pathKeys.length,\n            fn;\n\n        if (csp) {\n            fn = (pathKeysLength < 6)\n                ? cspSafeGetterFn(pathKeys[0], pathKeys[1], pathKeys[2], pathKeys[3], pathKeys[4])\n                : function(scope, locals) {\n                var i = 0, val;\n                do {\n                    val = cspSafeGetterFn(\n                        pathKeys[i++], pathKeys[i++], pathKeys[i++], pathKeys[i++], pathKeys[i++]\n                    )(scope, locals);\n\n                    locals = undefined; // clear after first iteration\n                    scope = val;\n                } while (i < pathKeysLength);\n                return val;\n            }\n        } else {\n            var code = 'var l, fn, p;\\n';\n            forEach(pathKeys, function(key, index) {\n                code += 'if(s === null || s === undefined) return s;\\n' +\n                    'l=s;\\n' +\n                    's='+ (index\n                    // we simply dereference 's' on any .dot notation\n                    ? 's'\n                    // but if we are first then we check locals first, and if so read it first\n                    : '((k&&k.hasOwnProperty(\"' + key + '\"))?k:s)') + '[\"' + key + '\"]' + ';\\n' +\n                    'if (s && s.then) {\\n' +\n                    ' if (!(\"$$v\" in s)) {\\n' +\n                    ' p=s;\\n' +\n                    ' p.$$v = undefined;\\n' +\n                    ' p.then(function(v) {p.$$v=v;});\\n' +\n                    '}\\n' +\n                    ' s=s.$$v\\n' +\n                    '}\\n';\n            });\n            code += 'return s;';\n            fn = Function('s', 'k', code); // s=scope, k=locals\n            fn.toString = function() { return code; };\n        }\n\n        return getterFnCache[path] = fn;\n    }\n\n///////////////////////////////////\n\n    /**\n     * @ngdoc function\n     * @name ng.$parse\n     * @function\n     *\n     * @description\n     *\n     * Converts Angular {@link guide/expression expression} into a function.\n     *\n     * <pre>\n     *   var getter = $parse('user.name');\n     *   var setter = getter.assign;\n     *   var context = {user:{name:'angular'}};\n     *   var locals = {user:{name:'local'}};\n     *\n     *   expect(getter(context)).toEqual('angular');\n     *   setter(context, 'newValue');\n     *   expect(context.user.name).toEqual('newValue');\n     *   expect(getter(context, locals)).toEqual('local');\n     * </pre>\n     *\n     *\n     * @param {string} expression String expression to compile.\n     * @returns {function(context, locals)} a function which represents the compiled expression:\n     *\n     *    * `context` \u2013 `{object}` \u2013 an object against which any expressions embedded in the strings\n     *      are evaluated against (tipically a scope object).\n     *    * `locals` \u2013 `{object=}` \u2013 local variables context object, useful for overriding values in\n     *      `context`.\n     *\n     *    The return function also has an `assign` property, if the expression is assignable, which\n     *    allows one to set values to expressions.\n     *\n     */\n    function $ParseProvider() {\n        var cache = {};\n        this.$get = ['$filter', '$sniffer', function($filter, $sniffer) {\n            return function(exp) {\n                switch(typeof exp) {\n                    case 'string':\n                        return cache.hasOwnProperty(exp)\n                            ? cache[exp]\n                            : cache[exp] =  parser(exp, false, $filter, $sniffer.csp);\n                    case 'function':\n                        return exp;\n                    default:\n                        return noop;\n                }\n            };\n        }];\n    }\n\n    /**\n     * @ngdoc service\n     * @name ng.$q\n     * @requires $rootScope\n     *\n     * @description\n     * A promise/deferred implementation inspired by [Kris Kowal's Q](https://github.com/kriskowal/q).\n     *\n     * [The CommonJS Promise proposal](http://wiki.commonjs.org/wiki/Promises) describes a promise as an\n     * interface for interacting with an object that represents the result of an action that is\n     * performed asynchronously, and may or may not be finished at any given point in time.\n     *\n     * From the perspective of dealing with error handling, deferred and promise APIs are to\n     * asynchronous programming what `try`, `catch` and `throw` keywords are to synchronous programming.\n     *\n     * <pre>\n     *   // for the purpose of this example let's assume that variables `$q` and `scope` are\n     *   // available in the current lexical scope (they could have been injected or passed in).\n     *\n     *   function asyncGreet(name) {\n *     var deferred = $q.defer();\n *\n *     setTimeout(function() {\n *       // since this fn executes async in a future turn of the event loop, we need to wrap\n *       // our code into an $apply call so that the model changes are properly observed.\n *       scope.$apply(function() {\n *         if (okToGreet(name)) {\n *           deferred.resolve('Hello, ' + name + '!');\n *         } else {\n *           deferred.reject('Greeting ' + name + ' is not allowed.');\n *         }\n *       });\n *     }, 1000);\n *\n *     return deferred.promise;\n *   }\n     *\n     *   var promise = asyncGreet('Robin Hood');\n     *   promise.then(function(greeting) {\n *     alert('Success: ' + greeting);\n *   }, function(reason) {\n *     alert('Failed: ' + reason);\n *   });\n     * </pre>\n     *\n     * At first it might not be obvious why this extra complexity is worth the trouble. The payoff\n     * comes in the way of\n     * [guarantees that promise and deferred APIs make](https://github.com/kriskowal/uncommonjs/blob/master/promises/specification.md).\n     *\n     * Additionally the promise api allows for composition that is very hard to do with the\n     * traditional callback ([CPS](http://en.wikipedia.org/wiki/Continuation-passing_style)) approach.\n     * For more on this please see the [Q documentation](https://github.com/kriskowal/q) especially the\n     * section on serial or parallel joining of promises.\n     *\n     *\n     * # The Deferred API\n     *\n     * A new instance of deferred is constructed by calling `$q.defer()`.\n     *\n     * The purpose of the deferred object is to expose the associated Promise instance as well as APIs\n     * that can be used for signaling the successful or unsuccessful completion of the task.\n     *\n     * **Methods**\n     *\n     * - `resolve(value)` \u2013 resolves the derived promise with the `value`. If the value is a rejection\n     *   constructed via `$q.reject`, the promise will be rejected instead.\n     * - `reject(reason)` \u2013 rejects the derived promise with the `reason`. This is equivalent to\n     *   resolving it with a rejection constructed via `$q.reject`.\n     *\n     * **Properties**\n     *\n     * - promise \u2013 `{Promise}` \u2013 promise object associated with this deferred.\n     *\n     *\n     * # The Promise API\n     *\n     * A new promise instance is created when a deferred instance is created and can be retrieved by\n     * calling `deferred.promise`.\n     *\n     * The purpose of the promise object is to allow for interested parties to get access to the result\n     * of the deferred task when it completes.\n     *\n     * **Methods**\n     *\n     * - `then(successCallback, errorCallback)` \u2013 regardless of when the promise was or will be resolved\n     *   or rejected calls one of the success or error callbacks asynchronously as soon as the result\n     *   is available. The callbacks are called with a single argument the result or rejection reason.\n     *\n     *   This method *returns a new promise* which is resolved or rejected via the return value of the\n     *   `successCallback` or `errorCallback`.\n     *\n     *\n     * # Chaining promises\n     *\n     * Because calling `then` api of a promise returns a new derived promise, it is easily possible\n     * to create a chain of promises:\n     *\n     * <pre>\n     *   promiseB = promiseA.then(function(result) {\n *     return result + 1;\n *   });\n     *\n     *   // promiseB will be resolved immediately after promiseA is resolved and its value will be\n     *   // the result of promiseA incremented by 1\n     * </pre>\n     *\n     * It is possible to create chains of any length and since a promise can be resolved with another\n     * promise (which will defer its resolution further), it is possible to pause/defer resolution of\n     * the promises at any point in the chain. This makes it possible to implement powerful apis like\n     * $http's response interceptors.\n     *\n     *\n     * # Differences between Kris Kowal's Q and $q\n     *\n     *  There are three main differences:\n     *\n     * - $q is integrated with the {@link ng.$rootScope.Scope} Scope model observation\n     *   mechanism in angular, which means faster propagation of resolution or rejection into your\n     *   models and avoiding unnecessary browser repaints, which would result in flickering UI.\n     * - $q promises are recognized by the templating engine in angular, which means that in templates\n     *   you can treat promises attached to a scope as if they were the resulting values.\n     * - Q has many more features than $q, but that comes at a cost of bytes. $q is tiny, but contains\n     *   all the important functionality needed for common async tasks.\n     *\n     *  # Testing\n     *\n     *  <pre>\n     *    it('should simulate promise', inject(function($q, $rootScope) {\n *      var deferred = $q.defer();\n *      var promise = deferred.promise;\n *      var resolvedValue;\n * \n *      promise.then(function(value) { resolvedValue = value; });\n *      expect(resolvedValue).toBeUndefined();\n * \n *      // Simulate resolving of promise\n *      deferred.resolve(123);\n *      // Note that the 'then' function does not get called synchronously.\n *      // This is because we want the promise API to always be async, whether or not\n *      // it got called synchronously or asynchronously.\n *      expect(resolvedValue).toBeUndefined();\n * \n *      // Propagate promise resolution to 'then' functions using $apply().\n *      $rootScope.$apply();\n *      expect(resolvedValue).toEqual(123);\n *    });\n     *  </pre>\n     */\n    function $QProvider() {\n\n        this.$get = ['$rootScope', '$exceptionHandler', function($rootScope, $exceptionHandler) {\n            return qFactory(function(callback) {\n                $rootScope.$evalAsync(callback);\n            }, $exceptionHandler);\n        }];\n    }\n\n\n    /**\n     * Constructs a promise manager.\n     *\n     * @param {function(function)} nextTick Function for executing functions in the next turn.\n     * @param {function(...*)} exceptionHandler Function into which unexpected exceptions are passed for\n     *     debugging purposes.\n     * @returns {object} Promise manager.\n     */\n    function qFactory(nextTick, exceptionHandler) {\n\n        /**\n         * @ngdoc\n         * @name ng.$q#defer\n         * @methodOf ng.$q\n         * @description\n         * Creates a `Deferred` object which represents a task which will finish in the future.\n         *\n         * @returns {Deferred} Returns a new instance of deferred.\n         */\n        var defer = function() {\n            var pending = [],\n                value, deferred;\n\n            deferred = {\n\n                resolve: function(val) {\n                    if (pending) {\n                        var callbacks = pending;\n                        pending = undefined;\n                        value = ref(val);\n\n                        if (callbacks.length) {\n                            nextTick(function() {\n                                var callback;\n                                for (var i = 0, ii = callbacks.length; i < ii; i++) {\n                                    callback = callbacks[i];\n                                    value.then(callback[0], callback[1]);\n                                }\n                            });\n                        }\n                    }\n                },\n\n\n                reject: function(reason) {\n                    deferred.resolve(reject(reason));\n                },\n\n\n                promise: {\n                    then: function(callback, errback) {\n                        var result = defer();\n\n                        var wrappedCallback = function(value) {\n                            try {\n                                result.resolve((callback || defaultCallback)(value));\n                            } catch(e) {\n                                exceptionHandler(e);\n                                result.reject(e);\n                            }\n                        };\n\n                        var wrappedErrback = function(reason) {\n                            try {\n                                result.resolve((errback || defaultErrback)(reason));\n                            } catch(e) {\n                                exceptionHandler(e);\n                                result.reject(e);\n                            }\n                        };\n\n                        if (pending) {\n                            pending.push([wrappedCallback, wrappedErrback]);\n                        } else {\n                            value.then(wrappedCallback, wrappedErrback);\n                        }\n\n                        return result.promise;\n                    }\n                }\n            };\n\n            return deferred;\n        };\n\n\n        var ref = function(value) {\n            if (value && value.then) return value;\n            return {\n                then: function(callback) {\n                    var result = defer();\n                    nextTick(function() {\n                        result.resolve(callback(value));\n                    });\n                    return result.promise;\n                }\n            };\n        };\n\n\n        /**\n         * @ngdoc\n         * @name ng.$q#reject\n         * @methodOf ng.$q\n         * @description\n         * Creates a promise that is resolved as rejected with the specified `reason`. This api should be\n         * used to forward rejection in a chain of promises. If you are dealing with the last promise in\n         * a promise chain, you don't need to worry about it.\n         *\n         * When comparing deferreds/promises to the familiar behavior of try/catch/throw, think of\n         * `reject` as the `throw` keyword in JavaScript. This also means that if you \"catch\" an error via\n         * a promise error callback and you want to forward the error to the promise derived from the\n         * current promise, you have to \"rethrow\" the error by returning a rejection constructed via\n         * `reject`.\n         *\n         * <pre>\n         *   promiseB = promiseA.then(function(result) {\n   *     // success: do something and resolve promiseB\n   *     //          with the old or a new result\n   *     return result;\n   *   }, function(reason) {\n   *     // error: handle the error if possible and\n   *     //        resolve promiseB with newPromiseOrValue,\n   *     //        otherwise forward the rejection to promiseB\n   *     if (canHandle(reason)) {\n   *      // handle the error and recover\n   *      return newPromiseOrValue;\n   *     }\n   *     return $q.reject(reason);\n   *   });\n         * </pre>\n         *\n         * @param {*} reason Constant, message, exception or an object representing the rejection reason.\n         * @returns {Promise} Returns a promise that was already resolved as rejected with the `reason`.\n         */\n        var reject = function(reason) {\n            return {\n                then: function(callback, errback) {\n                    var result = defer();\n                    nextTick(function() {\n                        result.resolve((errback || defaultErrback)(reason));\n                    });\n                    return result.promise;\n                }\n            };\n        };\n\n\n        /**\n         * @ngdoc\n         * @name ng.$q#when\n         * @methodOf ng.$q\n         * @description\n         * Wraps an object that might be a value or a (3rd party) then-able promise into a $q promise.\n         * This is useful when you are dealing with an object that might or might not be a promise, or if\n         * the promise comes from a source that can't be trusted.\n         *\n         * @param {*} value Value or a promise\n         * @returns {Promise} Returns a promise of the passed value or promise\n         */\n        var when = function(value, callback, errback) {\n            var result = defer(),\n                done;\n\n            var wrappedCallback = function(value) {\n                try {\n                    return (callback || defaultCallback)(value);\n                } catch (e) {\n                    exceptionHandler(e);\n                    return reject(e);\n                }\n            };\n\n            var wrappedErrback = function(reason) {\n                try {\n                    return (errback || defaultErrback)(reason);\n                } catch (e) {\n                    exceptionHandler(e);\n                    return reject(e);\n                }\n            };\n\n            nextTick(function() {\n                ref(value).then(function(value) {\n                    if (done) return;\n                    done = true;\n                    result.resolve(ref(value).then(wrappedCallback, wrappedErrback));\n                }, function(reason) {\n                    if (done) return;\n                    done = true;\n                    result.resolve(wrappedErrback(reason));\n                });\n            });\n\n            return result.promise;\n        };\n\n\n        function defaultCallback(value) {\n            return value;\n        }\n\n\n        function defaultErrback(reason) {\n            return reject(reason);\n        }\n\n\n        /**\n         * @ngdoc\n         * @name ng.$q#all\n         * @methodOf ng.$q\n         * @description\n         * Combines multiple promises into a single promise that is resolved when all of the input\n         * promises are resolved.\n         *\n         * @param {Array.<Promise>} promises An array of promises.\n         * @returns {Promise} Returns a single promise that will be resolved with an array of values,\n         *   each value corresponding to the promise at the same index in the `promises` array. If any of\n         *   the promises is resolved with a rejection, this resulting promise will be resolved with the\n         *   same rejection.\n         */\n        function all(promises) {\n            var deferred = defer(),\n                counter = promises.length,\n                results = [];\n\n            if (counter) {\n                forEach(promises, function(promise, index) {\n                    ref(promise).then(function(value) {\n                        if (index in results) return;\n                        results[index] = value;\n                        if (!(--counter)) deferred.resolve(results);\n                    }, function(reason) {\n                        if (index in results) return;\n                        deferred.reject(reason);\n                    });\n                });\n            } else {\n                deferred.resolve(results);\n            }\n\n            return deferred.promise;\n        }\n\n        return {\n            defer: defer,\n            reject: reject,\n            when: when,\n            all: all\n        };\n    }\n\n    /**\n     * @ngdoc object\n     * @name ng.$routeProvider\n     * @function\n     *\n     * @description\n     *\n     * Used for configuring routes. See {@link ng.$route $route} for an example.\n     */\n    function $RouteProvider(){\n        var routes = {};\n\n        /**\n         * @ngdoc method\n         * @name ng.$routeProvider#when\n         * @methodOf ng.$routeProvider\n         *\n         * @param {string} path Route path (matched against `$location.path`). If `$location.path`\n         *    contains redundant trailing slash or is missing one, the route will still match and the\n         *    `$location.path` will be updated to add or drop the trailing slash to exactly match the\n         *    route definition.\n         *\n         *    `path` can contain named groups starting with a colon (`:name`). All characters up to the\n         *    next slash are matched and stored in `$routeParams` under the given `name` when the route\n         *    matches.\n         *\n         * @param {Object} route Mapping information to be assigned to `$route.current` on route\n         *    match.\n         *\n         *    Object properties:\n         *\n         *    - `controller` \u2013 `{(string|function()=}` \u2013 Controller fn that should be associated with newly\n         *      created scope or the name of a {@link angular.Module#controller registered controller}\n         *      if passed as a string.\n         *    - `template` \u2013 `{string=}` \u2013  html template as a string that should be used by\n         *      {@link ng.directive:ngView ngView} or\n         *      {@link ng.directive:ngInclude ngInclude} directives.\n         *      this property takes precedence over `templateUrl`.\n         *    - `templateUrl` \u2013 `{string=}` \u2013 path to an html template that should be used by\n         *      {@link ng.directive:ngView ngView}.\n         *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n         *      be injected into the controller. If any of these dependencies are promises, they will be\n         *      resolved and converted to a value before the controller is instantiated and the\n         *      `$routeChangeSuccess` event is fired. The map object is:\n         *\n         *      - `key` \u2013 `{string}`: a name of a dependency to be injected into the controller.\n         *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\n         *        Otherwise if function, then it is {@link api/AUTO.$injector#invoke injected}\n         *        and the return value is treated as the dependency. If the result is a promise, it is resolved\n         *        before its value is injected into the controller.\n         *\n         *    - `redirectTo` \u2013 {(string|function())=} \u2013 value to update\n         *      {@link ng.$location $location} path with and trigger route redirection.\n         *\n         *      If `redirectTo` is a function, it will be called with the following parameters:\n         *\n         *      - `{Object.<string>}` - route parameters extracted from the current\n         *        `$location.path()` by applying the current route templateUrl.\n         *      - `{string}` - current `$location.path()`\n         *      - `{Object}` - current `$location.search()`\n         *\n         *      The custom `redirectTo` function is expected to return a string which will be used\n         *      to update `$location.path()` and `$location.search()`.\n         *\n         *    - `[reloadOnSearch=true]` - {boolean=} - reload route when only $location.search()\n         *    changes.\n         *\n         *      If the option is set to `false` and url in the browser changes, then\n         *      `$routeUpdate` event is broadcasted on the root scope.\n         *\n         * @returns {Object} self\n         *\n         * @description\n         * Adds a new route definition to the `$route` service.\n         */\n        this.when = function(path, route) {\n            routes[path] = extend({reloadOnSearch: true}, route);\n\n            // create redirection for trailing slashes\n            if (path) {\n                var redirectPath = (path[path.length-1] == '/')\n                    ? path.substr(0, path.length-1)\n                    : path +'/';\n\n                routes[redirectPath] = {redirectTo: path};\n            }\n\n            return this;\n        };\n\n        /**\n         * @ngdoc method\n         * @name ng.$routeProvider#otherwise\n         * @methodOf ng.$routeProvider\n         *\n         * @description\n         * Sets route definition that will be used on route change when no other route definition\n         * is matched.\n         *\n         * @param {Object} params Mapping information to be assigned to `$route.current`.\n         * @returns {Object} self\n         */\n        this.otherwise = function(params) {\n            this.when(null, params);\n            return this;\n        };\n\n\n        this.$get = ['$rootScope', '$location', '$routeParams', '$q', '$injector', '$http', '$templateCache',\n            function( $rootScope,   $location,   $routeParams,   $q,   $injector,   $http,   $templateCache) {\n\n                /**\n                 * @ngdoc object\n                 * @name ng.$route\n                 * @requires $location\n                 * @requires $routeParams\n                 *\n                 * @property {Object} current Reference to the current route definition.\n                 * The route definition contains:\n                 *\n                 *   - `controller`: The controller constructor as define in route definition.\n                 *   - `locals`: A map of locals which is used by {@link ng.$controller $controller} service for\n                 *     controller instantiation. The `locals` contain\n                 *     the resolved values of the `resolve` map. Additionally the `locals` also contain:\n                 *\n                 *     - `$scope` - The current route scope.\n                 *     - `$template` - The current route template HTML.\n                 *\n                 * @property {Array.<Object>} routes Array of all configured routes.\n                 *\n                 * @description\n                 * Is used for deep-linking URLs to controllers and views (HTML partials).\n                 * It watches `$location.url()` and tries to map the path to an existing route definition.\n                 *\n                 * You can define routes through {@link ng.$routeProvider $routeProvider}'s API.\n                 *\n                 * The `$route` service is typically used in conjunction with {@link ng.directive:ngView ngView}\n                 * directive and the {@link ng.$routeParams $routeParams} service.\n                 *\n                 * @example\n                 This example shows how changing the URL hash causes the `$route` to match a route against the\n                 URL, and the `ngView` pulls in the partial.\n\n                 Note that this example is using {@link ng.directive:script inlined templates}\n                 to get it working on jsfiddle as well.\n\n                 <example module=\"ngView\">\n                 <file name=\"index.html\">\n                 <div ng-controller=\"MainCntl\">\n                 Choose:\n                 <a href=\"Book/Moby\">Moby</a> |\n                 <a href=\"Book/Moby/ch/1\">Moby: Ch1</a> |\n                 <a href=\"Book/Gatsby\">Gatsby</a> |\n                 <a href=\"Book/Gatsby/ch/4?key=value\">Gatsby: Ch4</a> |\n                 <a href=\"Book/Scarlet\">Scarlet Letter</a><br/>\n\n                 <div ng-view></div>\n                 <hr />\n\n                 <pre>$location.path() = {{$location.path()}}</pre>\n                 <pre>$route.current.templateUrl = {{$route.current.templateUrl}}</pre>\n                 <pre>$route.current.params = {{$route.current.params}}</pre>\n                 <pre>$route.current.scope.name = {{$route.current.scope.name}}</pre>\n                 <pre>$routeParams = {{$routeParams}}</pre>\n                 </div>\n                 </file>\n\n                 <file name=\"book.html\">\n                 controller: {{name}}<br />\n                 Book Id: {{params.bookId}}<br />\n                 </file>\n\n                 <file name=\"chapter.html\">\n                 controller: {{name}}<br />\n                 Book Id: {{params.bookId}}<br />\n                 Chapter Id: {{params.chapterId}}\n                 </file>\n\n                 <file name=\"script.js\">\n                 angular.module('ngView', [], function($routeProvider, $locationProvider) {\n           $routeProvider.when('/Book/:bookId', {\n             templateUrl: 'book.html',\n             controller: BookCntl,\n             resolve: {\n               // I will cause a 1 second delay\n               delay: function($q, $timeout) {\n                 var delay = $q.defer();\n                 $timeout(delay.resolve, 1000);\n                 return delay.promise;\n               }\n             }\n           });\n           $routeProvider.when('/Book/:bookId/ch/:chapterId', {\n             templateUrl: 'chapter.html',\n             controller: ChapterCntl\n           });\n\n           // configure html5 to get links working on jsfiddle\n           $locationProvider.html5Mode(true);\n         });\n\n                 function MainCntl($scope, $route, $routeParams, $location) {\n           $scope.$route = $route;\n           $scope.$location = $location;\n           $scope.$routeParams = $routeParams;\n         }\n\n                 function BookCntl($scope, $routeParams) {\n           $scope.name = \"BookCntl\";\n           $scope.params = $routeParams;\n         }\n\n                 function ChapterCntl($scope, $routeParams) {\n           $scope.name = \"ChapterCntl\";\n           $scope.params = $routeParams;\n         }\n                 </file>\n\n                 <file name=\"scenario.js\">\n                 it('should load and compile correct template', function() {\n           element('a:contains(\"Moby: Ch1\")').click();\n           var content = element('.doc-example-live [ng-view]').text();\n           expect(content).toMatch(/controller\\: ChapterCntl/);\n           expect(content).toMatch(/Book Id\\: Moby/);\n           expect(content).toMatch(/Chapter Id\\: 1/);\n\n           element('a:contains(\"Scarlet\")').click();\n           sleep(2); // promises are not part of scenario waiting\n           content = element('.doc-example-live [ng-view]').text();\n           expect(content).toMatch(/controller\\: BookCntl/);\n           expect(content).toMatch(/Book Id\\: Scarlet/);\n         });\n                 </file>\n                 </example>\n                 */\n\n                /**\n                 * @ngdoc event\n                 * @name ng.$route#$routeChangeStart\n                 * @eventOf ng.$route\n                 * @eventType broadcast on root scope\n                 * @description\n                 * Broadcasted before a route change. At this  point the route services starts\n                 * resolving all of the dependencies needed for the route change to occurs.\n                 * Typically this involves fetching the view template as well as any dependencies\n                 * defined in `resolve` route property. Once  all of the dependencies are resolved\n                 * `$routeChangeSuccess` is fired.\n                 *\n                 * @param {Route} next Future route information.\n                 * @param {Route} current Current route information.\n                 */\n\n                /**\n                 * @ngdoc event\n                 * @name ng.$route#$routeChangeSuccess\n                 * @eventOf ng.$route\n                 * @eventType broadcast on root scope\n                 * @description\n                 * Broadcasted after a route dependencies are resolved.\n                 * {@link ng.directive:ngView ngView} listens for the directive\n                 * to instantiate the controller and render the view.\n                 *\n                 * @param {Object} angularEvent Synthetic event object.\n                 * @param {Route} current Current route information.\n                 * @param {Route|Undefined} previous Previous route information, or undefined if current is first route entered.\n                 */\n\n                /**\n                 * @ngdoc event\n                 * @name ng.$route#$routeChangeError\n                 * @eventOf ng.$route\n                 * @eventType broadcast on root scope\n                 * @description\n                 * Broadcasted if any of the resolve promises are rejected.\n                 *\n                 * @param {Route} current Current route information.\n                 * @param {Route} previous Previous route information.\n                 * @param {Route} rejection Rejection of the promise. Usually the error of the failed promise.\n                 */\n\n                /**\n                 * @ngdoc event\n                 * @name ng.$route#$routeUpdate\n                 * @eventOf ng.$route\n                 * @eventType broadcast on root scope\n                 * @description\n                 *\n                 * The `reloadOnSearch` property has been set to false, and we are reusing the same\n                 * instance of the Controller.\n                 */\n\n                var forceReload = false,\n                    $route = {\n                        routes: routes,\n\n                        /**\n                         * @ngdoc method\n                         * @name ng.$route#reload\n                         * @methodOf ng.$route\n                         *\n                         * @description\n                         * Causes `$route` service to reload the current route even if\n                         * {@link ng.$location $location} hasn't changed.\n                         *\n                         * As a result of that, {@link ng.directive:ngView ngView}\n                         * creates new scope, reinstantiates the controller.\n                         */\n                        reload: function() {\n                            forceReload = true;\n                            $rootScope.$evalAsync(updateRoute);\n                        }\n                    };\n\n                $rootScope.$on('$locationChangeSuccess', updateRoute);\n\n                return $route;\n\n                /////////////////////////////////////////////////////\n\n                /**\n                 * @param on {string} current url\n                 * @param when {string} route when template to match the url against\n                 * @return {?Object}\n                 */\n                function switchRouteMatcher(on, when) {\n                    // TODO(i): this code is convoluted and inefficient, we should construct the route matching\n                    //   regex only once and then reuse it\n\n                    // Escape regexp special characters.\n                    when = '^' + when.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\") + '$';\n                    var regex = '',\n                        params = [],\n                        dst = {};\n\n                    var re = /:(\\w+)/g,\n                        paramMatch,\n                        lastMatchedIndex = 0;\n\n                    while ((paramMatch = re.exec(when)) !== null) {\n                        // Find each :param in `when` and replace it with a capturing group.\n                        // Append all other sections of when unchanged.\n                        regex += when.slice(lastMatchedIndex, paramMatch.index);\n                        regex += '([^\\\\/]*)';\n                        params.push(paramMatch[1]);\n                        lastMatchedIndex = re.lastIndex;\n                    }\n                    // Append trailing path part.\n                    regex += when.substr(lastMatchedIndex);\n\n                    var match = on.match(new RegExp(regex));\n                    if (match) {\n                        forEach(params, function(name, index) {\n                            dst[name] = match[index + 1];\n                        });\n                    }\n                    return match ? dst : null;\n                }\n\n                function updateRoute() {\n                    var next = parseRoute(),\n                        last = $route.current;\n\n                    if (next && last && next.$$route === last.$$route\n                        && equals(next.pathParams, last.pathParams) && !next.reloadOnSearch && !forceReload) {\n                        last.params = next.params;\n                        copy(last.params, $routeParams);\n                        $rootScope.$broadcast('$routeUpdate', last);\n                    } else if (next || last) {\n                        forceReload = false;\n                        $rootScope.$broadcast('$routeChangeStart', next, last);\n                        $route.current = next;\n                        if (next) {\n                            if (next.redirectTo) {\n                                if (isString(next.redirectTo)) {\n                                    $location.path(interpolate(next.redirectTo, next.params)).search(next.params)\n                                        .replace();\n                                } else {\n                                    $location.url(next.redirectTo(next.pathParams, $location.path(), $location.search()))\n                                        .replace();\n                                }\n                            }\n                        }\n\n                        $q.when(next).\n                            then(function() {\n                                if (next) {\n                                    var keys = [],\n                                        values = [],\n                                        template;\n\n                                    forEach(next.resolve || {}, function(value, key) {\n                                        keys.push(key);\n                                        values.push(isString(value) ? $injector.get(value) : $injector.invoke(value));\n                                    });\n                                    if (isDefined(template = next.template)) {\n                                    } else if (isDefined(template = next.templateUrl)) {\n                                        template = $http.get(template, {cache: $templateCache}).\n                                            then(function(response) { return response.data; });\n                                    }\n                                    if (isDefined(template)) {\n                                        keys.push('$template');\n                                        values.push(template);\n                                    }\n                                    return $q.all(values).then(function(values) {\n                                        var locals = {};\n                                        forEach(values, function(value, index) {\n                                            locals[keys[index]] = value;\n                                        });\n                                        return locals;\n                                    });\n                                }\n                            }).\n                            // after route change\n                            then(function(locals) {\n                                if (next == $route.current) {\n                                    if (next) {\n                                        next.locals = locals;\n                                        copy(next.params, $routeParams);\n                                    }\n                                    $rootScope.$broadcast('$routeChangeSuccess', next, last);\n                                }\n                            }, function(error) {\n                                if (next == $route.current) {\n                                    $rootScope.$broadcast('$routeChangeError', next, last, error);\n                                }\n                            });\n                    }\n                }\n\n\n                /**\n                 * @returns the current active route, by matching it against the URL\n                 */\n                function parseRoute() {\n                    // Match a route\n                    var params, match;\n                    forEach(routes, function(route, path) {\n                        if (!match && (params = switchRouteMatcher($location.path(), path))) {\n                            match = inherit(route, {\n                                params: extend({}, $location.search(), params),\n                                pathParams: params});\n                            match.$$route = route;\n                        }\n                    });\n                    // No route matched; fallback to \"otherwise\" route\n                    return match || routes[null] && inherit(routes[null], {params: {}, pathParams:{}});\n                }\n\n                /**\n                 * @returns interpolation of the redirect path with the parametrs\n                 */\n                function interpolate(string, params) {\n                    var result = [];\n                    forEach((string||'').split(':'), function(segment, i) {\n                        if (i == 0) {\n                            result.push(segment);\n                        } else {\n                            var segmentMatch = segment.match(/(\\w+)(.*)/);\n                            var key = segmentMatch[1];\n                            result.push(params[key]);\n                            result.push(segmentMatch[2] || '');\n                            delete params[key];\n                        }\n                    });\n                    return result.join('');\n                }\n            }];\n    }\n\n    /**\n     * @ngdoc object\n     * @name ng.$routeParams\n     * @requires $route\n     *\n     * @description\n     * Current set of route parameters. The route parameters are a combination of the\n     * {@link ng.$location $location} `search()`, and `path()`. The `path` parameters\n     * are extracted when the {@link ng.$route $route} path is matched.\n     *\n     * In case of parameter name collision, `path` params take precedence over `search` params.\n     *\n     * The service guarantees that the identity of the `$routeParams` object will remain unchanged\n     * (but its properties will likely change) even when a route change occurs.\n     *\n     * @example\n     * <pre>\n     *  // Given:\n     *  // URL: http://server.com/index.html#/Chapter/1/Section/2?search=moby\n     *  // Route: /Chapter/:chapterId/Section/:sectionId\n     *  //\n     *  // Then\n     *  $routeParams ==> {chapterId:1, sectionId:2, search:'moby'}\n     * </pre>\n     */\n    function $RouteParamsProvider() {\n        this.$get = valueFn({});\n    }\n\n    /**\n     * DESIGN NOTES\n     *\n     * The design decisions behind the scope are heavily favored for speed and memory consumption.\n     *\n     * The typical use of scope is to watch the expressions, which most of the time return the same\n     * value as last time so we optimize the operation.\n     *\n     * Closures construction is expensive in terms of speed as well as memory:\n     *   - No closures, instead use prototypical inheritance for API\n     *   - Internal state needs to be stored on scope directly, which means that private state is\n     *     exposed as $$____ properties\n     *\n     * Loop operations are optimized by using while(count--) { ... }\n     *   - this means that in order to keep the same order of execution as addition we have to add\n     *     items to the array at the beginning (shift) instead of at the end (push)\n     *\n     * Child scopes are created and removed often\n     *   - Using an array would be slow since inserts in middle are expensive so we use linked list\n     *\n     * There are few watches then a lot of observers. This is why you don't want the observer to be\n     * implemented in the same way as watch. Watch requires return of initialization function which\n     * are expensive to construct.\n     */\n\n\n    /**\n     * @ngdoc object\n     * @name ng.$rootScopeProvider\n     * @description\n     *\n     * Provider for the $rootScope service.\n     */\n\n    /**\n     * @ngdoc function\n     * @name ng.$rootScopeProvider#digestTtl\n     * @methodOf ng.$rootScopeProvider\n     * @description\n     *\n     * Sets the number of digest iterations the scope should attempt to execute before giving up and\n     * assuming that the model is unstable.\n     *\n     * The current default is 10 iterations.\n     *\n     * @param {number} limit The number of digest iterations.\n     */\n\n\n    /**\n     * @ngdoc object\n     * @name ng.$rootScope\n     * @description\n     *\n     * Every application has a single root {@link ng.$rootScope.Scope scope}.\n     * All other scopes are child scopes of the root scope. Scopes provide mechanism for watching the model and provide\n     * event processing life-cycle. See {@link guide/scope developer guide on scopes}.\n     */\n    function $RootScopeProvider(){\n        var TTL = 10;\n\n        this.digestTtl = function(value) {\n            if (arguments.length) {\n                TTL = value;\n            }\n            return TTL;\n        };\n\n        this.$get = ['$injector', '$exceptionHandler', '$parse',\n            function( $injector,   $exceptionHandler,   $parse) {\n\n                /**\n                 * @ngdoc function\n                 * @name ng.$rootScope.Scope\n                 *\n                 * @description\n                 * A root scope can be retrieved using the {@link ng.$rootScope $rootScope} key from the\n                 * {@link AUTO.$injector $injector}. Child scopes are created using the\n                 * {@link ng.$rootScope.Scope#$new $new()} method. (Most scopes are created automatically when\n                 * compiled HTML template is executed.)\n                 *\n                 * Here is a simple scope snippet to show how you can interact with the scope.\n                 * <pre>\n                 angular.injector(['ng']).invoke(function($rootScope) {\n           var scope = $rootScope.$new();\n           scope.salutation = 'Hello';\n           scope.name = 'World';\n\n           expect(scope.greeting).toEqual(undefined);\n\n           scope.$watch('name', function() {\n             scope.greeting = scope.salutation + ' ' + scope.name + '!';\n           }); // initialize the watch\n\n           expect(scope.greeting).toEqual(undefined);\n           scope.name = 'Misko';\n           // still old value, since watches have not been called yet\n           expect(scope.greeting).toEqual(undefined);\n\n           scope.$digest(); // fire all  the watches\n           expect(scope.greeting).toEqual('Hello Misko!');\n        });\n                 * </pre>\n                 *\n                 * # Inheritance\n                 * A scope can inherit from a parent scope, as in this example:\n                 * <pre>\n                 var parent = $rootScope;\n                 var child = parent.$new();\n\n                 parent.salutation = \"Hello\";\n                 child.name = \"World\";\n                 expect(child.salutation).toEqual('Hello');\n\n                 child.salutation = \"Welcome\";\n                 expect(child.salutation).toEqual('Welcome');\n                 expect(parent.salutation).toEqual('Hello');\n                 * </pre>\n                 *\n                 *\n                 * @param {Object.<string, function()>=} providers Map of service factory which need to be provided\n                 *     for the current scope. Defaults to {@link ng}.\n                 * @param {Object.<string, *>=} instanceCache Provides pre-instantiated services which should\n                 *     append/override services provided by `providers`. This is handy when unit-testing and having\n                 *     the need to override a default service.\n                 * @returns {Object} Newly created scope.\n                 *\n                 */\n                function Scope() {\n                    this.$id = nextUid();\n                    this.$$phase = this.$parent = this.$$watchers =\n                        this.$$nextSibling = this.$$prevSibling =\n                            this.$$childHead = this.$$childTail = null;\n                    this['this'] = this.$root =  this;\n                    this.$$destroyed = false;\n                    this.$$asyncQueue = [];\n                    this.$$listeners = {};\n                    this.$$isolateBindings = {};\n                }\n\n                /**\n                 * @ngdoc property\n                 * @name ng.$rootScope.Scope#$id\n                 * @propertyOf ng.$rootScope.Scope\n                 * @returns {number} Unique scope ID (monotonically increasing alphanumeric sequence) useful for\n                 *   debugging.\n                 */\n\n\n                Scope.prototype = {\n                    /**\n                     * @ngdoc function\n                     * @name ng.$rootScope.Scope#$new\n                     * @methodOf ng.$rootScope.Scope\n                     * @function\n                     *\n                     * @description\n                     * Creates a new child {@link ng.$rootScope.Scope scope}.\n                     *\n                     * The parent scope will propagate the {@link ng.$rootScope.Scope#$digest $digest()} and\n                     * {@link ng.$rootScope.Scope#$digest $digest()} events. The scope can be removed from the scope\n                     * hierarchy using {@link ng.$rootScope.Scope#$destroy $destroy()}.\n                     *\n                     * {@link ng.$rootScope.Scope#$destroy $destroy()} must be called on a scope when it is desired for\n                     * the scope and its child scopes to be permanently detached from the parent and thus stop\n                     * participating in model change detection and listener notification by invoking.\n                     *\n                     * @param {boolean} isolate if true then the scope does not prototypically inherit from the\n                     *         parent scope. The scope is isolated, as it can not see parent scope properties.\n                     *         When creating widgets it is useful for the widget to not accidentally read parent\n                     *         state.\n                     *\n                     * @returns {Object} The newly created child scope.\n                     *\n                     */\n                    $new: function(isolate) {\n                        var Child,\n                            child;\n\n                        if (isFunction(isolate)) {\n                            // TODO: remove at some point\n                            throw Error('API-CHANGE: Use $controller to instantiate controllers.');\n                        }\n                        if (isolate) {\n                            child = new Scope();\n                            child.$root = this.$root;\n                        } else {\n                            Child = function() {}; // should be anonymous; This is so that when the minifier munges\n                            // the name it does not become random set of chars. These will then show up as class\n                            // name in the debugger.\n                            Child.prototype = this;\n                            child = new Child();\n                            child.$id = nextUid();\n                        }\n                        child['this'] = child;\n                        child.$$listeners = {};\n                        child.$parent = this;\n                        child.$$asyncQueue = [];\n                        child.$$watchers = child.$$nextSibling = child.$$childHead = child.$$childTail = null;\n                        child.$$prevSibling = this.$$childTail;\n                        if (this.$$childHead) {\n                            this.$$childTail.$$nextSibling = child;\n                            this.$$childTail = child;\n                        } else {\n                            this.$$childHead = this.$$childTail = child;\n                        }\n                        return child;\n                    },\n\n                    /**\n                     * @ngdoc function\n                     * @name ng.$rootScope.Scope#$watch\n                     * @methodOf ng.$rootScope.Scope\n                     * @function\n                     *\n                     * @description\n                     * Registers a `listener` callback to be executed whenever the `watchExpression` changes.\n                     *\n                     * - The `watchExpression` is called on every call to {@link ng.$rootScope.Scope#$digest $digest()} and\n                     *   should return the value which will be watched. (Since {@link ng.$rootScope.Scope#$digest $digest()}\n                     *   reruns when it detects changes the `watchExpression` can execute multiple times per\n                     *   {@link ng.$rootScope.Scope#$digest $digest()} and should be idempotent.)\n                     * - The `listener` is called only when the value from the current `watchExpression` and the\n                     *   previous call to `watchExpression` are not equal (with the exception of the initial run,\n                     *   see below). The inequality is determined according to\n                     *   {@link angular.equals} function. To save the value of the object for later comparison, the\n                     *   {@link angular.copy} function is used. It also means that watching complex options will\n                     *   have adverse memory and performance implications.\n                     * - The watch `listener` may change the model, which may trigger other `listener`s to fire. This\n                     *   is achieved by rerunning the watchers until no changes are detected. The rerun iteration\n                     *   limit is 10 to prevent an infinite loop deadlock.\n                     *\n                     *\n                     * If you want to be notified whenever {@link ng.$rootScope.Scope#$digest $digest} is called,\n                     * you can register a `watchExpression` function with no `listener`. (Since `watchExpression`\n                     * can execute multiple times per {@link ng.$rootScope.Scope#$digest $digest} cycle when a change is\n                     * detected, be prepared for multiple calls to your listener.)\n                     *\n                     * After a watcher is registered with the scope, the `listener` fn is called asynchronously\n                     * (via {@link ng.$rootScope.Scope#$evalAsync $evalAsync}) to initialize the\n                     * watcher. In rare cases, this is undesirable because the listener is called when the result\n                     * of `watchExpression` didn't change. To detect this scenario within the `listener` fn, you\n                     * can compare the `newVal` and `oldVal`. If these two values are identical (`===`) then the\n                     * listener was called due to initialization.\n                     *\n                     *\n                     * # Example\n                     * <pre>\n                     // let's assume that scope was dependency injected as the $rootScope\n                     var scope = $rootScope;\n                     scope.name = 'misko';\n                     scope.counter = 0;\n\n                     expect(scope.counter).toEqual(0);\n                     scope.$watch('name', function(newValue, oldValue) { scope.counter = scope.counter + 1; });\n                     expect(scope.counter).toEqual(0);\n\n                     scope.$digest();\n                     // no variable change\n                     expect(scope.counter).toEqual(0);\n\n                     scope.name = 'adam';\n                     scope.$digest();\n                     expect(scope.counter).toEqual(1);\n                     * </pre>\n                     *\n                     *\n                     *\n                     * @param {(function()|string)} watchExpression Expression that is evaluated on each\n                     *    {@link ng.$rootScope.Scope#$digest $digest} cycle. A change in the return value triggers a\n                     *    call to the `listener`.\n                     *\n                     *    - `string`: Evaluated as {@link guide/expression expression}\n                     *    - `function(scope)`: called with current `scope` as a parameter.\n                     * @param {(function()|string)=} listener Callback called whenever the return value of\n                     *   the `watchExpression` changes.\n                     *\n                     *    - `string`: Evaluated as {@link guide/expression expression}\n                     *    - `function(newValue, oldValue, scope)`: called with current and previous values as parameters.\n                     *\n                     * @param {boolean=} objectEquality Compare object for equality rather than for reference.\n                     * @returns {function()} Returns a deregistration function for this listener.\n                     */\n                    $watch: function(watchExp, listener, objectEquality) {\n                        var scope = this,\n                            get = compileToFn(watchExp, 'watch'),\n                            array = scope.$$watchers,\n                            watcher = {\n                                fn: listener,\n                                last: initWatchVal,\n                                get: get,\n                                exp: watchExp,\n                                eq: !!objectEquality\n                            };\n\n                        // in the case user pass string, we need to compile it, do we really need this ?\n                        if (!isFunction(listener)) {\n                            var listenFn = compileToFn(listener || noop, 'listener');\n                            watcher.fn = function(newVal, oldVal, scope) {listenFn(scope);};\n                        }\n\n                        if (!array) {\n                            array = scope.$$watchers = [];\n                        }\n                        // we use unshift since we use a while loop in $digest for speed.\n                        // the while loop reads in reverse order.\n                        array.unshift(watcher);\n\n                        return function() {\n                            arrayRemove(array, watcher);\n                        };\n                    },\n\n                    /**\n                     * @ngdoc function\n                     * @name ng.$rootScope.Scope#$digest\n                     * @methodOf ng.$rootScope.Scope\n                     * @function\n                     *\n                     * @description\n                     * Processes all of the {@link ng.$rootScope.Scope#$watch watchers} of the current scope and its children.\n                     * Because a {@link ng.$rootScope.Scope#$watch watcher}'s listener can change the model, the\n                     * `$digest()` keeps calling the {@link ng.$rootScope.Scope#$watch watchers} until no more listeners are\n                     * firing. This means that it is possible to get into an infinite loop. This function will throw\n                     * `'Maximum iteration limit exceeded.'` if the number of iterations exceeds 10.\n                     *\n                     * Usually you don't call `$digest()` directly in\n                     * {@link ng.directive:ngController controllers} or in\n                     * {@link ng.$compileProvider#directive directives}.\n                     * Instead a call to {@link ng.$rootScope.Scope#$apply $apply()} (typically from within a\n                     * {@link ng.$compileProvider#directive directives}) will force a `$digest()`.\n                     *\n                     * If you want to be notified whenever `$digest()` is called,\n                     * you can register a `watchExpression` function  with {@link ng.$rootScope.Scope#$watch $watch()}\n                     * with no `listener`.\n                     *\n                     * You may have a need to call `$digest()` from within unit-tests, to simulate the scope\n                     * life-cycle.\n                     *\n                     * # Example\n                     * <pre>\n                     var scope = ...;\n                     scope.name = 'misko';\n                     scope.counter = 0;\n\n                     expect(scope.counter).toEqual(0);\n                     scope.$watch('name', function(newValue, oldValue) {\n             scope.counter = scope.counter + 1;\n           });\n                     expect(scope.counter).toEqual(0);\n\n                     scope.$digest();\n                     // no variable change\n                     expect(scope.counter).toEqual(0);\n\n                     scope.name = 'adam';\n                     scope.$digest();\n                     expect(scope.counter).toEqual(1);\n                     * </pre>\n                     *\n                     */\n                    $digest: function() {\n                        var watch, value, last,\n                            watchers,\n                            asyncQueue,\n                            length,\n                            dirty, ttl = TTL,\n                            next, current, target = this,\n                            watchLog = [],\n                            logIdx, logMsg;\n\n                        beginPhase('$digest');\n\n                        do {\n                            dirty = false;\n                            current = target;\n                            do {\n                                asyncQueue = current.$$asyncQueue;\n                                while(asyncQueue.length) {\n                                    try {\n                                        current.$eval(asyncQueue.shift());\n                                    } catch (e) {\n                                        $exceptionHandler(e);\n                                    }\n                                }\n                                if ((watchers = current.$$watchers)) {\n                                    // process our watches\n                                    length = watchers.length;\n                                    while (length--) {\n                                        try {\n                                            watch = watchers[length];\n                                            // Most common watches are on primitives, in which case we can short\n                                            // circuit it with === operator, only when === fails do we use .equals\n                                            if ((value = watch.get(current)) !== (last = watch.last) &&\n                                                !(watch.eq\n                                                    ? equals(value, last)\n                                                    : (typeof value == 'number' && typeof last == 'number'\n                                                    && isNaN(value) && isNaN(last)))) {\n                                                dirty = true;\n                                                watch.last = watch.eq ? copy(value) : value;\n                                                watch.fn(value, ((last === initWatchVal) ? value : last), current);\n                                                if (ttl < 5) {\n                                                    logIdx = 4 - ttl;\n                                                    if (!watchLog[logIdx]) watchLog[logIdx] = [];\n                                                    logMsg = (isFunction(watch.exp))\n                                                        ? 'fn: ' + (watch.exp.name || watch.exp.toString())\n                                                        : watch.exp;\n                                                    logMsg += '; newVal: ' + toJson(value) + '; oldVal: ' + toJson(last);\n                                                    watchLog[logIdx].push(logMsg);\n                                                }\n                                            }\n                                        } catch (e) {\n                                            $exceptionHandler(e);\n                                        }\n                                    }\n                                }\n\n                                // Insanity Warning: scope depth-first traversal\n                                // yes, this code is a bit crazy, but it works and we have tests to prove it!\n                                // this piece should be kept in sync with the traversal in $broadcast\n                                if (!(next = (current.$$childHead || (current !== target && current.$$nextSibling)))) {\n                                    while(current !== target && !(next = current.$$nextSibling)) {\n                                        current = current.$parent;\n                                    }\n                                }\n                            } while ((current = next));\n\n                            if(dirty && !(ttl--)) {\n                                clearPhase();\n                                throw Error(TTL + ' $digest() iterations reached. Aborting!\\n' +\n                                    'Watchers fired in the last 5 iterations: ' + toJson(watchLog));\n                            }\n                        } while (dirty || asyncQueue.length);\n\n                        clearPhase();\n                    },\n\n\n                    /**\n                     * @ngdoc event\n                     * @name ng.$rootScope.Scope#$destroy\n                     * @eventOf ng.$rootScope.Scope\n                     * @eventType broadcast on scope being destroyed\n                     *\n                     * @description\n                     * Broadcasted when a scope and its children are being destroyed.\n                     */\n\n                    /**\n                     * @ngdoc function\n                     * @name ng.$rootScope.Scope#$destroy\n                     * @methodOf ng.$rootScope.Scope\n                     * @function\n                     *\n                     * @description\n                     * Removes the current scope (and all of its children) from the parent scope. Removal implies\n                     * that calls to {@link ng.$rootScope.Scope#$digest $digest()} will no longer\n                     * propagate to the current scope and its children. Removal also implies that the current\n                     * scope is eligible for garbage collection.\n                     *\n                     * The `$destroy()` is usually used by directives such as\n                     * {@link ng.directive:ngRepeat ngRepeat} for managing the\n                     * unrolling of the loop.\n                     *\n                     * Just before a scope is destroyed a `$destroy` event is broadcasted on this scope.\n                     * Application code can register a `$destroy` event handler that will give it chance to\n                     * perform any necessary cleanup.\n                     */\n                    $destroy: function() {\n                        // we can't destroy the root scope or a scope that has been already destroyed\n                        if ($rootScope == this || this.$$destroyed) return;\n                        var parent = this.$parent;\n\n                        this.$broadcast('$destroy');\n                        this.$$destroyed = true;\n\n                        if (parent.$$childHead == this) parent.$$childHead = this.$$nextSibling;\n                        if (parent.$$childTail == this) parent.$$childTail = this.$$prevSibling;\n                        if (this.$$prevSibling) this.$$prevSibling.$$nextSibling = this.$$nextSibling;\n                        if (this.$$nextSibling) this.$$nextSibling.$$prevSibling = this.$$prevSibling;\n\n                        // This is bogus code that works around Chrome's GC leak\n                        // see: https://github.com/angular/angular.js/issues/1313#issuecomment-10378451\n                        this.$parent = this.$$nextSibling = this.$$prevSibling = this.$$childHead =\n                            this.$$childTail = null;\n                    },\n\n                    /**\n                     * @ngdoc function\n                     * @name ng.$rootScope.Scope#$eval\n                     * @methodOf ng.$rootScope.Scope\n                     * @function\n                     *\n                     * @description\n                     * Executes the `expression` on the current scope returning the result. Any exceptions in the\n                     * expression are propagated (uncaught). This is useful when evaluating Angular expressions.\n                     *\n                     * # Example\n                     * <pre>\n                     var scope = ng.$rootScope.Scope();\n                     scope.a = 1;\n                     scope.b = 2;\n\n                     expect(scope.$eval('a+b')).toEqual(3);\n                     expect(scope.$eval(function(scope){ return scope.a + scope.b; })).toEqual(3);\n                     * </pre>\n                     *\n                     * @param {(string|function())=} expression An angular expression to be executed.\n                     *\n                     *    - `string`: execute using the rules as defined in  {@link guide/expression expression}.\n                     *    - `function(scope)`: execute the function with the current `scope` parameter.\n                     *\n                     * @returns {*} The result of evaluating the expression.\n                     */\n                    $eval: function(expr, locals) {\n                        return $parse(expr)(this, locals);\n                    },\n\n                    /**\n                     * @ngdoc function\n                     * @name ng.$rootScope.Scope#$evalAsync\n                     * @methodOf ng.$rootScope.Scope\n                     * @function\n                     *\n                     * @description\n                     * Executes the expression on the current scope at a later point in time.\n                     *\n                     * The `$evalAsync` makes no guarantees as to when the `expression` will be executed, only that:\n                     *\n                     *   - it will execute in the current script execution context (before any DOM rendering).\n                     *   - at least one {@link ng.$rootScope.Scope#$digest $digest cycle} will be performed after\n                     *     `expression` execution.\n                     *\n                     * Any exceptions from the execution of the expression are forwarded to the\n                     * {@link ng.$exceptionHandler $exceptionHandler} service.\n                     *\n                     * @param {(string|function())=} expression An angular expression to be executed.\n                     *\n                     *    - `string`: execute using the rules as defined in  {@link guide/expression expression}.\n                     *    - `function(scope)`: execute the function with the current `scope` parameter.\n                     *\n                     */\n                    $evalAsync: function(expr) {\n                        this.$$asyncQueue.push(expr);\n                    },\n\n                    /**\n                     * @ngdoc function\n                     * @name ng.$rootScope.Scope#$apply\n                     * @methodOf ng.$rootScope.Scope\n                     * @function\n                     *\n                     * @description\n                     * `$apply()` is used to execute an expression in angular from outside of the angular framework.\n                     * (For example from browser DOM events, setTimeout, XHR or third party libraries).\n                     * Because we are calling into the angular framework we need to perform proper scope life-cycle\n                     * of {@link ng.$exceptionHandler exception handling},\n                     * {@link ng.$rootScope.Scope#$digest executing watches}.\n                     *\n                     * ## Life cycle\n                     *\n                     * # Pseudo-Code of `$apply()`\n                     * <pre>\n                     function $apply(expr) {\n             try {\n               return $eval(expr);\n             } catch (e) {\n               $exceptionHandler(e);\n             } finally {\n               $root.$digest();\n             }\n           }\n                     * </pre>\n                     *\n                     *\n                     * Scope's `$apply()` method transitions through the following stages:\n                     *\n                     * 1. The {@link guide/expression expression} is executed using the\n                     *    {@link ng.$rootScope.Scope#$eval $eval()} method.\n                     * 2. Any exceptions from the execution of the expression are forwarded to the\n                     *    {@link ng.$exceptionHandler $exceptionHandler} service.\n                     * 3. The {@link ng.$rootScope.Scope#$watch watch} listeners are fired immediately after the expression\n                     *    was executed using the {@link ng.$rootScope.Scope#$digest $digest()} method.\n                     *\n                     *\n                     * @param {(string|function())=} exp An angular expression to be executed.\n                     *\n                     *    - `string`: execute using the rules as defined in {@link guide/expression expression}.\n                     *    - `function(scope)`: execute the function with current `scope` parameter.\n                     *\n                     * @returns {*} The result of evaluating the expression.\n                     */\n                    $apply: function(expr) {\n                        try {\n                            beginPhase('$apply');\n                            return this.$eval(expr);\n                        } catch (e) {\n                            $exceptionHandler(e);\n                        } finally {\n                            clearPhase();\n                            try {\n                                $rootScope.$digest();\n                            } catch (e) {\n                                $exceptionHandler(e);\n                                throw e;\n                            }\n                        }\n                    },\n\n                    /**\n                     * @ngdoc function\n                     * @name ng.$rootScope.Scope#$on\n                     * @methodOf ng.$rootScope.Scope\n                     * @function\n                     *\n                     * @description\n                     * Listens on events of a given type. See {@link ng.$rootScope.Scope#$emit $emit} for discussion of\n                     * event life cycle.\n                     *\n                     * The event listener function format is: `function(event, args...)`. The `event` object\n                     * passed into the listener has the following attributes:\n                     *\n                     *   - `targetScope` - `{Scope}`: the scope on which the event was `$emit`-ed or `$broadcast`-ed.\n                     *   - `currentScope` - `{Scope}`: the current scope which is handling the event.\n                     *   - `name` - `{string}`: Name of the event.\n                     *   - `stopPropagation` - `{function=}`: calling `stopPropagation` function will cancel further event\n                     *     propagation (available only for events that were `$emit`-ed).\n                     *   - `preventDefault` - `{function}`: calling `preventDefault` sets `defaultPrevented` flag to true.\n                     *   - `defaultPrevented` - `{boolean}`: true if `preventDefault` was called.\n                     *\n                     * @param {string} name Event name to listen on.\n                     * @param {function(event, args...)} listener Function to call when the event is emitted.\n                     * @returns {function()} Returns a deregistration function for this listener.\n                     */\n                    $on: function(name, listener) {\n                        var namedListeners = this.$$listeners[name];\n                        if (!namedListeners) {\n                            this.$$listeners[name] = namedListeners = [];\n                        }\n                        namedListeners.push(listener);\n\n                        return function() {\n                            namedListeners[indexOf(namedListeners, listener)] = null;\n                        };\n                    },\n\n\n                    /**\n                     * @ngdoc function\n                     * @name ng.$rootScope.Scope#$emit\n                     * @methodOf ng.$rootScope.Scope\n                     * @function\n                     *\n                     * @description\n                     * Dispatches an event `name` upwards through the scope hierarchy notifying the\n                     * registered {@link ng.$rootScope.Scope#$on} listeners.\n                     *\n                     * The event life cycle starts at the scope on which `$emit` was called. All\n                     * {@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get notified.\n                     * Afterwards, the event traverses upwards toward the root scope and calls all registered\n                     * listeners along the way. The event will stop propagating if one of the listeners cancels it.\n                     *\n                     * Any exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed\n                     * onto the {@link ng.$exceptionHandler $exceptionHandler} service.\n                     *\n                     * @param {string} name Event name to emit.\n                     * @param {...*} args Optional set of arguments which will be passed onto the event listeners.\n                     * @return {Object} Event object, see {@link ng.$rootScope.Scope#$on}\n                     */\n                    $emit: function(name, args) {\n                        var empty = [],\n                            namedListeners,\n                            scope = this,\n                            stopPropagation = false,\n                            event = {\n                                name: name,\n                                targetScope: scope,\n                                stopPropagation: function() {stopPropagation = true;},\n                                preventDefault: function() {\n                                    event.defaultPrevented = true;\n                                },\n                                defaultPrevented: false\n                            },\n                            listenerArgs = concat([event], arguments, 1),\n                            i, length;\n\n                        do {\n                            namedListeners = scope.$$listeners[name] || empty;\n                            event.currentScope = scope;\n                            for (i=0, length=namedListeners.length; i<length; i++) {\n\n                                // if listeners were deregistered, defragment the array\n                                if (!namedListeners[i]) {\n                                    namedListeners.splice(i, 1);\n                                    i--;\n                                    length--;\n                                    continue;\n                                }\n                                try {\n                                    namedListeners[i].apply(null, listenerArgs);\n                                    if (stopPropagation) return event;\n                                } catch (e) {\n                                    $exceptionHandler(e);\n                                }\n                            }\n                            //traverse upwards\n                            scope = scope.$parent;\n                        } while (scope);\n\n                        return event;\n                    },\n\n\n                    /**\n                     * @ngdoc function\n                     * @name ng.$rootScope.Scope#$broadcast\n                     * @methodOf ng.$rootScope.Scope\n                     * @function\n                     *\n                     * @description\n                     * Dispatches an event `name` downwards to all child scopes (and their children) notifying the\n                     * registered {@link ng.$rootScope.Scope#$on} listeners.\n                     *\n                     * The event life cycle starts at the scope on which `$broadcast` was called. All\n                     * {@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get notified.\n                     * Afterwards, the event propagates to all direct and indirect scopes of the current scope and\n                     * calls all registered listeners along the way. The event cannot be canceled.\n                     *\n                     * Any exception emmited from the {@link ng.$rootScope.Scope#$on listeners} will be passed\n                     * onto the {@link ng.$exceptionHandler $exceptionHandler} service.\n                     *\n                     * @param {string} name Event name to broadcast.\n                     * @param {...*} args Optional set of arguments which will be passed onto the event listeners.\n                     * @return {Object} Event object, see {@link ng.$rootScope.Scope#$on}\n                     */\n                    $broadcast: function(name, args) {\n                        var target = this,\n                            current = target,\n                            next = target,\n                            event = {\n                                name: name,\n                                targetScope: target,\n                                preventDefault: function() {\n                                    event.defaultPrevented = true;\n                                },\n                                defaultPrevented: false\n                            },\n                            listenerArgs = concat([event], arguments, 1),\n                            listeners, i, length;\n\n                        //down while you can, then up and next sibling or up and next sibling until back at root\n                        do {\n                            current = next;\n                            event.currentScope = current;\n                            listeners = current.$$listeners[name] || [];\n                            for (i=0, length = listeners.length; i<length; i++) {\n                                // if listeners were deregistered, defragment the array\n                                if (!listeners[i]) {\n                                    listeners.splice(i, 1);\n                                    i--;\n                                    length--;\n                                    continue;\n                                }\n\n                                try {\n                                    listeners[i].apply(null, listenerArgs);\n                                } catch(e) {\n                                    $exceptionHandler(e);\n                                }\n                            }\n\n                            // Insanity Warning: scope depth-first traversal\n                            // yes, this code is a bit crazy, but it works and we have tests to prove it!\n                            // this piece should be kept in sync with the traversal in $digest\n                            if (!(next = (current.$$childHead || (current !== target && current.$$nextSibling)))) {\n                                while(current !== target && !(next = current.$$nextSibling)) {\n                                    current = current.$parent;\n                                }\n                            }\n                        } while ((current = next));\n\n                        return event;\n                    }\n                };\n\n                var $rootScope = new Scope();\n\n                return $rootScope;\n\n\n                function beginPhase(phase) {\n                    if ($rootScope.$$phase) {\n                        throw Error($rootScope.$$phase + ' already in progress');\n                    }\n\n                    $rootScope.$$phase = phase;\n                }\n\n                function clearPhase() {\n                    $rootScope.$$phase = null;\n                }\n\n                function compileToFn(exp, name) {\n                    var fn = $parse(exp);\n                    assertArgFn(fn, name);\n                    return fn;\n                }\n\n                /**\n                 * function used as an initial value for watchers.\n                 * because it's unique we can easily tell it apart from other values\n                 */\n                function initWatchVal() {}\n            }];\n    }\n\n    /**\n     * !!! This is an undocumented \"private\" service !!!\n     *\n     * @name ng.$sniffer\n     * @requires $window\n     *\n     * @property {boolean} history Does the browser support html5 history api ?\n     * @property {boolean} hashchange Does the browser support hashchange event ?\n     *\n     * @description\n     * This is very simple implementation of testing browser's features.\n     */\n    function $SnifferProvider() {\n        this.$get = ['$window', function($window) {\n            var eventSupport = {},\n                android = int((/android (\\d+)/.exec(lowercase($window.navigator.userAgent)) || [])[1]);\n\n            return {\n                // Android has history.pushState, but it does not update location correctly\n                // so let's not use the history API at all.\n                // http://code.google.com/p/android/issues/detail?id=17471\n                // https://github.com/angular/angular.js/issues/904\n                history: !!($window.history && $window.history.pushState && !(android < 4)),\n                hashchange: 'onhashchange' in $window &&\n                    // IE8 compatible mode lies\n                    (!$window.document.documentMode || $window.document.documentMode > 7),\n                hasEvent: function(event) {\n                    // IE9 implements 'input' event it's so fubared that we rather pretend that it doesn't have\n                    // it. In particular the event is not fired when backspace or delete key are pressed or\n                    // when cut operation is performed.\n                    if (event == 'input' && msie == 9) return false;\n\n                    if (isUndefined(eventSupport[event])) {\n                        var divElm = $window.document.createElement('div');\n                        eventSupport[event] = 'on' + event in divElm;\n                    }\n\n                    return eventSupport[event];\n                },\n                // TODO(i): currently there is no way to feature detect CSP without triggering alerts\n                csp: false\n            };\n        }];\n    }\n\n    /**\n     * @ngdoc object\n     * @name ng.$window\n     *\n     * @description\n     * A reference to the browser's `window` object. While `window`\n     * is globally available in JavaScript, it causes testability problems, because\n     * it is a global variable. In angular we always refer to it through the\n     * `$window` service, so it may be overriden, removed or mocked for testing.\n     *\n     * All expressions are evaluated with respect to current scope so they don't\n     * suffer from window globality.\n     *\n     * @example\n     <doc:example>\n     <doc:source>\n     <script>\n     function Ctrl($scope, $window) {\n           $scope.$window = $window;\n           $scope.greeting = 'Hello, World!';\n         }\n     </script>\n     <div ng-controller=\"Ctrl\">\n     <input type=\"text\" ng-model=\"greeting\" />\n     <button ng-click=\"$window.alert(greeting)\">ALERT</button>\n     </div>\n     </doc:source>\n     <doc:scenario>\n     it('should display the greeting in the input box', function() {\n       input('greeting').enter('Hello, E2E Tests');\n       // If we click the button it will block the test runner\n       // element(':button').click();\n      });\n     </doc:scenario>\n     </doc:example>\n     */\n    function $WindowProvider(){\n        this.$get = valueFn(window);\n    }\n\n    /**\n     * Parse headers into key value object\n     *\n     * @param {string} headers Raw headers as a string\n     * @returns {Object} Parsed headers as key value object\n     */\n    function parseHeaders(headers) {\n        var parsed = {}, key, val, i;\n\n        if (!headers) return parsed;\n\n        forEach(headers.split('\\n'), function(line) {\n            i = line.indexOf(':');\n            key = lowercase(trim(line.substr(0, i)));\n            val = trim(line.substr(i + 1));\n\n            if (key) {\n                if (parsed[key]) {\n                    parsed[key] += ', ' + val;\n                } else {\n                    parsed[key] = val;\n                }\n            }\n        });\n\n        return parsed;\n    }\n\n\n    /**\n     * Returns a function that provides access to parsed headers.\n     *\n     * Headers are lazy parsed when first requested.\n     * @see parseHeaders\n     *\n     * @param {(string|Object)} headers Headers to provide access to.\n     * @returns {function(string=)} Returns a getter function which if called with:\n     *\n     *   - if called with single an argument returns a single header value or null\n     *   - if called with no arguments returns an object containing all headers.\n     */\n    function headersGetter(headers) {\n        var headersObj = isObject(headers) ? headers : undefined;\n\n        return function(name) {\n            if (!headersObj) headersObj =  parseHeaders(headers);\n\n            if (name) {\n                return headersObj[lowercase(name)] || null;\n            }\n\n            return headersObj;\n        };\n    }\n\n\n    /**\n     * Chain all given functions\n     *\n     * This function is used for both request and response transforming\n     *\n     * @param {*} data Data to transform.\n     * @param {function(string=)} headers Http headers getter fn.\n     * @param {(function|Array.<function>)} fns Function or an array of functions.\n     * @returns {*} Transformed data.\n     */\n    function transformData(data, headers, fns) {\n        if (isFunction(fns))\n            return fns(data, headers);\n\n        forEach(fns, function(fn) {\n            data = fn(data, headers);\n        });\n\n        return data;\n    }\n\n\n    function isSuccess(status) {\n        return 200 <= status && status < 300;\n    }\n\n\n    function $HttpProvider() {\n        var JSON_START = /^\\s*(\\[|\\{[^\\{])/,\n            JSON_END = /[\\}\\]]\\s*$/,\n            PROTECTION_PREFIX = /^\\)\\]\\}',?\\n/;\n\n        var $config = this.defaults = {\n            // transform incoming response data\n            transformResponse: [function(data) {\n                if (isString(data)) {\n                    // strip json vulnerability protection prefix\n                    data = data.replace(PROTECTION_PREFIX, '');\n                    if (JSON_START.test(data) && JSON_END.test(data))\n                        data = fromJson(data, true);\n                }\n                return data;\n            }],\n\n            // transform outgoing request data\n            transformRequest: [function(d) {\n                return isObject(d) && !isFile(d) ? toJson(d) : d;\n            }],\n\n            // default headers\n            headers: {\n                common: {\n                    'Accept': 'application/json, text/plain, */*',\n                    'X-Requested-With': 'XMLHttpRequest'\n                },\n                post: {'Content-Type': 'application/json;charset=utf-8'},\n                put:  {'Content-Type': 'application/json;charset=utf-8'}\n            }\n        };\n\n        var providerResponseInterceptors = this.responseInterceptors = [];\n\n        this.$get = ['$httpBackend', '$browser', '$cacheFactory', '$rootScope', '$q', '$injector',\n            function($httpBackend, $browser, $cacheFactory, $rootScope, $q, $injector) {\n\n                var defaultCache = $cacheFactory('$http'),\n                    responseInterceptors = [];\n\n                forEach(providerResponseInterceptors, function(interceptor) {\n                    responseInterceptors.push(\n                        isString(interceptor)\n                            ? $injector.get(interceptor)\n                            : $injector.invoke(interceptor)\n                    );\n                });\n\n\n                /**\n                 * @ngdoc function\n                 * @name ng.$http\n                 * @requires $httpBackend\n                 * @requires $browser\n                 * @requires $cacheFactory\n                 * @requires $rootScope\n                 * @requires $q\n                 * @requires $injector\n                 *\n                 * @description\n                 * The `$http` service is a core Angular service that facilitates communication with the remote\n                 * HTTP servers via the browser's {@link https://developer.mozilla.org/en/xmlhttprequest\n                 * XMLHttpRequest} object or via {@link http://en.wikipedia.org/wiki/JSONP JSONP}.\n                 *\n                 * For unit testing applications that use `$http` service, see\n                 * {@link ngMock.$httpBackend $httpBackend mock}.\n                 *\n                 * For a higher level of abstraction, please check out the {@link ngResource.$resource\n                 * $resource} service.\n                 *\n                 * The $http API is based on the {@link ng.$q deferred/promise APIs} exposed by\n                 * the $q service. While for simple usage patterns this doesn't matter much, for advanced usage\n                 * it is important to familiarize yourself with these APIs and the guarantees they provide.\n                 *\n                 *\n                 * # General usage\n                 * The `$http` service is a function which takes a single argument \u2014 a configuration object \u2014\n                 * that is used to generate an HTTP request and returns  a {@link ng.$q promise}\n                 * with two $http specific methods: `success` and `error`.\n                 *\n                 * <pre>\n                 *   $http({method: 'GET', url: '/someUrl'}).\n                 *     success(function(data, status, headers, config) {\n     *       // this callback will be called asynchronously\n     *       // when the response is available\n     *     }).\n                 *     error(function(data, status, headers, config) {\n     *       // called asynchronously if an error occurs\n     *       // or server returns response with an error status.\n     *     });\n                 * </pre>\n                 *\n                 * Since the returned value of calling the $http function is a `promise`, you can also use\n                 * the `then` method to register callbacks, and these callbacks will receive a single argument \u2013\n                 * an object representing the response. See the API signature and type info below for more\n                 * details.\n                 *\n                 * A response status code between 200 and 299 is considered a success status and\n                 * will result in the success callback being called. Note that if the response is a redirect,\n                 * XMLHttpRequest will transparently follow it, meaning that the error callback will not be\n                 * called for such responses.\n                 *\n                 * # Shortcut methods\n                 *\n                 * Since all invocations of the $http service require passing in an HTTP method and URL, and\n                 * POST/PUT requests require request data to be provided as well, shortcut methods\n                 * were created:\n                 *\n                 * <pre>\n                 *   $http.get('/someUrl').success(successCallback);\n                 *   $http.post('/someUrl', data).success(successCallback);\n                 * </pre>\n                 *\n                 * Complete list of shortcut methods:\n                 *\n                 * - {@link ng.$http#get $http.get}\n                 * - {@link ng.$http#head $http.head}\n                 * - {@link ng.$http#post $http.post}\n                 * - {@link ng.$http#put $http.put}\n                 * - {@link ng.$http#delete $http.delete}\n                 * - {@link ng.$http#jsonp $http.jsonp}\n                 *\n                 *\n                 * # Setting HTTP Headers\n                 *\n                 * The $http service will automatically add certain HTTP headers to all requests. These defaults\n                 * can be fully configured by accessing the `$httpProvider.defaults.headers` configuration\n                 * object, which currently contains this default configuration:\n                 *\n                 * - `$httpProvider.defaults.headers.common` (headers that are common for all requests):\n                 *   - `Accept: application/json, text/plain, * / *`\n                 *   - `X-Requested-With: XMLHttpRequest`\n                 * - `$httpProvider.defaults.headers.post`: (header defaults for POST requests)\n                 *   - `Content-Type: application/json`\n                 * - `$httpProvider.defaults.headers.put` (header defaults for PUT requests)\n                 *   - `Content-Type: application/json`\n                 *\n                 * To add or overwrite these defaults, simply add or remove a property from these configuration\n                 * objects. To add headers for an HTTP method other than POST or PUT, simply add a new object\n                 * with the lowercased HTTP method name as the key, e.g.\n                 * `$httpProvider.defaults.headers.get['My-Header']='value'`.\n                 *\n                 * Additionally, the defaults can be set at runtime via the `$http.defaults` object in the same\n                 * fashion.\n                 *\n                 *\n                 * # Transforming Requests and Responses\n                 *\n                 * Both requests and responses can be transformed using transform functions. By default, Angular\n                 * applies these transformations:\n                 *\n                 * Request transformations:\n                 *\n                 * - If the `data` property of the request configuration object contains an object, serialize it into\n                 *   JSON format.\n                 *\n                 * Response transformations:\n                 *\n                 *  - If XSRF prefix is detected, strip it (see Security Considerations section below).\n                 *  - If JSON response is detected, deserialize it using a JSON parser.\n                 *\n                 * To globally augment or override the default transforms, modify the `$httpProvider.defaults.transformRequest` and\n                 * `$httpProvider.defaults.transformResponse` properties. These properties are by default an\n                 * array of transform functions, which allows you to `push` or `unshift` a new transformation function into the\n                 * transformation chain. You can also decide to completely override any default transformations by assigning your\n                 * transformation functions to these properties directly without the array wrapper.\n                 *\n                 * Similarly, to locally override the request/response transforms, augment the `transformRequest` and/or\n                 * `transformResponse` properties of the configuration object passed into `$http`.\n                 *\n                 *\n                 * # Caching\n                 *\n                 * To enable caching, set the configuration property `cache` to `true`. When the cache is\n                 * enabled, `$http` stores the response from the server in local cache. Next time the\n                 * response is served from the cache without sending a request to the server.\n                 *\n                 * Note that even if the response is served from cache, delivery of the data is asynchronous in\n                 * the same way that real requests are.\n                 *\n                 * If there are multiple GET requests for the same URL that should be cached using the same\n                 * cache, but the cache is not populated yet, only one request to the server will be made and\n                 * the remaining requests will be fulfilled using the response from the first request.\n                 *\n                 *\n                 * # Response interceptors\n                 *\n                 * Before you start creating interceptors, be sure to understand the\n                 * {@link ng.$q $q and deferred/promise APIs}.\n                 *\n                 * For purposes of global error handling, authentication or any kind of synchronous or\n                 * asynchronous preprocessing of received responses, it is desirable to be able to intercept\n                 * responses for http requests before they are handed over to the application code that\n                 * initiated these requests. The response interceptors leverage the {@link ng.$q\n                 * promise apis} to fulfil this need for both synchronous and asynchronous preprocessing.\n                 *\n                 * The interceptors are service factories that are registered with the $httpProvider by\n                 * adding them to the `$httpProvider.responseInterceptors` array. The factory is called and\n                 * injected with dependencies (if specified) and returns the interceptor  \u2014 a function that\n                 * takes a {@link ng.$q promise} and returns the original or a new promise.\n                 *\n                 * <pre>\n                 *   // register the interceptor as a service\n                 *   $provide.factory('myHttpInterceptor', function($q, dependency1, dependency2) {\n     *     return function(promise) {\n     *       return promise.then(function(response) {\n     *         // do something on success\n     *       }, function(response) {\n     *         // do something on error\n     *         if (canRecover(response)) {\n     *           return responseOrNewPromise\n     *         }\n     *         return $q.reject(response);\n     *       });\n     *     }\n     *   });\n                 *\n                 *   $httpProvider.responseInterceptors.push('myHttpInterceptor');\n                 *\n                 *\n                 *   // register the interceptor via an anonymous factory\n                 *   $httpProvider.responseInterceptors.push(function($q, dependency1, dependency2) {\n     *     return function(promise) {\n     *       // same as above\n     *     }\n     *   });\n                 * </pre>\n                 *\n                 *\n                 * # Security Considerations\n                 *\n                 * When designing web applications, consider security threats from:\n                 *\n                 * - {@link http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx\n                 *   JSON vulnerability}\n                 * - {@link http://en.wikipedia.org/wiki/Cross-site_request_forgery XSRF}\n                 *\n                 * Both server and the client must cooperate in order to eliminate these threats. Angular comes\n                 * pre-configured with strategies that address these issues, but for this to work backend server\n                 * cooperation is required.\n                 *\n                 * ## JSON Vulnerability Protection\n                 *\n                 * A {@link http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx\n                 * JSON vulnerability} allows third party website to turn your JSON resource URL into\n                 * {@link http://en.wikipedia.org/wiki/JSONP JSONP} request under some conditions. To\n                 * counter this your server can prefix all JSON requests with following string `\")]}',\\n\"`.\n                 * Angular will automatically strip the prefix before processing it as JSON.\n                 *\n                 * For example if your server needs to return:\n                 * <pre>\n                 * ['one','two']\n                 * </pre>\n                 *\n                 * which is vulnerable to attack, your server can return:\n                 * <pre>\n                 * )]}',\n                 * ['one','two']\n                 * </pre>\n                 *\n                 * Angular will strip the prefix, before processing the JSON.\n                 *\n                 *\n                 * ## Cross Site Request Forgery (XSRF) Protection\n                 *\n                 * {@link http://en.wikipedia.org/wiki/Cross-site_request_forgery XSRF} is a technique by which\n                 * an unauthorized site can gain your user's private data. Angular provides a mechanism\n                 * to counter XSRF. When performing XHR requests, the $http service reads a token from a cookie\n                 * called `XSRF-TOKEN` and sets it as the HTTP header `X-XSRF-TOKEN`. Since only JavaScript that\n                 * runs on your domain could read the cookie, your server can be assured that the XHR came from\n                 * JavaScript running on your domain.\n                 *\n                 * To take advantage of this, your server needs to set a token in a JavaScript readable session\n                 * cookie called `XSRF-TOKEN` on the first HTTP GET request. On subsequent XHR requests the\n                 * server can verify that the cookie matches `X-XSRF-TOKEN` HTTP header, and therefore be sure\n                 * that only JavaScript running on your domain could have sent the request. The token must be\n                 * unique for each user and must be verifiable by the server (to prevent the JavaScript from making\n                 * up its own tokens). We recommend that the token is a digest of your site's authentication\n                 * cookie with a {@link https://en.wikipedia.org/wiki/Salt_(cryptography) salt} for added security.\n                 *\n                 *\n                 * @param {object} config Object describing the request to be made and how it should be\n                 *    processed. The object has following properties:\n                 *\n                 *    - **method** \u2013 `{string}` \u2013 HTTP method (e.g. 'GET', 'POST', etc)\n                 *    - **url** \u2013 `{string}` \u2013 Absolute or relative URL of the resource that is being requested.\n                 *    - **params** \u2013 `{Object.<string|Object>}` \u2013 Map of strings or objects which will be turned to\n                 *      `?key1=value1&key2=value2` after the url. If the value is not a string, it will be JSONified.\n                 *    - **data** \u2013 `{string|Object}` \u2013 Data to be sent as the request message data.\n                 *    - **headers** \u2013 `{Object}` \u2013 Map of strings representing HTTP headers to send to the server.\n                 *    - **transformRequest** \u2013 `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` \u2013\n                 *      transform function or an array of such functions. The transform function takes the http\n                 *      request body and headers and returns its transformed (typically serialized) version.\n                 *    - **transformResponse** \u2013 `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` \u2013\n                 *      transform function or an array of such functions. The transform function takes the http\n                 *      response body and headers and returns its transformed (typically deserialized) version.\n                 *    - **cache** \u2013 `{boolean|Cache}` \u2013 If true, a default $http cache will be used to cache the\n                 *      GET request, otherwise if a cache instance built with\n                 *      {@link ng.$cacheFactory $cacheFactory}, this cache will be used for\n                 *      caching.\n                 *    - **timeout** \u2013 `{number}` \u2013 timeout in milliseconds.\n                 *    - **withCredentials** - `{boolean}` - whether to to set the `withCredentials` flag on the\n                 *      XHR object. See {@link https://developer.mozilla.org/en/http_access_control#section_5\n                 *      requests with credentials} for more information.\n                 *\n                 * @returns {HttpPromise} Returns a {@link ng.$q promise} object with the\n                 *   standard `then` method and two http specific methods: `success` and `error`. The `then`\n                 *   method takes two arguments a success and an error callback which will be called with a\n                 *   response object. The `success` and `error` methods take a single argument - a function that\n                 *   will be called when the request succeeds or fails respectively. The arguments passed into\n                 *   these functions are destructured representation of the response object passed into the\n                 *   `then` method. The response object has these properties:\n                 *\n                 *   - **data** \u2013 `{string|Object}` \u2013 The response body transformed with the transform functions.\n                 *   - **status** \u2013 `{number}` \u2013 HTTP status code of the response.\n                 *   - **headers** \u2013 `{function([headerName])}` \u2013 Header getter function.\n                 *   - **config** \u2013 `{Object}` \u2013 The configuration object that was used to generate the request.\n                 *\n                 * @property {Array.<Object>} pendingRequests Array of config objects for currently pending\n                 *   requests. This is primarily meant to be used for debugging purposes.\n                 *\n                 *\n                 * @example\n                 <example>\n                 <file name=\"index.html\">\n                 <div ng-controller=\"FetchCtrl\">\n                 <select ng-model=\"method\">\n                 <option>GET</option>\n                 <option>JSONP</option>\n                 </select>\n                 <input type=\"text\" ng-model=\"url\" size=\"80\"/>\n                 <button ng-click=\"fetch()\">fetch</button><br>\n                 <button ng-click=\"updateModel('GET', 'http-hello.html')\">Sample GET</button>\n                 <button ng-click=\"updateModel('JSONP', 'http://angularjs.org/greet.php?callback=JSON_CALLBACK&name=Super%20Hero')\">Sample JSONP</button>\n                 <button ng-click=\"updateModel('JSONP', 'http://angularjs.org/doesntexist&callback=JSON_CALLBACK')\">Invalid JSONP</button>\n                 <pre>http status code: {{status}}</pre>\n                 <pre>http response data: {{data}}</pre>\n                 </div>\n                 </file>\n                 <file name=\"script.js\">\n                 function FetchCtrl($scope, $http, $templateCache) {\n            $scope.method = 'GET';\n            $scope.url = 'http-hello.html';\n\n            $scope.fetch = function() {\n              $scope.code = null;\n              $scope.response = null;\n\n              $http({method: $scope.method, url: $scope.url, cache: $templateCache}).\n                success(function(data, status) {\n                  $scope.status = status;\n                  $scope.data = data;\n                }).\n                error(function(data, status) {\n                  $scope.data = data || \"Request failed\";\n                  $scope.status = status;\n              });\n            };\n\n            $scope.updateModel = function(method, url) {\n              $scope.method = method;\n              $scope.url = url;\n            };\n          }\n                 </file>\n                 <file name=\"http-hello.html\">\n                 Hello, $http!\n                 </file>\n                 <file name=\"scenario.js\">\n                 it('should make an xhr GET request', function() {\n            element(':button:contains(\"Sample GET\")').click();\n            element(':button:contains(\"fetch\")').click();\n            expect(binding('status')).toBe('200');\n            expect(binding('data')).toMatch(/Hello, \\$http!/);\n          });\n\n                 it('should make a JSONP request to angularjs.org', function() {\n            element(':button:contains(\"Sample JSONP\")').click();\n            element(':button:contains(\"fetch\")').click();\n            expect(binding('status')).toBe('200');\n            expect(binding('data')).toMatch(/Super Hero!/);\n          });\n\n                 it('should make JSONP request to invalid URL and invoke the error handler',\n                 function() {\n            element(':button:contains(\"Invalid JSONP\")').click();\n            element(':button:contains(\"fetch\")').click();\n            expect(binding('status')).toBe('0');\n            expect(binding('data')).toBe('Request failed');\n          });\n                 </file>\n                 </example>\n                 */\n                function $http(config) {\n                    config.method = uppercase(config.method);\n\n                    var reqTransformFn = config.transformRequest || $config.transformRequest,\n                        respTransformFn = config.transformResponse || $config.transformResponse,\n                        defHeaders = $config.headers,\n                        reqHeaders = extend({'X-XSRF-TOKEN': $browser.cookies()['XSRF-TOKEN']},\n                            defHeaders.common, defHeaders[lowercase(config.method)], config.headers),\n                        reqData = transformData(config.data, headersGetter(reqHeaders), reqTransformFn),\n                        promise;\n\n                    // strip content-type if data is undefined\n                    if (isUndefined(config.data)) {\n                        delete reqHeaders['Content-Type'];\n                    }\n\n                    // send request\n                    promise = sendReq(config, reqData, reqHeaders);\n\n\n                    // transform future response\n                    promise = promise.then(transformResponse, transformResponse);\n\n                    // apply interceptors\n                    forEach(responseInterceptors, function(interceptor) {\n                        promise = interceptor(promise);\n                    });\n\n                    promise.success = function(fn) {\n                        promise.then(function(response) {\n                            fn(response.data, response.status, response.headers, config);\n                        });\n                        return promise;\n                    };\n\n                    promise.error = function(fn) {\n                        promise.then(null, function(response) {\n                            fn(response.data, response.status, response.headers, config);\n                        });\n                        return promise;\n                    };\n\n                    return promise;\n\n                    function transformResponse(response) {\n                        // make a copy since the response must be cacheable\n                        var resp = extend({}, response, {\n                            data: transformData(response.data, response.headers, respTransformFn)\n                        });\n                        return (isSuccess(response.status))\n                            ? resp\n                            : $q.reject(resp);\n                    }\n                }\n\n                $http.pendingRequests = [];\n\n                /**\n                 * @ngdoc method\n                 * @name ng.$http#get\n                 * @methodOf ng.$http\n                 *\n                 * @description\n                 * Shortcut method to perform `GET` request.\n                 *\n                 * @param {string} url Relative or absolute URL specifying the destination of the request\n                 * @param {Object=} config Optional configuration object\n                 * @returns {HttpPromise} Future object\n                 */\n\n                /**\n                 * @ngdoc method\n                 * @name ng.$http#delete\n                 * @methodOf ng.$http\n                 *\n                 * @description\n                 * Shortcut method to perform `DELETE` request.\n                 *\n                 * @param {string} url Relative or absolute URL specifying the destination of the request\n                 * @param {Object=} config Optional configuration object\n                 * @returns {HttpPromise} Future object\n                 */\n\n                /**\n                 * @ngdoc method\n                 * @name ng.$http#head\n                 * @methodOf ng.$http\n                 *\n                 * @description\n                 * Shortcut method to perform `HEAD` request.\n                 *\n                 * @param {string} url Relative or absolute URL specifying the destination of the request\n                 * @param {Object=} config Optional configuration object\n                 * @returns {HttpPromise} Future object\n                 */\n\n                /**\n                 * @ngdoc method\n                 * @name ng.$http#jsonp\n                 * @methodOf ng.$http\n                 *\n                 * @description\n                 * Shortcut method to perform `JSONP` request.\n                 *\n                 * @param {string} url Relative or absolute URL specifying the destination of the request.\n                 *                     Should contain `JSON_CALLBACK` string.\n                 * @param {Object=} config Optional configuration object\n                 * @returns {HttpPromise} Future object\n                 */\n                createShortMethods('get', 'delete', 'head', 'jsonp');\n\n                /**\n                 * @ngdoc method\n                 * @name ng.$http#post\n                 * @methodOf ng.$http\n                 *\n                 * @description\n                 * Shortcut method to perform `POST` request.\n                 *\n                 * @param {string} url Relative or absolute URL specifying the destination of the request\n                 * @param {*} data Request content\n                 * @param {Object=} config Optional configuration object\n                 * @returns {HttpPromise} Future object\n                 */\n\n                /**\n                 * @ngdoc method\n                 * @name ng.$http#put\n                 * @methodOf ng.$http\n                 *\n                 * @description\n                 * Shortcut method to perform `PUT` request.\n                 *\n                 * @param {string} url Relative or absolute URL specifying the destination of the request\n                 * @param {*} data Request content\n                 * @param {Object=} config Optional configuration object\n                 * @returns {HttpPromise} Future object\n                 */\n                createShortMethodsWithData('post', 'put');\n\n                /**\n                 * @ngdoc property\n                 * @name ng.$http#defaults\n                 * @propertyOf ng.$http\n                 *\n                 * @description\n                 * Runtime equivalent of the `$httpProvider.defaults` property. Allows configuration of\n                 * default headers as well as request and response transformations.\n                 *\n                 * See \"Setting HTTP Headers\" and \"Transforming Requests and Responses\" sections above.\n                 */\n                $http.defaults = $config;\n\n\n                return $http;\n\n\n                function createShortMethods(names) {\n                    forEach(arguments, function(name) {\n                        $http[name] = function(url, config) {\n                            return $http(extend(config || {}, {\n                                method: name,\n                                url: url\n                            }));\n                        };\n                    });\n                }\n\n\n                function createShortMethodsWithData(name) {\n                    forEach(arguments, function(name) {\n                        $http[name] = function(url, data, config) {\n                            return $http(extend(config || {}, {\n                                method: name,\n                                url: url,\n                                data: data\n                            }));\n                        };\n                    });\n                }\n\n\n                /**\n                 * Makes the request.\n                 *\n                 * !!! ACCESSES CLOSURE VARS:\n                 * $httpBackend, $config, $log, $rootScope, defaultCache, $http.pendingRequests\n                 */\n                function sendReq(config, reqData, reqHeaders) {\n                    var deferred = $q.defer(),\n                        promise = deferred.promise,\n                        cache,\n                        cachedResp,\n                        url = buildUrl(config.url, config.params);\n\n                    $http.pendingRequests.push(config);\n                    promise.then(removePendingReq, removePendingReq);\n\n\n                    if (config.cache && config.method == 'GET') {\n                        cache = isObject(config.cache) ? config.cache : defaultCache;\n                    }\n\n                    if (cache) {\n                        cachedResp = cache.get(url);\n                        if (cachedResp) {\n                            if (cachedResp.then) {\n                                // cached request has already been sent, but there is no response yet\n                                cachedResp.then(removePendingReq, removePendingReq);\n                                return cachedResp;\n                            } else {\n                                // serving from cache\n                                if (isArray(cachedResp)) {\n                                    resolvePromise(cachedResp[1], cachedResp[0], copy(cachedResp[2]));\n                                } else {\n                                    resolvePromise(cachedResp, 200, {});\n                                }\n                            }\n                        } else {\n                            // put the promise for the non-transformed response into cache as a placeholder\n                            cache.put(url, promise);\n                        }\n                    }\n\n                    // if we won't have the response in cache, send the request to the backend\n                    if (!cachedResp) {\n                        $httpBackend(config.method, url, reqData, done, reqHeaders, config.timeout,\n                            config.withCredentials);\n                    }\n\n                    return promise;\n\n\n                    /**\n                     * Callback registered to $httpBackend():\n                     *  - caches the response if desired\n                     *  - resolves the raw $http promise\n                     *  - calls $apply\n                     */\n                    function done(status, response, headersString) {\n                        if (cache) {\n                            if (isSuccess(status)) {\n                                cache.put(url, [status, response, parseHeaders(headersString)]);\n                            } else {\n                                // remove promise from the cache\n                                cache.remove(url);\n                            }\n                        }\n\n                        resolvePromise(response, status, headersString);\n                        $rootScope.$apply();\n                    }\n\n\n                    /**\n                     * Resolves the raw $http promise.\n                     */\n                    function resolvePromise(response, status, headers) {\n                        // normalize internal statuses to 0\n                        status = Math.max(status, 0);\n\n                        (isSuccess(status) ? deferred.resolve : deferred.reject)({\n                            data: response,\n                            status: status,\n                            headers: headersGetter(headers),\n                            config: config\n                        });\n                    }\n\n\n                    function removePendingReq() {\n                        var idx = indexOf($http.pendingRequests, config);\n                        if (idx !== -1) $http.pendingRequests.splice(idx, 1);\n                    }\n                }\n\n\n                function buildUrl(url, params) {\n                    if (!params) return url;\n                    var parts = [];\n                    forEachSorted(params, function(value, key) {\n                        if (value == null || value == undefined) return;\n                        if (isObject(value)) {\n                            value = toJson(value);\n                        }\n                        parts.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\n                    });\n                    return url + ((url.indexOf('?') == -1) ? '?' : '&') + parts.join('&');\n                }\n\n\n            }];\n    }\n\n    var XHR = window.XMLHttpRequest || function() {\n        try { return new ActiveXObject(\"Msxml2.XMLHTTP.6.0\"); } catch (e1) {}\n        try { return new ActiveXObject(\"Msxml2.XMLHTTP.3.0\"); } catch (e2) {}\n        try { return new ActiveXObject(\"Msxml2.XMLHTTP\"); } catch (e3) {}\n        throw new Error(\"This browser does not support XMLHttpRequest.\");\n    };\n\n\n    /**\n     * @ngdoc object\n     * @name ng.$httpBackend\n     * @requires $browser\n     * @requires $window\n     * @requires $document\n     *\n     * @description\n     * HTTP backend used by the {@link ng.$http service} that delegates to\n     * XMLHttpRequest object or JSONP and deals with browser incompatibilities.\n     *\n     * You should never need to use this service directly, instead use the higher-level abstractions:\n     * {@link ng.$http $http} or {@link ngResource.$resource $resource}.\n     *\n     * During testing this implementation is swapped with {@link ngMock.$httpBackend mock\n     * $httpBackend} which can be trained with responses.\n     */\n    function $HttpBackendProvider() {\n        this.$get = ['$browser', '$window', '$document', function($browser, $window, $document) {\n            return createHttpBackend($browser, XHR, $browser.defer, $window.angular.callbacks,\n                $document[0], $window.location.protocol.replace(':', ''));\n        }];\n    }\n\n    function createHttpBackend($browser, XHR, $browserDefer, callbacks, rawDocument, locationProtocol) {\n        // TODO(vojta): fix the signature\n        return function(method, url, post, callback, headers, timeout, withCredentials) {\n            $browser.$$incOutstandingRequestCount();\n            url = url || $browser.url();\n\n            if (lowercase(method) == 'jsonp') {\n                var callbackId = '_' + (callbacks.counter++).toString(36);\n                callbacks[callbackId] = function(data) {\n                    callbacks[callbackId].data = data;\n                };\n\n                jsonpReq(url.replace('JSON_CALLBACK', 'angular.callbacks.' + callbackId),\n                    function() {\n                        if (callbacks[callbackId].data) {\n                            completeRequest(callback, 200, callbacks[callbackId].data);\n                        } else {\n                            completeRequest(callback, -2);\n                        }\n                        delete callbacks[callbackId];\n                    });\n            } else {\n                var xhr = new XHR();\n                xhr.open(method, url, true);\n                forEach(headers, function(value, key) {\n                    if (value) xhr.setRequestHeader(key, value);\n                });\n\n                var status;\n\n                // In IE6 and 7, this might be called synchronously when xhr.send below is called and the\n                // response is in the cache. the promise api will ensure that to the app code the api is\n                // always async\n                xhr.onreadystatechange = function() {\n                    if (xhr.readyState == 4) {\n                        var responseHeaders = xhr.getAllResponseHeaders();\n\n                        // TODO(vojta): remove once Firefox 21 gets released.\n                        // begin: workaround to overcome Firefox CORS http response headers bug\n                        // https://bugzilla.mozilla.org/show_bug.cgi?id=608735\n                        // Firefox already patched in nightly. Should land in Firefox 21.\n\n                        // CORS \"simple response headers\" http://www.w3.org/TR/cors/\n                        var value,\n                            simpleHeaders = [\"Cache-Control\", \"Content-Language\", \"Content-Type\",\n                                \"Expires\", \"Last-Modified\", \"Pragma\"];\n                        if (!responseHeaders) {\n                            responseHeaders = \"\";\n                            forEach(simpleHeaders, function (header) {\n                                var value = xhr.getResponseHeader(header);\n                                if (value) {\n                                    responseHeaders += header + \": \" + value + \"\\n\";\n                                }\n                            });\n                        }\n                        // end of the workaround.\n\n                        completeRequest(callback, status || xhr.status, xhr.responseText,\n                            responseHeaders);\n                    }\n                };\n\n                if (withCredentials) {\n                    xhr.withCredentials = true;\n                }\n\n                xhr.send(post || '');\n\n                if (timeout > 0) {\n                    $browserDefer(function() {\n                        status = -1;\n                        xhr.abort();\n                    }, timeout);\n                }\n            }\n\n\n            function completeRequest(callback, status, response, headersString) {\n                // URL_MATCH is defined in src/service/location.js\n                var protocol = (url.match(URL_MATCH) || ['', locationProtocol])[1];\n\n                // fix status code for file protocol (it's always 0)\n                status = (protocol == 'file') ? (response ? 200 : 404) : status;\n\n                // normalize IE bug (http://bugs.jquery.com/ticket/1450)\n                status = status == 1223 ? 204 : status;\n\n                callback(status, response, headersString);\n                $browser.$$completeOutstandingRequest(noop);\n            }\n        };\n\n        function jsonpReq(url, done) {\n            // we can't use jQuery/jqLite here because jQuery does crazy shit with script elements, e.g.:\n            // - fetches local scripts via XHR and evals them\n            // - adds and immediately removes script elements from the document\n            var script = rawDocument.createElement('script'),\n                doneWrapper = function() {\n                    rawDocument.body.removeChild(script);\n                    if (done) done();\n                };\n\n            script.type = 'text/javascript';\n            script.src = url;\n\n            if (msie) {\n                script.onreadystatechange = function() {\n                    if (/loaded|complete/.test(script.readyState)) doneWrapper();\n                };\n            } else {\n                script.onload = script.onerror = doneWrapper;\n            }\n\n            rawDocument.body.appendChild(script);\n        }\n    }\n\n    /**\n     * @ngdoc object\n     * @name ng.$locale\n     *\n     * @description\n     * $locale service provides localization rules for various Angular components. As of right now the\n     * only public api is:\n     *\n     * * `id` \u2013 `{string}` \u2013 locale id formatted as `languageId-countryId` (e.g. `en-us`)\n     */\n    function $LocaleProvider(){\n        this.$get = function() {\n            return {\n                id: 'en-us',\n\n                NUMBER_FORMATS: {\n                    DECIMAL_SEP: '.',\n                    GROUP_SEP: ',',\n                    PATTERNS: [\n                        { // Decimal Pattern\n                            minInt: 1,\n                            minFrac: 0,\n                            maxFrac: 3,\n                            posPre: '',\n                            posSuf: '',\n                            negPre: '-',\n                            negSuf: '',\n                            gSize: 3,\n                            lgSize: 3\n                        },{ //Currency Pattern\n                            minInt: 1,\n                            minFrac: 2,\n                            maxFrac: 2,\n                            posPre: '\\u00A4',\n                            posSuf: '',\n                            negPre: '(\\u00A4',\n                            negSuf: ')',\n                            gSize: 3,\n                            lgSize: 3\n                        }\n                    ],\n                    CURRENCY_SYM: '$'\n                },\n\n                DATETIME_FORMATS: {\n                    MONTH: 'January,February,March,April,May,June,July,August,September,October,November,December'\n                        .split(','),\n                    SHORTMONTH:  'Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec'.split(','),\n                    DAY: 'Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday'.split(','),\n                    SHORTDAY: 'Sun,Mon,Tue,Wed,Thu,Fri,Sat'.split(','),\n                    AMPMS: ['AM','PM'],\n                    medium: 'MMM d, y h:mm:ss a',\n                    short: 'M/d/yy h:mm a',\n                    fullDate: 'EEEE, MMMM d, y',\n                    longDate: 'MMMM d, y',\n                    mediumDate: 'MMM d, y',\n                    shortDate: 'M/d/yy',\n                    mediumTime: 'h:mm:ss a',\n                    shortTime: 'h:mm a'\n                },\n\n                pluralCat: function(num) {\n                    if (num === 1) {\n                        return 'one';\n                    }\n                    return 'other';\n                }\n            };\n        };\n    }\n\n    function $TimeoutProvider() {\n        this.$get = ['$rootScope', '$browser', '$q', '$exceptionHandler',\n            function($rootScope,   $browser,   $q,   $exceptionHandler) {\n                var deferreds = {};\n\n\n                /**\n                 * @ngdoc function\n                 * @name ng.$timeout\n                 * @requires $browser\n                 *\n                 * @description\n                 * Angular's wrapper for `window.setTimeout`. The `fn` function is wrapped into a try/catch\n                 * block and delegates any exceptions to\n                 * {@link ng.$exceptionHandler $exceptionHandler} service.\n                 *\n                 * The return value of registering a timeout function is a promise, which will be resolved when\n                 * the timeout is reached and the timeout function is executed.\n                 *\n                 * To cancel a timeout request, call `$timeout.cancel(promise)`.\n                 *\n                 * In tests you can use {@link ngMock.$timeout `$timeout.flush()`} to\n                 * synchronously flush the queue of deferred functions.\n                 *\n                 * @param {function()} fn A function, whose execution should be delayed.\n                 * @param {number=} [delay=0] Delay in milliseconds.\n                 * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise\n                 *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.\n                 * @returns {Promise} Promise that will be resolved when the timeout is reached. The value this\n                 *   promise will be resolved with is the return value of the `fn` function.\n                 */\n                function timeout(fn, delay, invokeApply) {\n                    var deferred = $q.defer(),\n                        promise = deferred.promise,\n                        skipApply = (isDefined(invokeApply) && !invokeApply),\n                        timeoutId, cleanup;\n\n                    timeoutId = $browser.defer(function() {\n                        try {\n                            deferred.resolve(fn());\n                        } catch(e) {\n                            deferred.reject(e);\n                            $exceptionHandler(e);\n                        }\n\n                        if (!skipApply) $rootScope.$apply();\n                    }, delay);\n\n                    cleanup = function() {\n                        delete deferreds[promise.$$timeoutId];\n                    };\n\n                    promise.$$timeoutId = timeoutId;\n                    deferreds[timeoutId] = deferred;\n                    promise.then(cleanup, cleanup);\n\n                    return promise;\n                }\n\n\n                /**\n                 * @ngdoc function\n                 * @name ng.$timeout#cancel\n                 * @methodOf ng.$timeout\n                 *\n                 * @description\n                 * Cancels a task associated with the `promise`. As a result of this, the promise will be\n                 * resolved with a rejection.\n                 *\n                 * @param {Promise=} promise Promise returned by the `$timeout` function.\n                 * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully\n                 *   canceled.\n                 */\n                timeout.cancel = function(promise) {\n                    if (promise && promise.$$timeoutId in deferreds) {\n                        deferreds[promise.$$timeoutId].reject('canceled');\n                        return $browser.defer.cancel(promise.$$timeoutId);\n                    }\n                    return false;\n                };\n\n                return timeout;\n            }];\n    }\n\n    /**\n     * @ngdoc object\n     * @name ng.$filterProvider\n     * @description\n     *\n     * Filters are just functions which transform input to an output. However filters need to be Dependency Injected. To\n     * achieve this a filter definition consists of a factory function which is annotated with dependencies and is\n     * responsible for creating a filter function.\n     *\n     * <pre>\n     *   // Filter registration\n     *   function MyModule($provide, $filterProvider) {\n *     // create a service to demonstrate injection (not always needed)\n *     $provide.value('greet', function(name){\n *       return 'Hello ' + name + '!';\n *     });\n *\n *     // register a filter factory which uses the\n *     // greet service to demonstrate DI.\n *     $filterProvider.register('greet', function(greet){\n *       // return the filter function which uses the greet service\n *       // to generate salutation\n *       return function(text) {\n *         // filters need to be forgiving so check input validity\n *         return text && greet(text) || text;\n *       };\n *     });\n *   }\n     * </pre>\n     *\n     * The filter function is registered with the `$injector` under the filter name suffixe with `Filter`.\n     * <pre>\n     *   it('should be the same instance', inject(\n     *     function($filterProvider) {\n *       $filterProvider.register('reverse', function(){\n *         return ...;\n *       });\n *     },\n     *     function($filter, reverseFilter) {\n *       expect($filter('reverse')).toBe(reverseFilter);\n *     });\n     * </pre>\n     *\n     *\n     * For more information about how angular filters work, and how to create your own filters, see\n     * {@link guide/dev_guide.templates.filters Understanding Angular Filters} in the angular Developer\n     * Guide.\n     */\n    /**\n     * @ngdoc method\n     * @name ng.$filterProvider#register\n     * @methodOf ng.$filterProvider\n     * @description\n     * Register filter factory function.\n     *\n     * @param {String} name Name of the filter.\n     * @param {function} fn The filter factory function which is injectable.\n     */\n\n\n    /**\n     * @ngdoc function\n     * @name ng.$filter\n     * @function\n     * @description\n     * Filters are used for formatting data displayed to the user.\n     *\n     * The general syntax in templates is as follows:\n     *\n     *         {{ expression [| filter_name[:parameter_value] ... ] }}\n     *\n     * @param {String} name Name of the filter function to retrieve\n     * @return {Function} the filter function\n     */\n    $FilterProvider.$inject = ['$provide'];\n    function $FilterProvider($provide) {\n        var suffix = 'Filter';\n\n        function register(name, factory) {\n            return $provide.factory(name + suffix, factory);\n        }\n        this.register = register;\n\n        this.$get = ['$injector', function($injector) {\n            return function(name) {\n                return $injector.get(name + suffix);\n            }\n        }];\n\n        ////////////////////////////////////////\n\n        register('currency', currencyFilter);\n        register('date', dateFilter);\n        register('filter', filterFilter);\n        register('json', jsonFilter);\n        register('limitTo', limitToFilter);\n        register('lowercase', lowercaseFilter);\n        register('number', numberFilter);\n        register('orderBy', orderByFilter);\n        register('uppercase', uppercaseFilter);\n    }\n\n    /**\n     * @ngdoc filter\n     * @name ng.filter:filter\n     * @function\n     *\n     * @description\n     * Selects a subset of items from `array` and returns it as a new array.\n     *\n     * Note: This function is used to augment the `Array` type in Angular expressions. See\n     * {@link ng.$filter} for more information about Angular arrays.\n     *\n     * @param {Array} array The source array.\n     * @param {string|Object|function()} expression The predicate to be used for selecting items from\n     *   `array`.\n     *\n     *   Can be one of:\n     *\n     *   - `string`: Predicate that results in a substring match using the value of `expression`\n     *     string. All strings or objects with string properties in `array` that contain this string\n     *     will be returned. The predicate can be negated by prefixing the string with `!`.\n     *\n     *   - `Object`: A pattern object can be used to filter specific properties on objects contained\n     *     by `array`. For example `{name:\"M\", phone:\"1\"}` predicate will return an array of items\n     *     which have property `name` containing \"M\" and property `phone` containing \"1\". A special\n     *     property name `$` can be used (as in `{$:\"text\"}`) to accept a match against any\n     *     property of the object. That's equivalent to the simple substring match with a `string`\n     *     as described above.\n     *\n     *   - `function`: A predicate function can be used to write arbitrary filters. The function is\n     *     called for each element of `array`. The final result is an array of those elements that\n     *     the predicate returned true for.\n     *\n     * @example\n     <doc:example>\n     <doc:source>\n     <div ng-init=\"friends = [{name:'John', phone:'555-1276'},\n     {name:'Mary', phone:'800-BIG-MARY'},\n     {name:'Mike', phone:'555-4321'},\n     {name:'Adam', phone:'555-5678'},\n     {name:'Julie', phone:'555-8765'}]\"></div>\n\n     Search: <input ng-model=\"searchText\">\n     <table id=\"searchTextResults\">\n     <tr><th>Name</th><th>Phone</th></tr>\n     <tr ng-repeat=\"friend in friends | filter:searchText\">\n     <td>{{friend.name}}</td>\n     <td>{{friend.phone}}</td>\n     </tr>\n     </table>\n     <hr>\n     Any: <input ng-model=\"search.$\"> <br>\n     Name only <input ng-model=\"search.name\"><br>\n     Phone only <input ng-model=\"search.phone\"><br>\n     <table id=\"searchObjResults\">\n     <tr><th>Name</th><th>Phone</th></tr>\n     <tr ng-repeat=\"friend in friends | filter:search\">\n     <td>{{friend.name}}</td>\n     <td>{{friend.phone}}</td>\n     </tr>\n     </table>\n     </doc:source>\n     <doc:scenario>\n     it('should search across all fields when filtering with a string', function() {\n         input('searchText').enter('m');\n         expect(repeater('#searchTextResults tr', 'friend in friends').column('friend.name')).\n           toEqual(['Mary', 'Mike', 'Adam']);\n\n         input('searchText').enter('76');\n         expect(repeater('#searchTextResults tr', 'friend in friends').column('friend.name')).\n           toEqual(['John', 'Julie']);\n       });\n\n     it('should search in specific fields when filtering with a predicate object', function() {\n         input('search.$').enter('i');\n         expect(repeater('#searchObjResults tr', 'friend in friends').column('friend.name')).\n           toEqual(['Mary', 'Mike', 'Julie']);\n       });\n     </doc:scenario>\n     </doc:example>\n     */\n    function filterFilter() {\n        return function(array, expression) {\n            if (!isArray(array)) return array;\n            var predicates = [];\n            predicates.check = function(value) {\n                for (var j = 0; j < predicates.length; j++) {\n                    if(!predicates[j](value)) {\n                        return false;\n                    }\n                }\n                return true;\n            };\n            var search = function(obj, text){\n                if (text.charAt(0) === '!') {\n                    return !search(obj, text.substr(1));\n                }\n                switch (typeof obj) {\n                    case \"boolean\":\n                    case \"number\":\n                    case \"string\":\n                        return ('' + obj).toLowerCase().indexOf(text) > -1;\n                    case \"object\":\n                        for ( var objKey in obj) {\n                            if (objKey.charAt(0) !== '$' && search(obj[objKey], text)) {\n                                return true;\n                            }\n                        }\n                        return false;\n                    case \"array\":\n                        for ( var i = 0; i < obj.length; i++) {\n                            if (search(obj[i], text)) {\n                                return true;\n                            }\n                        }\n                        return false;\n                    default:\n                        return false;\n                }\n            };\n            switch (typeof expression) {\n                case \"boolean\":\n                case \"number\":\n                case \"string\":\n                    expression = {$:expression};\n                case \"object\":\n                    for (var key in expression) {\n                        if (key == '$') {\n                            (function() {\n                                var text = (''+expression[key]).toLowerCase();\n                                if (!text) return;\n                                predicates.push(function(value) {\n                                    return search(value, text);\n                                });\n                            })();\n                        } else {\n                            (function() {\n                                var path = key;\n                                var text = (''+expression[key]).toLowerCase();\n                                if (!text) return;\n                                predicates.push(function(value) {\n                                    return search(getter(value, path), text);\n                                });\n                            })();\n                        }\n                    }\n                    break;\n                case 'function':\n                    predicates.push(expression);\n                    break;\n                default:\n                    return array;\n            }\n            var filtered = [];\n            for ( var j = 0; j < array.length; j++) {\n                var value = array[j];\n                if (predicates.check(value)) {\n                    filtered.push(value);\n                }\n            }\n            return filtered;\n        }\n    }\n\n    /**\n     * @ngdoc filter\n     * @name ng.filter:currency\n     * @function\n     *\n     * @description\n     * Formats a number as a currency (ie $1,234.56). When no currency symbol is provided, default\n     * symbol for current locale is used.\n     *\n     * @param {number} amount Input to filter.\n     * @param {string=} symbol Currency symbol or identifier to be displayed.\n     * @returns {string} Formatted number.\n     *\n     *\n     * @example\n     <doc:example>\n     <doc:source>\n     <script>\n     function Ctrl($scope) {\n           $scope.amount = 1234.56;\n         }\n     </script>\n     <div ng-controller=\"Ctrl\">\n     <input type=\"number\" ng-model=\"amount\"> <br>\n     default currency symbol ($): {{amount | currency}}<br>\n     custom currency identifier (USD$): {{amount | currency:\"USD$\"}}\n     </div>\n     </doc:source>\n     <doc:scenario>\n     it('should init with 1234.56', function() {\n         expect(binding('amount | currency')).toBe('$1,234.56');\n         expect(binding('amount | currency:\"USD$\"')).toBe('USD$1,234.56');\n       });\n     it('should update', function() {\n         input('amount').enter('-1234');\n         expect(binding('amount | currency')).toBe('($1,234.00)');\n         expect(binding('amount | currency:\"USD$\"')).toBe('(USD$1,234.00)');\n       });\n     </doc:scenario>\n     </doc:example>\n     */\n    currencyFilter.$inject = ['$locale'];\n    function currencyFilter($locale) {\n        var formats = $locale.NUMBER_FORMATS;\n        return function(amount, currencySymbol){\n            if (isUndefined(currencySymbol)) currencySymbol = formats.CURRENCY_SYM;\n            return formatNumber(amount, formats.PATTERNS[1], formats.GROUP_SEP, formats.DECIMAL_SEP, 2).\n                replace(/\\u00A4/g, currencySymbol);\n        };\n    }\n\n    /**\n     * @ngdoc filter\n     * @name ng.filter:number\n     * @function\n     *\n     * @description\n     * Formats a number as text.\n     *\n     * If the input is not a number an empty string is returned.\n     *\n     * @param {number|string} number Number to format.\n     * @param {(number|string)=} [fractionSize=2] Number of decimal places to round the number to.\n     * @returns {string} Number rounded to decimalPlaces and places a \u201c,\u201d after each third digit.\n     *\n     * @example\n     <doc:example>\n     <doc:source>\n     <script>\n     function Ctrl($scope) {\n           $scope.val = 1234.56789;\n         }\n     </script>\n     <div ng-controller=\"Ctrl\">\n     Enter number: <input ng-model='val'><br>\n     Default formatting: {{val | number}}<br>\n     No fractions: {{val | number:0}}<br>\n     Negative number: {{-val | number:4}}\n     </div>\n     </doc:source>\n     <doc:scenario>\n     it('should format numbers', function() {\n         expect(binding('val | number')).toBe('1,234.568');\n         expect(binding('val | number:0')).toBe('1,235');\n         expect(binding('-val | number:4')).toBe('-1,234.5679');\n       });\n\n     it('should update', function() {\n         input('val').enter('3374.333');\n         expect(binding('val | number')).toBe('3,374.333');\n         expect(binding('val | number:0')).toBe('3,374');\n         expect(binding('-val | number:4')).toBe('-3,374.3330');\n       });\n     </doc:scenario>\n     </doc:example>\n     */\n\n\n    numberFilter.$inject = ['$locale'];\n    function numberFilter($locale) {\n        var formats = $locale.NUMBER_FORMATS;\n        return function(number, fractionSize) {\n            return formatNumber(number, formats.PATTERNS[0], formats.GROUP_SEP, formats.DECIMAL_SEP,\n                fractionSize);\n        };\n    }\n\n    var DECIMAL_SEP = '.';\n    function formatNumber(number, pattern, groupSep, decimalSep, fractionSize) {\n        if (isNaN(number) || !isFinite(number)) return '';\n\n        var isNegative = number < 0;\n        number = Math.abs(number);\n        var numStr = number + '',\n            formatedText = '',\n            parts = [];\n\n        var hasExponent = false;\n        if (numStr.indexOf('e') !== -1) {\n            var match = numStr.match(/([\\d\\.]+)e(-?)(\\d+)/);\n            if (match && match[2] == '-' && match[3] > fractionSize + 1) {\n                numStr = '0';\n            } else {\n                formatedText = numStr;\n                hasExponent = true;\n            }\n        }\n\n        if (!hasExponent) {\n            var fractionLen = (numStr.split(DECIMAL_SEP)[1] || '').length;\n\n            // determine fractionSize if it is not specified\n            if (isUndefined(fractionSize)) {\n                fractionSize = Math.min(Math.max(pattern.minFrac, fractionLen), pattern.maxFrac);\n            }\n\n            var pow = Math.pow(10, fractionSize);\n            number = Math.round(number * pow) / pow;\n            var fraction = ('' + number).split(DECIMAL_SEP);\n            var whole = fraction[0];\n            fraction = fraction[1] || '';\n\n            var pos = 0,\n                lgroup = pattern.lgSize,\n                group = pattern.gSize;\n\n            if (whole.length >= (lgroup + group)) {\n                pos = whole.length - lgroup;\n                for (var i = 0; i < pos; i++) {\n                    if ((pos - i)%group === 0 && i !== 0) {\n                        formatedText += groupSep;\n                    }\n                    formatedText += whole.charAt(i);\n                }\n            }\n\n            for (i = pos; i < whole.length; i++) {\n                if ((whole.length - i)%lgroup === 0 && i !== 0) {\n                    formatedText += groupSep;\n                }\n                formatedText += whole.charAt(i);\n            }\n\n            // format fraction part.\n            while(fraction.length < fractionSize) {\n                fraction += '0';\n            }\n\n            if (fractionSize && fractionSize !== \"0\") formatedText += decimalSep + fraction.substr(0, fractionSize);\n        }\n\n        parts.push(isNegative ? pattern.negPre : pattern.posPre);\n        parts.push(formatedText);\n        parts.push(isNegative ? pattern.negSuf : pattern.posSuf);\n        return parts.join('');\n    }\n\n    function padNumber(num, digits, trim) {\n        var neg = '';\n        if (num < 0) {\n            neg =  '-';\n            num = -num;\n        }\n        num = '' + num;\n        while(num.length < digits) num = '0' + num;\n        if (trim)\n            num = num.substr(num.length - digits);\n        return neg + num;\n    }\n\n\n    function dateGetter(name, size, offset, trim) {\n        offset = offset || 0;\n        return function(date) {\n            var value = date['get' + name]();\n            if (offset > 0 || value > -offset)\n                value += offset;\n            if (value === 0 && offset == -12 ) value = 12;\n            return padNumber(value, size, trim);\n        };\n    }\n\n    function dateStrGetter(name, shortForm) {\n        return function(date, formats) {\n            var value = date['get' + name]();\n            var get = uppercase(shortForm ? ('SHORT' + name) : name);\n\n            return formats[get][value];\n        };\n    }\n\n    function timeZoneGetter(date) {\n        var zone = -1 * date.getTimezoneOffset();\n        var paddedZone = (zone >= 0) ? \"+\" : \"\";\n\n        paddedZone += padNumber(Math[zone > 0 ? 'floor' : 'ceil'](zone / 60), 2) +\n            padNumber(Math.abs(zone % 60), 2);\n\n        return paddedZone;\n    }\n\n    function ampmGetter(date, formats) {\n        return date.getHours() < 12 ? formats.AMPMS[0] : formats.AMPMS[1];\n    }\n\n    var DATE_FORMATS = {\n        yyyy: dateGetter('FullYear', 4),\n        yy: dateGetter('FullYear', 2, 0, true),\n        y: dateGetter('FullYear', 1),\n        MMMM: dateStrGetter('Month'),\n        MMM: dateStrGetter('Month', true),\n        MM: dateGetter('Month', 2, 1),\n        M: dateGetter('Month', 1, 1),\n        dd: dateGetter('Date', 2),\n        d: dateGetter('Date', 1),\n        HH: dateGetter('Hours', 2),\n        H: dateGetter('Hours', 1),\n        hh: dateGetter('Hours', 2, -12),\n        h: dateGetter('Hours', 1, -12),\n        mm: dateGetter('Minutes', 2),\n        m: dateGetter('Minutes', 1),\n        ss: dateGetter('Seconds', 2),\n        s: dateGetter('Seconds', 1),\n        EEEE: dateStrGetter('Day'),\n        EEE: dateStrGetter('Day', true),\n        a: ampmGetter,\n        Z: timeZoneGetter\n    };\n\n    var DATE_FORMATS_SPLIT = /((?:[^yMdHhmsaZE']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|d+|H+|h+|m+|s+|a|Z))(.*)/,\n        NUMBER_STRING = /^\\d+$/;\n\n    /**\n     * @ngdoc filter\n     * @name ng.filter:date\n     * @function\n     *\n     * @description\n     *   Formats `date` to a string based on the requested `format`.\n     *\n     *   `format` string can be composed of the following elements:\n     *\n     *   * `'yyyy'`: 4 digit representation of year (e.g. AD 1 => 0001, AD 2010 => 2010)\n     *   * `'yy'`: 2 digit representation of year, padded (00-99). (e.g. AD 2001 => 01, AD 2010 => 10)\n     *   * `'y'`: 1 digit representation of year, e.g. (AD 1 => 1, AD 199 => 199)\n     *   * `'MMMM'`: Month in year (January-December)\n     *   * `'MMM'`: Month in year (Jan-Dec)\n     *   * `'MM'`: Month in year, padded (01-12)\n     *   * `'M'`: Month in year (1-12)\n     *   * `'dd'`: Day in month, padded (01-31)\n     *   * `'d'`: Day in month (1-31)\n     *   * `'EEEE'`: Day in Week,(Sunday-Saturday)\n     *   * `'EEE'`: Day in Week, (Sun-Sat)\n     *   * `'HH'`: Hour in day, padded (00-23)\n     *   * `'H'`: Hour in day (0-23)\n     *   * `'hh'`: Hour in am/pm, padded (01-12)\n     *   * `'h'`: Hour in am/pm, (1-12)\n     *   * `'mm'`: Minute in hour, padded (00-59)\n     *   * `'m'`: Minute in hour (0-59)\n     *   * `'ss'`: Second in minute, padded (00-59)\n     *   * `'s'`: Second in minute (0-59)\n     *   * `'a'`: am/pm marker\n     *   * `'Z'`: 4 digit (+sign) representation of the timezone offset (-1200-+1200)\n     *\n     *   `format` string can also be one of the following predefined\n     *   {@link guide/i18n localizable formats}:\n     *\n     *   * `'medium'`: equivalent to `'MMM d, y h:mm:ss a'` for en_US locale\n     *     (e.g. Sep 3, 2010 12:05:08 pm)\n     *   * `'short'`: equivalent to `'M/d/yy h:mm a'` for en_US  locale (e.g. 9/3/10 12:05 pm)\n     *   * `'fullDate'`: equivalent to `'EEEE, MMMM d,y'` for en_US  locale\n     *     (e.g. Friday, September 3, 2010)\n     *   * `'longDate'`: equivalent to `'MMMM d, y'` for en_US  locale (e.g. September 3, 2010\n     *   * `'mediumDate'`: equivalent to `'MMM d, y'` for en_US  locale (e.g. Sep 3, 2010)\n     *   * `'shortDate'`: equivalent to `'M/d/yy'` for en_US locale (e.g. 9/3/10)\n     *   * `'mediumTime'`: equivalent to `'h:mm:ss a'` for en_US locale (e.g. 12:05:08 pm)\n     *   * `'shortTime'`: equivalent to `'h:mm a'` for en_US locale (e.g. 12:05 pm)\n     *\n     *   `format` string can contain literal values. These need to be quoted with single quotes (e.g.\n     *   `\"h 'in the morning'\"`). In order to output single quote, use two single quotes in a sequence\n     *   (e.g. `\"h o''clock\"`).\n     *\n     * @param {(Date|number|string)} date Date to format either as Date object, milliseconds (string or\n     *    number) or various ISO 8601 datetime string formats (e.g. yyyy-MM-ddTHH:mm:ss.SSSZ and its\n     *    shorter versions like yyyy-MM-ddTHH:mmZ, yyyy-MM-dd or yyyyMMddTHHmmssZ). If no timezone is\n     *    specified in the string input, the time is considered to be in the local timezone.\n     * @param {string=} format Formatting rules (see Description). If not specified,\n     *    `mediumDate` is used.\n     * @returns {string} Formatted string or the input if input is not recognized as date/millis.\n     *\n     * @example\n     <doc:example>\n     <doc:source>\n     <span ng-non-bindable>{{1288323623006 | date:'medium'}}</span>:\n     {{1288323623006 | date:'medium'}}<br>\n     <span ng-non-bindable>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span>:\n     {{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}<br>\n     <span ng-non-bindable>{{1288323623006 | date:'MM/dd/yyyy @ h:mma'}}</span>:\n     {{'1288323623006' | date:'MM/dd/yyyy @ h:mma'}}<br>\n     </doc:source>\n     <doc:scenario>\n     it('should format date', function() {\n         expect(binding(\"1288323623006 | date:'medium'\")).\n            toMatch(/Oct 2\\d, 2010 \\d{1,2}:\\d{2}:\\d{2} (AM|PM)/);\n         expect(binding(\"1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'\")).\n            toMatch(/2010\\-10\\-2\\d \\d{2}:\\d{2}:\\d{2} (\\-|\\+)?\\d{4}/);\n         expect(binding(\"'1288323623006' | date:'MM/dd/yyyy @ h:mma'\")).\n     toMatch(/10\\/2\\d\\/2010 @ \\d{1,2}:\\d{2}(AM|PM)/);\n     });\n     </doc:scenario>\n     </doc:example>\n     */\n    dateFilter.$inject = ['$locale'];\n    function dateFilter($locale) {\n\n\n        var R_ISO8601_STR = /^(\\d{4})-?(\\d\\d)-?(\\d\\d)(?:T(\\d\\d)(?::?(\\d\\d)(?::?(\\d\\d)(?:\\.(\\d+))?)?)?(Z|([+-])(\\d\\d):?(\\d\\d))?)?$/;\n        function jsonStringToDate(string){\n            var match;\n            if (match = string.match(R_ISO8601_STR)) {\n                var date = new Date(0),\n                    tzHour = 0,\n                    tzMin  = 0;\n                if (match[9]) {\n                    tzHour = int(match[9] + match[10]);\n                    tzMin = int(match[9] + match[11]);\n                }\n                date.setUTCFullYear(int(match[1]), int(match[2]) - 1, int(match[3]));\n                date.setUTCHours(int(match[4]||0) - tzHour, int(match[5]||0) - tzMin, int(match[6]||0), int(match[7]||0));\n                return date;\n            }\n            return string;\n        }\n\n\n        return function(date, format) {\n            var text = '',\n                parts = [],\n                fn, match;\n\n            format = format || 'mediumDate';\n            format = $locale.DATETIME_FORMATS[format] || format;\n            if (isString(date)) {\n                if (NUMBER_STRING.test(date)) {\n                    date = int(date);\n                } else {\n                    date = jsonStringToDate(date);\n                }\n            }\n\n            if (isNumber(date)) {\n                date = new Date(date);\n            }\n\n            if (!isDate(date)) {\n                return date;\n            }\n\n            while(format) {\n                match = DATE_FORMATS_SPLIT.exec(format);\n                if (match) {\n                    parts = concat(parts, match, 1);\n                    format = parts.pop();\n                } else {\n                    parts.push(format);\n                    format = null;\n                }\n            }\n\n            forEach(parts, function(value){\n                fn = DATE_FORMATS[value];\n                text += fn ? fn(date, $locale.DATETIME_FORMATS)\n                    : value.replace(/(^'|'$)/g, '').replace(/''/g, \"'\");\n            });\n\n            return text;\n        };\n    }\n\n\n    /**\n     * @ngdoc filter\n     * @name ng.filter:json\n     * @function\n     *\n     * @description\n     *   Allows you to convert a JavaScript object into JSON string.\n     *\n     *   This filter is mostly useful for debugging. When using the double curly {{value}} notation\n     *   the binding is automatically converted to JSON.\n     *\n     * @param {*} object Any JavaScript object (including arrays and primitive types) to filter.\n     * @returns {string} JSON string.\n     *\n     *\n     * @example:\n     <doc:example>\n     <doc:source>\n     <pre>{{ {'name':'value'} | json }}</pre>\n     </doc:source>\n     <doc:scenario>\n     it('should jsonify filtered objects', function() {\n         expect(binding(\"{'name':'value'}\")).toMatch(/\\{\\n  \"name\": ?\"value\"\\n}/);\n       });\n     </doc:scenario>\n     </doc:example>\n     *\n     */\n    function jsonFilter() {\n        return function(object) {\n            return toJson(object, true);\n        };\n    }\n\n\n    /**\n     * @ngdoc filter\n     * @name ng.filter:lowercase\n     * @function\n     * @description\n     * Converts string to lowercase.\n     * @see angular.lowercase\n     */\n    var lowercaseFilter = valueFn(lowercase);\n\n\n    /**\n     * @ngdoc filter\n     * @name ng.filter:uppercase\n     * @function\n     * @description\n     * Converts string to uppercase.\n     * @see angular.uppercase\n     */\n    var uppercaseFilter = valueFn(uppercase);\n\n    /**\n     * @ngdoc function\n     * @name ng.filter:limitTo\n     * @function\n     *\n     * @description\n     * Creates a new array containing only a specified number of elements in an array. The elements\n     * are taken from either the beginning or the end of the source array, as specified by the\n     * value and sign (positive or negative) of `limit`.\n     *\n     * Note: This function is used to augment the `Array` type in Angular expressions. See\n     * {@link ng.$filter} for more information about Angular arrays.\n     *\n     * @param {Array} array Source array to be limited.\n     * @param {string|Number} limit The length of the returned array. If the `limit` number is\n     *     positive, `limit` number of items from the beginning of the source array are copied.\n     *     If the number is negative, `limit` number  of items from the end of the source array are\n     *     copied. The `limit` will be trimmed if it exceeds `array.length`\n     * @returns {Array} A new sub-array of length `limit` or less if input array had less than `limit`\n     *     elements.\n     *\n     * @example\n     <doc:example>\n     <doc:source>\n     <script>\n     function Ctrl($scope) {\n           $scope.numbers = [1,2,3,4,5,6,7,8,9];\n           $scope.limit = 3;\n         }\n     </script>\n     <div ng-controller=\"Ctrl\">\n     Limit {{numbers}} to: <input type=\"integer\" ng-model=\"limit\">\n     <p>Output: {{ numbers | limitTo:limit }}</p>\n     </div>\n     </doc:source>\n     <doc:scenario>\n     it('should limit the numer array to first three items', function() {\n         expect(element('.doc-example-live input[ng-model=limit]').val()).toBe('3');\n         expect(binding('numbers | limitTo:limit')).toEqual('[1,2,3]');\n       });\n\n     it('should update the output when -3 is entered', function() {\n         input('limit').enter(-3);\n         expect(binding('numbers | limitTo:limit')).toEqual('[7,8,9]');\n       });\n\n     it('should not exceed the maximum size of input array', function() {\n         input('limit').enter(100);\n         expect(binding('numbers | limitTo:limit')).toEqual('[1,2,3,4,5,6,7,8,9]');\n       });\n     </doc:scenario>\n     </doc:example>\n     */\n    function limitToFilter(){\n        return function(array, limit) {\n            if (!(array instanceof Array)) return array;\n            limit = int(limit);\n            var out = [],\n                i, n;\n\n            // check that array is iterable\n            if (!array || !(array instanceof Array))\n                return out;\n\n            // if abs(limit) exceeds maximum length, trim it\n            if (limit > array.length)\n                limit = array.length;\n            else if (limit < -array.length)\n                limit = -array.length;\n\n            if (limit > 0) {\n                i = 0;\n                n = limit;\n            } else {\n                i = array.length + limit;\n                n = array.length;\n            }\n\n            for (; i<n; i++) {\n                out.push(array[i]);\n            }\n\n            return out;\n        }\n    }\n\n    /**\n     * @ngdoc function\n     * @name ng.filter:orderBy\n     * @function\n     *\n     * @description\n     * Orders a specified `array` by the `expression` predicate.\n     *\n     * Note: this function is used to augment the `Array` type in Angular expressions. See\n     * {@link ng.$filter} for more informaton about Angular arrays.\n     *\n     * @param {Array} array The array to sort.\n     * @param {function(*)|string|Array.<(function(*)|string)>} expression A predicate to be\n     *    used by the comparator to determine the order of elements.\n     *\n     *    Can be one of:\n     *\n     *    - `function`: Getter function. The result of this function will be sorted using the\n     *      `<`, `=`, `>` operator.\n     *    - `string`: An Angular expression which evaluates to an object to order by, such as 'name'\n     *      to sort by a property called 'name'. Optionally prefixed with `+` or `-` to control\n     *      ascending or descending sort order (for example, +name or -name).\n     *    - `Array`: An array of function or string predicates. The first predicate in the array\n     *      is used for sorting, but when two items are equivalent, the next predicate is used.\n     *\n     * @param {boolean=} reverse Reverse the order the array.\n     * @returns {Array} Sorted copy of the source array.\n     *\n     * @example\n     <doc:example>\n     <doc:source>\n     <script>\n     function Ctrl($scope) {\n           $scope.friends =\n               [{name:'John', phone:'555-1212', age:10},\n                {name:'Mary', phone:'555-9876', age:19},\n                {name:'Mike', phone:'555-4321', age:21},\n                {name:'Adam', phone:'555-5678', age:35},\n                {name:'Julie', phone:'555-8765', age:29}]\n           $scope.predicate = '-age';\n         }\n     </script>\n     <div ng-controller=\"Ctrl\">\n     <pre>Sorting predicate = {{predicate}}; reverse = {{reverse}}</pre>\n     <hr/>\n     [ <a href=\"\" ng-click=\"predicate=''\">unsorted</a> ]\n     <table class=\"friend\">\n     <tr>\n     <th><a href=\"\" ng-click=\"predicate = 'name'; reverse=false\">Name</a>\n     (<a href ng-click=\"predicate = '-name'; reverse=false\">^</a>)</th>\n     <th><a href=\"\" ng-click=\"predicate = 'phone'; reverse=!reverse\">Phone Number</a></th>\n     <th><a href=\"\" ng-click=\"predicate = 'age'; reverse=!reverse\">Age</a></th>\n     </tr>\n     <tr ng-repeat=\"friend in friends | orderBy:predicate:reverse\">\n     <td>{{friend.name}}</td>\n     <td>{{friend.phone}}</td>\n     <td>{{friend.age}}</td>\n     </tr>\n     </table>\n     </div>\n     </doc:source>\n     <doc:scenario>\n     it('should be reverse ordered by aged', function() {\n         expect(binding('predicate')).toBe('-age');\n         expect(repeater('table.friend', 'friend in friends').column('friend.age')).\n           toEqual(['35', '29', '21', '19', '10']);\n         expect(repeater('table.friend', 'friend in friends').column('friend.name')).\n           toEqual(['Adam', 'Julie', 'Mike', 'Mary', 'John']);\n       });\n\n     it('should reorder the table when user selects different predicate', function() {\n         element('.doc-example-live a:contains(\"Name\")').click();\n         expect(repeater('table.friend', 'friend in friends').column('friend.name')).\n           toEqual(['Adam', 'John', 'Julie', 'Mary', 'Mike']);\n         expect(repeater('table.friend', 'friend in friends').column('friend.age')).\n           toEqual(['35', '10', '29', '19', '21']);\n\n         element('.doc-example-live a:contains(\"Phone\")').click();\n         expect(repeater('table.friend', 'friend in friends').column('friend.phone')).\n           toEqual(['555-9876', '555-8765', '555-5678', '555-4321', '555-1212']);\n         expect(repeater('table.friend', 'friend in friends').column('friend.name')).\n           toEqual(['Mary', 'Julie', 'Adam', 'Mike', 'John']);\n       });\n     </doc:scenario>\n     </doc:example>\n     */\n    orderByFilter.$inject = ['$parse'];\n    function orderByFilter($parse){\n        return function(array, sortPredicate, reverseOrder) {\n            if (!isArray(array)) return array;\n            if (!sortPredicate) return array;\n            sortPredicate = isArray(sortPredicate) ? sortPredicate: [sortPredicate];\n            sortPredicate = map(sortPredicate, function(predicate){\n                var descending = false, get = predicate || identity;\n                if (isString(predicate)) {\n                    if ((predicate.charAt(0) == '+' || predicate.charAt(0) == '-')) {\n                        descending = predicate.charAt(0) == '-';\n                        predicate = predicate.substring(1);\n                    }\n                    get = $parse(predicate);\n                }\n                return reverseComparator(function(a,b){\n                    return compare(get(a),get(b));\n                }, descending);\n            });\n            var arrayCopy = [];\n            for ( var i = 0; i < array.length; i++) { arrayCopy.push(array[i]); }\n            return arrayCopy.sort(reverseComparator(comparator, reverseOrder));\n\n            function comparator(o1, o2){\n                for ( var i = 0; i < sortPredicate.length; i++) {\n                    var comp = sortPredicate[i](o1, o2);\n                    if (comp !== 0) return comp;\n                }\n                return 0;\n            }\n            function reverseComparator(comp, descending) {\n                return toBoolean(descending)\n                    ? function(a,b){return comp(b,a);}\n                    : comp;\n            }\n            function compare(v1, v2){\n                var t1 = typeof v1;\n                var t2 = typeof v2;\n                if (t1 == t2) {\n                    if (t1 == \"string\") v1 = v1.toLowerCase();\n                    if (t1 == \"string\") v2 = v2.toLowerCase();\n                    if (v1 === v2) return 0;\n                    return v1 < v2 ? -1 : 1;\n                } else {\n                    return t1 < t2 ? -1 : 1;\n                }\n            }\n        }\n    }\n\n    function ngDirective(directive) {\n        if (isFunction(directive)) {\n            directive = {\n                link: directive\n            }\n        }\n        directive.restrict = directive.restrict || 'AC';\n        return valueFn(directive);\n    }\n\n    /**\n     * @ngdoc directive\n     * @name ng.directive:a\n     * @restrict E\n     *\n     * @description\n     * Modifies the default behavior of html A tag, so that the default action is prevented when href\n     * attribute is empty.\n     *\n     * The reasoning for this change is to allow easy creation of action links with `ngClick` directive\n     * without changing the location or causing page reloads, e.g.:\n     * `<a href=\"\" ng-click=\"model.$save()\">Save</a>`\n     */\n    var htmlAnchorDirective = valueFn({\n        restrict: 'E',\n        compile: function(element, attr) {\n\n            if (msie <= 8) {\n\n                // turn <a href ng-click=\"..\">link</a> into a stylable link in IE\n                // but only if it doesn't have name attribute, in which case it's an anchor\n                if (!attr.href && !attr.name) {\n                    attr.$set('href', '');\n                }\n\n                // add a comment node to anchors to workaround IE bug that causes element content to be reset\n                // to new attribute content if attribute is updated with value containing @ and element also\n                // contains value with @\n                // see issue #1949\n                element.append(document.createComment('IE fix'));\n            }\n\n            return function(scope, element) {\n                element.bind('click', function(event){\n                    // if we have no href url, then don't navigate anywhere.\n                    if (!element.attr('href')) {\n                        event.preventDefault();\n                    }\n                });\n            }\n        }\n    });\n\n    /**\n     * @ngdoc directive\n     * @name ng.directive:ngHref\n     * @restrict A\n     *\n     * @description\n     * Using Angular markup like {{hash}} in an href attribute makes\n     * the page open to a wrong URL, if the user clicks that link before\n     * angular has a chance to replace the {{hash}} with actual URL, the\n     * link will be broken and will most likely return a 404 error.\n     * The `ngHref` directive solves this problem.\n     *\n     * The buggy way to write it:\n     * <pre>\n     * <a href=\"http://www.gravatar.com/avatar/{{hash}}\"/>\n     * </pre>\n     *\n     * The correct way to write it:\n     * <pre>\n     * <a ng-href=\"http://www.gravatar.com/avatar/{{hash}}\"/>\n     * </pre>\n     *\n     * @element A\n     * @param {template} ngHref any string which can contain `{{}}` markup.\n     *\n     * @example\n     * This example uses `link` variable inside `href` attribute:\n     <doc:example>\n     <doc:source>\n     <input ng-model=\"value\" /><br />\n     <a id=\"link-1\" href ng-click=\"value = 1\">link 1</a> (link, don't reload)<br />\n     <a id=\"link-2\" href=\"\" ng-click=\"value = 2\">link 2</a> (link, don't reload)<br />\n     <a id=\"link-3\" ng-href=\"/{{'123'}}\">link 3</a> (link, reload!)<br />\n     <a id=\"link-4\" href=\"\" name=\"xx\" ng-click=\"value = 4\">anchor</a> (link, don't reload)<br />\n     <a id=\"link-5\" name=\"xxx\" ng-click=\"value = 5\">anchor</a> (no link)<br />\n     <a id=\"link-6\" ng-href=\"{{value}}\">link</a> (link, change location)\n     </doc:source>\n     <doc:scenario>\n     it('should execute ng-click but not reload when href without value', function() {\n          element('#link-1').click();\n          expect(input('value').val()).toEqual('1');\n          expect(element('#link-1').attr('href')).toBe(\"\");\n        });\n\n     it('should execute ng-click but not reload when href empty string', function() {\n          element('#link-2').click();\n          expect(input('value').val()).toEqual('2');\n          expect(element('#link-2').attr('href')).toBe(\"\");\n        });\n\n     it('should execute ng-click and change url when ng-href specified', function() {\n          expect(element('#link-3').attr('href')).toBe(\"/123\");\n\n          element('#link-3').click();\n          expect(browser().window().path()).toEqual('/123');\n        });\n\n     it('should execute ng-click but not reload when href empty string and name specified', function() {\n          element('#link-4').click();\n          expect(input('value').val()).toEqual('4');\n          expect(element('#link-4').attr('href')).toBe('');\n        });\n\n     it('should execute ng-click but not reload when no href but name specified', function() {\n          element('#link-5').click();\n          expect(input('value').val()).toEqual('5');\n          expect(element('#link-5').attr('href')).toBe(undefined);\n        });\n\n     it('should only change url when only ng-href', function() {\n          input('value').enter('6');\n          expect(element('#link-6').attr('href')).toBe('6');\n\n          element('#link-6').click();\n          expect(browser().location().url()).toEqual('/6');\n        });\n     </doc:scenario>\n     </doc:example>\n     */\n\n    /**\n     * @ngdoc directive\n     * @name ng.directive:ngSrc\n     * @restrict A\n     *\n     * @description\n     * Using Angular markup like `{{hash}}` in a `src` attribute doesn't\n     * work right: The browser will fetch from the URL with the literal\n     * text `{{hash}}` until Angular replaces the expression inside\n     * `{{hash}}`. The `ngSrc` directive solves this problem.\n     *\n     * The buggy way to write it:\n     * <pre>\n     * <img src=\"http://www.gravatar.com/avatar/{{hash}}\"/>\n     * </pre>\n     *\n     * The correct way to write it:\n     * <pre>\n     * <img ng-src=\"http://www.gravatar.com/avatar/{{hash}}\"/>\n     * </pre>\n     *\n     * @element IMG\n     * @param {template} ngSrc any string which can contain `{{}}` markup.\n     */\n\n    /**\n     * @ngdoc directive\n     * @name ng.directive:ngDisabled\n     * @restrict A\n     *\n     * @description\n     *\n     * The following markup will make the button enabled on Chrome/Firefox but not on IE8 and older IEs:\n     * <pre>\n     * <div ng-init=\"scope = { isDisabled: false }\">\n     *  <button disabled=\"{{scope.isDisabled}}\">Disabled</button>\n     * </div>\n     * </pre>\n     *\n     * The HTML specs do not require browsers to preserve the special attributes such as disabled.\n     * (The presence of them means true and absence means false)\n     * This prevents the angular compiler from correctly retrieving the binding expression.\n     * To solve this problem, we introduce the `ngDisabled` directive.\n     *\n     * @example\n     <doc:example>\n     <doc:source>\n     Click me to toggle: <input type=\"checkbox\" ng-model=\"checked\"><br/>\n     <button ng-model=\"button\" ng-disabled=\"checked\">Button</button>\n     </doc:source>\n     <doc:scenario>\n     it('should toggle button', function() {\n          expect(element('.doc-example-live :button').prop('disabled')).toBeFalsy();\n          input('checked').check();\n          expect(element('.doc-example-live :button').prop('disabled')).toBeTruthy();\n        });\n     </doc:scenario>\n     </doc:example>\n     *\n     * @element INPUT\n     * @param {expression} ngDisabled Angular expression that will be evaluated.\n     */\n\n\n    /**\n     * @ngdoc directive\n     * @name ng.directive:ngChecked\n     * @restrict A\n     *\n     * @description\n     * The HTML specs do not require browsers to preserve the special attributes such as checked.\n     * (The presence of them means true and absence means false)\n     * This prevents the angular compiler from correctly retrieving the binding expression.\n     * To solve this problem, we introduce the `ngChecked` directive.\n     * @example\n     <doc:example>\n     <doc:source>\n     Check me to check both: <input type=\"checkbox\" ng-model=\"master\"><br/>\n     <input id=\"checkSlave\" type=\"checkbox\" ng-checked=\"master\">\n     </doc:source>\n     <doc:scenario>\n     it('should check both checkBoxes', function() {\n          expect(element('.doc-example-live #checkSlave').prop('checked')).toBeFalsy();\n          input('master').check();\n          expect(element('.doc-example-live #checkSlave').prop('checked')).toBeTruthy();\n        });\n     </doc:scenario>\n     </doc:example>\n     *\n     * @element INPUT\n     * @param {expression} ngChecked Angular expression that will be evaluated.\n     */\n\n\n    /**\n     * @ngdoc directive\n     * @name ng.directive:ngMultiple\n     * @restrict A\n     *\n     * @description\n     * The HTML specs do not require browsers to preserve the special attributes such as multiple.\n     * (The presence of them means true and absence means false)\n     * This prevents the angular compiler from correctly retrieving the binding expression.\n     * To solve this problem, we introduce the `ngMultiple` directive.\n     *\n     * @example\n     <doc:example>\n     <doc:source>\n     Check me check multiple: <input type=\"checkbox\" ng-model=\"checked\"><br/>\n     <select id=\"select\" ng-multiple=\"checked\">\n     <option>Misko</option>\n     <option>Igor</option>\n     <option>Vojta</option>\n     <option>Di</option>\n     </select>\n     </doc:source>\n     <doc:scenario>\n     it('should toggle multiple', function() {\n           expect(element('.doc-example-live #select').prop('multiple')).toBeFalsy();\n           input('checked').check();\n           expect(element('.doc-example-live #select').prop('multiple')).toBeTruthy();\n         });\n     </doc:scenario>\n     </doc:example>\n     *\n     * @element SELECT\n     * @param {expression} ngMultiple Angular expression that will be evaluated.\n     */\n\n\n    /**\n     * @ngdoc directive\n     * @name ng.directive:ngReadonly\n     * @restrict A\n     *\n     * @description\n     * The HTML specs do not require browsers to preserve the special attributes such as readonly.\n     * (The presence of them means true and absence means false)\n     * This prevents the angular compiler from correctly retrieving the binding expression.\n     * To solve this problem, we introduce the `ngReadonly` directive.\n     * @example\n     <doc:example>\n     <doc:source>\n     Check me to make text readonly: <input type=\"checkbox\" ng-model=\"checked\"><br/>\n     <input type=\"text\" ng-readonly=\"checked\" value=\"I'm Angular\"/>\n     </doc:source>\n     <doc:scenario>\n     it('should toggle readonly attr', function() {\n          expect(element('.doc-example-live :text').prop('readonly')).toBeFalsy();\n          input('checked').check();\n          expect(element('.doc-example-live :text').prop('readonly')).toBeTruthy();\n        });\n     </doc:scenario>\n     </doc:example>\n     *\n     * @element INPUT\n     * @param {string} expression Angular expression that will be evaluated.\n     */\n\n\n    /**\n     * @ngdoc directive\n     * @name ng.directive:ngSelected\n     * @restrict A\n     *\n     * @description\n     * The HTML specs do not require browsers to preserve the special attributes such as selected.\n     * (The presence of them means true and absence means false)\n     * This prevents the angular compiler from correctly retrieving the binding expression.\n     * To solve this problem, we introduced the `ngSelected` directive.\n     * @example\n     <doc:example>\n     <doc:source>\n     Check me to select: <input type=\"checkbox\" ng-model=\"selected\"><br/>\n     <select>\n     <option>Hello!</option>\n     <option id=\"greet\" ng-selected=\"selected\">Greetings!</option>\n     </select>\n     </doc:source>\n     <doc:scenario>\n     it('should select Greetings!', function() {\n          expect(element('.doc-example-live #greet').prop('selected')).toBeFalsy();\n          input('selected').check();\n          expect(element('.doc-example-live #greet').prop('selected')).toBeTruthy();\n        });\n     </doc:scenario>\n     </doc:example>\n     *\n     * @element OPTION\n     * @param {string} expression Angular expression that will be evaluated.\n     */\n\n\n    var ngAttributeAliasDirectives = {};\n\n\n// boolean attrs are evaluated\n    forEach(BOOLEAN_ATTR, function(propName, attrName) {\n        var normalized = directiveNormalize('ng-' + attrName);\n        ngAttributeAliasDirectives[normalized] = function() {\n            return {\n                priority: 100,\n                compile: function() {\n                    return function(scope, element, attr) {\n                        scope.$watch(attr[normalized], function ngBooleanAttrWatchAction(value) {\n                            attr.$set(attrName, !!value);\n                        });\n                    };\n                }\n            };\n        };\n    });\n\n\n// ng-src, ng-href are interpolated\n    forEach(['src', 'href'], function(attrName) {\n        var normalized = directiveNormalize('ng-' + attrName);\n        ngAttributeAliasDirectives[normalized] = function() {\n            return {\n                priority: 99, // it needs to run after the attributes are interpolated\n                link: function(scope, element, attr) {\n                    attr.$observe(normalized, function(value) {\n                        if (!value)\n                            return;\n\n                        attr.$set(attrName, value);\n\n                        // on IE, if \"ng:src\" directive declaration is used and \"src\" attribute doesn't exist\n                        // then calling element.setAttribute('src', 'foo') doesn't do anything, so we need\n                        // to set the property as well to achieve the desired effect.\n                        // we use attr[attrName] value since $set can sanitize the url.\n                        if (msie) element.prop(attrName, attr[attrName]);\n                    });\n                }\n            };\n        };\n    });\n\n    var nullFormCtrl = {\n        $addControl: noop,\n        $removeControl: noop,\n        $setValidity: noop,\n        $setDirty: noop\n    };\n\n    /**\n     * @ngdoc object\n     * @name ng.directive:form.FormController\n     *\n     * @property {boolean} $pristine True if user has not interacted with the form yet.\n     * @property {boolean} $dirty True if user has already interacted with the form.\n     * @property {boolean} $valid True if all of the containing forms and controls are valid.\n     * @property {boolean} $invalid True if at least one containing control or form is invalid.\n     *\n     * @property {Object} $error Is an object hash, containing references to all invalid controls or\n     *  forms, where:\n     *\n     *  - keys are validation tokens (error names) \u2014 such as `required`, `url` or `email`),\n     *  - values are arrays of controls or forms that are invalid with given error.\n     *\n     * @description\n     * `FormController` keeps track of all its controls and nested forms as well as state of them,\n     * such as being valid/invalid or dirty/pristine.\n     *\n     * Each {@link ng.directive:form form} directive creates an instance\n     * of `FormController`.\n     *\n     */\n//asks for $scope to fool the BC controller module\n    FormController.$inject = ['$element', '$attrs', '$scope'];\n    function FormController(element, attrs) {\n        var form = this,\n            parentForm = element.parent().controller('form') || nullFormCtrl,\n            invalidCount = 0, // used to easily determine if we are valid\n            errors = form.$error = {};\n\n        // init state\n        form.$name = attrs.name;\n        form.$dirty = false;\n        form.$pristine = true;\n        form.$valid = true;\n        form.$invalid = false;\n\n        parentForm.$addControl(form);\n\n        // Setup initial state of the control\n        element.addClass(PRISTINE_CLASS);\n        toggleValidCss(true);\n\n        // convenience method for easy toggling of classes\n        function toggleValidCss(isValid, validationErrorKey) {\n            validationErrorKey = validationErrorKey ? '-' + snake_case(validationErrorKey, '-') : '';\n            element.\n                removeClass((isValid ? INVALID_CLASS : VALID_CLASS) + validationErrorKey).\n                addClass((isValid ? VALID_CLASS : INVALID_CLASS) + validationErrorKey);\n        }\n\n        form.$addControl = function(control) {\n            if (control.$name && !form.hasOwnProperty(control.$name)) {\n                form[control.$name] = control;\n            }\n        };\n\n        form.$removeControl = function(control) {\n            if (control.$name && form[control.$name] === control) {\n                delete form[control.$name];\n            }\n            forEach(errors, function(queue, validationToken) {\n                form.$setValidity(validationToken, true, control);\n            });\n        };\n\n        form.$setValidity = function(validationToken, isValid, control) {\n            var queue = errors[validationToken];\n\n            if (isValid) {\n                if (queue) {\n                    arrayRemove(queue, control);\n                    if (!queue.length) {\n                        invalidCount--;\n                        if (!invalidCount) {\n                            toggleValidCss(isValid);\n                            form.$valid = true;\n                            form.$invalid = false;\n                        }\n                        errors[validationToken] = false;\n                        toggleValidCss(true, validationToken);\n                        parentForm.$setValidity(validationToken, true, form);\n                    }\n                }\n\n            } else {\n                if (!invalidCount) {\n                    toggleValidCss(isValid);\n                }\n                if (queue) {\n                    if (includes(queue, control)) return;\n                } else {\n                    errors[validationToken] = queue = [];\n                    invalidCount++;\n                    toggleValidCss(false, validationToken);\n                    parentForm.$setValidity(validationToken, false, form);\n                }\n                queue.push(control);\n\n                form.$valid = false;\n                form.$invalid = true;\n            }\n        };\n\n        form.$setDirty = function() {\n            element.removeClass(PRISTINE_CLASS).addClass(DIRTY_CLASS);\n            form.$dirty = true;\n            form.$pristine = false;\n            parentForm.$setDirty();\n        };\n\n    }\n\n\n    /**\n     * @ngdoc directive\n     * @name ng.directive:ngForm\n     * @restrict EAC\n     *\n     * @description\n     * Nestable alias of {@link ng.directive:form `form`} directive. HTML\n     * does not allow nesting of form elements. It is useful to nest forms, for example if the validity of a\n     * sub-group of controls needs to be determined.\n     *\n     * @param {string=} name|ngForm Name of the form. If specified, the form controller will be published into\n     *                       related scope, under this name.\n     *\n     */\n\n    /**\n     * @ngdoc directive\n     * @name ng.directive:form\n     * @restrict E\n     *\n     * @description\n     * Directive that instantiates\n     * {@link ng.directive:form.FormController FormController}.\n     *\n     * If `name` attribute is specified, the form controller is published onto the current scope under\n     * this name.\n     *\n     * # Alias: {@link ng.directive:ngForm `ngForm`}\n     *\n     * In angular forms can be nested. This means that the outer form is valid when all of the child\n     * forms are valid as well. However browsers do not allow nesting of `<form>` elements, for this\n     * reason angular provides {@link ng.directive:ngForm `ngForm`} alias\n     * which behaves identical to `<form>` but allows form nesting.\n     *\n     *\n     * # CSS classes\n     *  - `ng-valid` Is set if the form is valid.\n     *  - `ng-invalid` Is set if the form is invalid.\n     *  - `ng-pristine` Is set if the form is pristine.\n     *  - `ng-dirty` Is set if the form is dirty.\n     *\n     *\n     * # Submitting a form and preventing default action\n     *\n     * Since the role of forms in client-side Angular applications is different than in classical\n     * roundtrip apps, it is desirable for the browser not to translate the form submission into a full\n     * page reload that sends the data to the server. Instead some javascript logic should be triggered\n     * to handle the form submission in application specific way.\n     *\n     * For this reason, Angular prevents the default action (form submission to the server) unless the\n     * `<form>` element has an `action` attribute specified.\n     *\n     * You can use one of the following two ways to specify what javascript method should be called when\n     * a form is submitted:\n     *\n     * - {@link ng.directive:ngSubmit ngSubmit} directive on the form element\n     * - {@link ng.directive:ngClick ngClick} directive on the first\n     *  button or input field of type submit (input[type=submit])\n     *\n     * To prevent double execution of the handler, use only one of ngSubmit or ngClick directives. This\n     * is because of the following form submission rules coming from the html spec:\n     *\n     * - If a form has only one input field then hitting enter in this field triggers form submit\n     * (`ngSubmit`)\n     * - if a form has has 2+ input fields and no buttons or input[type=submit] then hitting enter\n     * doesn't trigger submit\n     * - if a form has one or more input fields and one or more buttons or input[type=submit] then\n     * hitting enter in any of the input fields will trigger the click handler on the *first* button or\n     * input[type=submit] (`ngClick`) *and* a submit handler on the enclosing form (`ngSubmit`)\n     *\n     * @param {string=} name Name of the form. If specified, the form controller will be published into\n     *                       related scope, under this name.\n     *\n     * @example\n     <doc:example>\n     <doc:source>\n     <script>\n     function Ctrl($scope) {\n           $scope.userType = 'guest';\n         }\n     </script>\n     <form name=\"myForm\" ng-controller=\"Ctrl\">\n     userType: <input name=\"input\" ng-model=\"userType\" required>\n     <span class=\"error\" ng-show=\"myForm.input.$error.required\">Required!</span><br>\n     <tt>userType = {{userType}}</tt><br>\n     <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br>\n     <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br>\n     <tt>myForm.$valid = {{myForm.$valid}}</tt><br>\n     <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br>\n     </form>\n     </doc:source>\n     <doc:scenario>\n     it('should initialize to model', function() {\n         expect(binding('userType')).toEqual('guest');\n         expect(binding('myForm.input.$valid')).toEqual('true');\n        });\n\n     it('should be invalid if empty', function() {\n         input('userType').enter('');\n         expect(binding('userType')).toEqual('');\n         expect(binding('myForm.input.$valid')).toEqual('false');\n        });\n     </doc:scenario>\n     </doc:example>\n     */\n    var formDirectiveFactory = function(isNgForm) {\n        return ['$timeout', function($timeout) {\n            var formDirective = {\n                name: 'form',\n                restrict: 'E',\n                controller: FormController,\n                compile: function() {\n                    return {\n                        pre: function(scope, formElement, attr, controller) {\n                            if (!attr.action) {\n                                // we can't use jq events because if a form is destroyed during submission the default\n                                // action is not prevented. see #1238\n                                //\n                                // IE 9 is not affected because it doesn't fire a submit event and try to do a full\n                                // page reload if the form was destroyed by submission of the form via a click handler\n                                // on a button in the form. Looks like an IE9 specific bug.\n                                var preventDefaultListener = function(event) {\n                                    event.preventDefault\n                                        ? event.preventDefault()\n                                        : event.returnValue = false; // IE\n                                };\n\n                                addEventListenerFn(formElement[0], 'submit', preventDefaultListener);\n\n                                // unregister the preventDefault listener so that we don't not leak memory but in a\n                                // way that will achieve the prevention of the default action.\n                                formElement.bind('$destroy', function() {\n                                    $timeout(function() {\n                                        removeEventListenerFn(formElement[0], 'submit', preventDefaultListener);\n                                    }, 0, false);\n                                });\n                            }\n\n                            var parentFormCtrl = formElement.parent().controller('form'),\n                                alias = attr.name || attr.ngForm;\n\n                            if (alias) {\n                                scope[alias] = controller;\n                            }\n                            if (parentFormCtrl) {\n                                formElement.bind('$destroy', function() {\n                                    parentFormCtrl.$removeControl(controller);\n                                    if (alias) {\n                                        scope[alias] = undefined;\n                                    }\n                                    extend(controller, nullFormCtrl); //stop propagating child destruction handlers upwards\n                                });\n                            }\n                        }\n                    };\n                }\n            };\n\n            return isNgForm ? extend(copy(formDirective), {restrict: 'EAC'}) : formDirective;\n        }];\n    };\n\n    var formDirective = formDirectiveFactory();\n    var ngFormDirective = formDirectiveFactory(true);\n\n    var URL_REGEXP = /^(ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?$/;\n    var EMAIL_REGEXP = /^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,4}$/;\n    var NUMBER_REGEXP = /^\\s*(\\-|\\+)?(\\d+|(\\d*(\\.\\d*)))\\s*$/;\n\n    var inputType = {\n\n        /**\n         * @ngdoc inputType\n         * @name ng.directive:input.text\n         *\n         * @description\n         * Standard HTML text input with angular data binding.\n         *\n         * @param {string} ngModel Assignable angular expression to data-bind to.\n         * @param {string=} name Property name of the form under which the control is published.\n         * @param {string=} required Adds `required` validation error key if the value is not entered.\n         * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to\n         *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of\n         *    `required` when you want to data-bind to the `required` attribute.\n         * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than\n         *    minlength.\n         * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than\n         *    maxlength.\n         * @param {string=} ngPattern Sets `pattern` validation error key if the value does not match the\n         *    RegExp pattern expression. Expected value is `/regexp/` for inline patterns or `regexp` for\n         *    patterns defined as scope expressions.\n         * @param {string=} ngChange Angular expression to be executed when input changes due to user\n         *    interaction with the input element.\n         *\n         * @example\n         <doc:example>\n         <doc:source>\n         <script>\n         function Ctrl($scope) {\n             $scope.text = 'guest';\n             $scope.word = /^\\w*$/;\n           }\n         </script>\n         <form name=\"myForm\" ng-controller=\"Ctrl\">\n         Single word: <input type=\"text\" name=\"input\" ng-model=\"text\"\n         ng-pattern=\"word\" required>\n         <span class=\"error\" ng-show=\"myForm.input.$error.required\">\n         Required!</span>\n         <span class=\"error\" ng-show=\"myForm.input.$error.pattern\">\n         Single word only!</span>\n\n         <tt>text = {{text}}</tt><br/>\n         <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>\n         <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>\n         <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>\n         <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>\n         </form>\n         </doc:source>\n         <doc:scenario>\n         it('should initialize to model', function() {\n            expect(binding('text')).toEqual('guest');\n            expect(binding('myForm.input.$valid')).toEqual('true');\n          });\n\n         it('should be invalid if empty', function() {\n            input('text').enter('');\n            expect(binding('text')).toEqual('');\n            expect(binding('myForm.input.$valid')).toEqual('false');\n          });\n\n         it('should be invalid if multi word', function() {\n            input('text').enter('hello world');\n            expect(binding('myForm.input.$valid')).toEqual('false');\n          });\n         </doc:scenario>\n         </doc:example>\n         */\n        'text': textInputType,\n\n\n        /**\n         * @ngdoc inputType\n         * @name ng.directive:input.number\n         *\n         * @description\n         * Text input with number validation and transformation. Sets the `number` validation\n         * error if not a valid number.\n         *\n         * @param {string} ngModel Assignable angular expression to data-bind to.\n         * @param {string=} name Property name of the form under which the control is published.\n         * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.\n         * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.\n         * @param {string=} required Sets `required` validation error key if the value is not entered.\n         * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to\n         *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of\n         *    `required` when you want to data-bind to the `required` attribute.\n         * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than\n         *    minlength.\n         * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than\n         *    maxlength.\n         * @param {string=} ngPattern Sets `pattern` validation error key if the value does not match the\n         *    RegExp pattern expression. Expected value is `/regexp/` for inline patterns or `regexp` for\n         *    patterns defined as scope expressions.\n         * @param {string=} ngChange Angular expression to be executed when input changes due to user\n         *    interaction with the input element.\n         *\n         * @example\n         <doc:example>\n         <doc:source>\n         <script>\n         function Ctrl($scope) {\n             $scope.value = 12;\n           }\n         </script>\n         <form name=\"myForm\" ng-controller=\"Ctrl\">\n         Number: <input type=\"number\" name=\"input\" ng-model=\"value\"\n         min=\"0\" max=\"99\" required>\n         <span class=\"error\" ng-show=\"myForm.list.$error.required\">\n         Required!</span>\n         <span class=\"error\" ng-show=\"myForm.list.$error.number\">\n         Not valid number!</span>\n         <tt>value = {{value}}</tt><br/>\n         <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>\n         <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>\n         <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>\n         <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>\n         </form>\n         </doc:source>\n         <doc:scenario>\n         it('should initialize to model', function() {\n           expect(binding('value')).toEqual('12');\n           expect(binding('myForm.input.$valid')).toEqual('true');\n          });\n\n         it('should be invalid if empty', function() {\n           input('value').enter('');\n           expect(binding('value')).toEqual('');\n           expect(binding('myForm.input.$valid')).toEqual('false');\n          });\n\n         it('should be invalid if over max', function() {\n           input('value').enter('123');\n           expect(binding('value')).toEqual('');\n           expect(binding('myForm.input.$valid')).toEqual('false');\n          });\n         </doc:scenario>\n         </doc:example>\n         */\n        'number': numberInputType,\n\n\n        /**\n         * @ngdoc inputType\n         * @name ng.directive:input.url\n         *\n         * @description\n         * Text input with URL validation. Sets the `url` validation error key if the content is not a\n         * valid URL.\n         *\n         * @param {string} ngModel Assignable angular expression to data-bind to.\n         * @param {string=} name Property name of the form under which the control is published.\n         * @param {string=} required Sets `required` validation error key if the value is not entered.\n         * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to\n         *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of\n         *    `required` when you want to data-bind to the `required` attribute.\n         * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than\n         *    minlength.\n         * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than\n         *    maxlength.\n         * @param {string=} ngPattern Sets `pattern` validation error key if the value does not match the\n         *    RegExp pattern expression. Expected value is `/regexp/` for inline patterns or `regexp` for\n         *    patterns defined as scope expressions.\n         * @param {string=} ngChange Angular expression to be executed when input changes due to user\n         *    interaction with the input element.\n         *\n         * @example\n         <doc:example>\n         <doc:source>\n         <script>\n         function Ctrl($scope) {\n             $scope.text = 'http://google.com';\n           }\n         </script>\n         <form name=\"myForm\" ng-controller=\"Ctrl\">\n         URL: <input type=\"url\" name=\"input\" ng-model=\"text\" required>\n         <span class=\"error\" ng-show=\"myForm.input.$error.required\">\n         Required!</span>\n         <span class=\"error\" ng-show=\"myForm.input.$error.url\">\n         Not valid url!</span>\n         <tt>text = {{text}}</tt><br/>\n         <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>\n         <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>\n         <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>\n         <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>\n         <tt>myForm.$error.url = {{!!myForm.$error.url}}</tt><br/>\n         </form>\n         </doc:source>\n         <doc:scenario>\n         it('should initialize to model', function() {\n            expect(binding('text')).toEqual('http://google.com');\n            expect(binding('myForm.input.$valid')).toEqual('true');\n          });\n\n         it('should be invalid if empty', function() {\n            input('text').enter('');\n            expect(binding('text')).toEqual('');\n            expect(binding('myForm.input.$valid')).toEqual('false');\n          });\n\n         it('should be invalid if not url', function() {\n            input('text').enter('xxx');\n            expect(binding('myForm.input.$valid')).toEqual('false');\n          });\n         </doc:scenario>\n         </doc:example>\n         */\n        'url': urlInputType,\n\n\n        /**\n         * @ngdoc inputType\n         * @name ng.directive:input.email\n         *\n         * @description\n         * Text input with email validation. Sets the `email` validation error key if not a valid email\n         * address.\n         *\n         * @param {string} ngModel Assignable angular expression to data-bind to.\n         * @param {string=} name Property name of the form under which the control is published.\n         * @param {string=} required Sets `required` validation error key if the value is not entered.\n         * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to\n         *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of\n         *    `required` when you want to data-bind to the `required` attribute.\n         * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than\n         *    minlength.\n         * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than\n         *    maxlength.\n         * @param {string=} ngPattern Sets `pattern` validation error key if the value does not match the\n         *    RegExp pattern expression. Expected value is `/regexp/` for inline patterns or `regexp` for\n         *    patterns defined as scope expressions.\n         *\n         * @example\n         <doc:example>\n         <doc:source>\n         <script>\n         function Ctrl($scope) {\n             $scope.text = 'me@example.com';\n         }\n         </script>\n         <form name=\"myForm\" ng-controller=\"Ctrl\">\n         Email: <input type=\"email\" name=\"input\" ng-model=\"text\" required>\n         <span class=\"error\" ng-show=\"myForm.input.$error.required\">\n         Required!</span>\n         <span class=\"error\" ng-show=\"myForm.input.$error.email\">\n         Not valid email!</span>\n         <tt>text = {{text}}</tt><br/>\n         <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>\n         <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>\n         <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>\n         <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>\n         <tt>myForm.$error.email = {{!!myForm.$error.email}}</tt><br/>\n         </form>\n         </doc:source>\n         <doc:scenario>\n         it('should initialize to model', function() {\n            expect(binding('text')).toEqual('me@example.com');\n         expect(binding('myForm.input.$valid')).toEqual('true');\n         });\n\n         it('should be invalid if empty', function() {\n            input('text').enter('');\n            expect(binding('text')).toEqual('');\n            expect(binding('myForm.input.$valid')).toEqual('false');\n          });\n\n         it('should be invalid if not email', function() {\n            input('text').enter('xxx');\n            expect(binding('myForm.input.$valid')).toEqual('false');\n          });\n         </doc:scenario>\n         </doc:example>\n         */\n        'email': emailInputType,\n\n\n        /**\n         * @ngdoc inputType\n         * @name ng.directive:input.radio\n         *\n         * @description\n         * HTML radio button.\n         *\n         * @param {string} ngModel Assignable angular expression to data-bind to.\n         * @param {string} value The value to which the expression should be set when selected.\n         * @param {string=} name Property name of the form under which the control is published.\n         * @param {string=} ngChange Angular expression to be executed when input changes due to user\n         *    interaction with the input element.\n         *\n         * @example\n         <doc:example>\n         <doc:source>\n         <script>\n         function Ctrl($scope) {\n             $scope.color = 'blue';\n           }\n         </script>\n         <form name=\"myForm\" ng-controller=\"Ctrl\">\n         <input type=\"radio\" ng-model=\"color\" value=\"red\">  Red <br/>\n         <input type=\"radio\" ng-model=\"color\" value=\"green\"> Green <br/>\n         <input type=\"radio\" ng-model=\"color\" value=\"blue\"> Blue <br/>\n         <tt>color = {{color}}</tt><br/>\n         </form>\n         </doc:source>\n         <doc:scenario>\n         it('should change state', function() {\n            expect(binding('color')).toEqual('blue');\n\n            input('color').select('red');\n            expect(binding('color')).toEqual('red');\n          });\n         </doc:scenario>\n         </doc:example>\n         */\n        'radio': radioInputType,\n\n\n        /**\n         * @ngdoc inputType\n         * @name ng.directive:input.checkbox\n         *\n         * @description\n         * HTML checkbox.\n         *\n         * @param {string} ngModel Assignable angular expression to data-bind to.\n         * @param {string=} name Property name of the form under which the control is published.\n         * @param {string=} ngTrueValue The value to which the expression should be set when selected.\n         * @param {string=} ngFalseValue The value to which the expression should be set when not selected.\n         * @param {string=} ngChange Angular expression to be executed when input changes due to user\n         *    interaction with the input element.\n         *\n         * @example\n         <doc:example>\n         <doc:source>\n         <script>\n         function Ctrl($scope) {\n             $scope.value1 = true;\n             $scope.value2 = 'YES'\n           }\n         </script>\n         <form name=\"myForm\" ng-controller=\"Ctrl\">\n         Value1: <input type=\"checkbox\" ng-model=\"value1\"> <br/>\n         Value2: <input type=\"checkbox\" ng-model=\"value2\"\n         ng-true-value=\"YES\" ng-false-value=\"NO\"> <br/>\n         <tt>value1 = {{value1}}</tt><br/>\n         <tt>value2 = {{value2}}</tt><br/>\n         </form>\n         </doc:source>\n         <doc:scenario>\n         it('should change state', function() {\n            expect(binding('value1')).toEqual('true');\n            expect(binding('value2')).toEqual('YES');\n\n            input('value1').check();\n            input('value2').check();\n            expect(binding('value1')).toEqual('false');\n            expect(binding('value2')).toEqual('NO');\n          });\n         </doc:scenario>\n         </doc:example>\n         */\n        'checkbox': checkboxInputType,\n\n        'hidden': noop,\n        'button': noop,\n        'submit': noop,\n        'reset': noop\n    };\n\n\n    function isEmpty(value) {\n        return isUndefined(value) || value === '' || value === null || value !== value;\n    }\n\n\n    function textInputType(scope, element, attr, ctrl, $sniffer, $browser) {\n\n        var listener = function() {\n            var value = trim(element.val());\n\n            if (ctrl.$viewValue !== value) {\n                scope.$apply(function() {\n                    ctrl.$setViewValue(value);\n                });\n            }\n        };\n\n        // if the browser does support \"input\" event, we are fine - except on IE9 which doesn't fire the\n        // input event on backspace, delete or cut\n        if ($sniffer.hasEvent('input')) {\n            element.bind('input', listener);\n        } else {\n            var timeout;\n\n            var deferListener = function() {\n                if (!timeout) {\n                    timeout = $browser.defer(function() {\n                        listener();\n                        timeout = null;\n                    });\n                }\n            };\n\n            element.bind('keydown', function(event) {\n                var key = event.keyCode;\n\n                // ignore\n                //    command            modifiers                   arrows\n                if (key === 91 || (15 < key && key < 19) || (37 <= key && key <= 40)) return;\n\n                deferListener();\n            });\n\n            // if user paste into input using mouse, we need \"change\" event to catch it\n            element.bind('change', listener);\n\n            // if user modifies input value using context menu in IE, we need \"paste\" and \"cut\" events to catch it\n            if ($sniffer.hasEvent('paste')) {\n                element.bind('paste cut', deferListener);\n            }\n        }\n\n\n        ctrl.$render = function() {\n            element.val(isEmpty(ctrl.$viewValue) ? '' : ctrl.$viewValue);\n        };\n\n        // pattern validator\n        var pattern = attr.ngPattern,\n            patternValidator;\n\n        var validate = function(regexp, value) {\n            if (isEmpty(value) || regexp.test(value)) {\n                ctrl.$setValidity('pattern', true);\n                return value;\n            } else {\n                ctrl.$setValidity('pattern', false);\n                return undefined;\n            }\n        };\n\n        if (pattern) {\n            if (pattern.match(/^\\/(.*)\\/$/)) {\n                pattern = new RegExp(pattern.substr(1, pattern.length - 2));\n                patternValidator = function(value) {\n                    return validate(pattern, value)\n                };\n            } else {\n                patternValidator = function(value) {\n                    var patternObj = scope.$eval(pattern);\n\n                    if (!patternObj || !patternObj.test) {\n                        throw new Error('Expected ' + pattern + ' to be a RegExp but was ' + patternObj);\n                    }\n                    return validate(patternObj, value);\n                };\n            }\n\n            ctrl.$formatters.push(patternValidator);\n            ctrl.$parsers.push(patternValidator);\n        }\n\n        // min length validator\n        if (attr.ngMinlength) {\n            var minlength = int(attr.ngMinlength);\n            var minLengthValidator = function(value) {\n                if (!isEmpty(value) && value.length < minlength) {\n                    ctrl.$setValidity('minlength', false);\n                    return undefined;\n                } else {\n                    ctrl.$setValidity('minlength', true);\n                    return value;\n                }\n            };\n\n            ctrl.$parsers.push(minLengthValidator);\n            ctrl.$formatters.push(minLengthValidator);\n        }\n\n        // max length validator\n        if (attr.ngMaxlength) {\n            var maxlength = int(attr.ngMaxlength);\n            var maxLengthValidator = function(value) {\n                if (!isEmpty(value) && value.length > maxlength) {\n                    ctrl.$setValidity('maxlength', false);\n                    return undefined;\n                } else {\n                    ctrl.$setValidity('maxlength', true);\n                    return value;\n                }\n            };\n\n            ctrl.$parsers.push(maxLengthValidator);\n            ctrl.$formatters.push(maxLengthValidator);\n        }\n    }\n\n    function numberInputType(scope, element, attr, ctrl, $sniffer, $browser) {\n        textInputType(scope, element, attr, ctrl, $sniffer, $browser);\n\n        ctrl.$parsers.push(function(value) {\n            var empty = isEmpty(value);\n            if (empty || NUMBER_REGEXP.test(value)) {\n                ctrl.$setValidity('number', true);\n                return value === '' ? null : (empty ? value : parseFloat(value));\n            } else {\n                ctrl.$setValidity('number', false);\n                return undefined;\n            }\n        });\n\n        ctrl.$formatters.push(function(value) {\n            return isEmpty(value) ? '' : '' + value;\n        });\n\n        if (attr.min) {\n            var min = parseFloat(attr.min);\n            var minValidator = function(value) {\n                if (!isEmpty(value) && value < min) {\n                    ctrl.$setValidity('min', false);\n                    return undefined;\n                } else {\n                    ctrl.$setValidity('min', true);\n                    return value;\n                }\n            };\n\n            ctrl.$parsers.push(minValidator);\n            ctrl.$formatters.push(minValidator);\n        }\n\n        if (attr.max) {\n            var max = parseFloat(attr.max);\n            var maxValidator = function(value) {\n                if (!isEmpty(value) && value > max) {\n                    ctrl.$setValidity('max', false);\n                    return undefined;\n                } else {\n                    ctrl.$setValidity('max', true);\n                    return value;\n                }\n            };\n\n            ctrl.$parsers.push(maxValidator);\n            ctrl.$formatters.push(maxValidator);\n        }\n\n        ctrl.$formatters.push(function(value) {\n\n            if (isEmpty(value) || isNumber(value)) {\n                ctrl.$setValidity('number', true);\n                return value;\n            } else {\n                ctrl.$setValidity('number', false);\n                return undefined;\n            }\n        });\n    }\n\n    function urlInputType(scope, element, attr, ctrl, $sniffer, $browser) {\n        textInputType(scope, element, attr, ctrl, $sniffer, $browser);\n\n        var urlValidator = function(value) {\n            if (isEmpty(value) || URL_REGEXP.test(value)) {\n                ctrl.$setValidity('url', true);\n                return value;\n            } else {\n                ctrl.$setValidity('url', false);\n                return undefined;\n            }\n        };\n\n        ctrl.$formatters.push(urlValidator);\n        ctrl.$parsers.push(urlValidator);\n    }\n\n    function emailInputType(scope, element, attr, ctrl, $sniffer, $browser) {\n        textInputType(scope, element, attr, ctrl, $sniffer, $browser);\n\n        var emailValidator = function(value) {\n            if (isEmpty(value) || EMAIL_REGEXP.test(value)) {\n                ctrl.$setValidity('email', true);\n                return value;\n            } else {\n                ctrl.$setValidity('email', false);\n                return undefined;\n            }\n        };\n\n        ctrl.$formatters.push(emailValidator);\n        ctrl.$parsers.push(emailValidator);\n    }\n\n    function radioInputType(scope, element, attr, ctrl) {\n        // make the name unique, if not defined\n        if (isUndefined(attr.name)) {\n            element.attr('name', nextUid());\n        }\n\n        element.bind('click', function() {\n            if (element[0].checked) {\n                scope.$apply(function() {\n                    ctrl.$setViewValue(attr.value);\n                });\n            }\n        });\n\n        ctrl.$render = function() {\n            var value = attr.value;\n            element[0].checked = (value == ctrl.$viewValue);\n        };\n\n        attr.$observe('value', ctrl.$render);\n    }\n\n    function checkboxInputType(scope, element, attr, ctrl) {\n        var trueValue = attr.ngTrueValue,\n            falseValue = attr.ngFalseValue;\n\n        if (!isString(trueValue)) trueValue = true;\n        if (!isString(falseValue)) falseValue = false;\n\n        element.bind('click', function() {\n            scope.$apply(function() {\n                ctrl.$setViewValue(element[0].checked);\n            });\n        });\n\n        ctrl.$render = function() {\n            element[0].checked = ctrl.$viewValue;\n        };\n\n        ctrl.$formatters.push(function(value) {\n            return value === trueValue;\n        });\n\n        ctrl.$parsers.push(function(value) {\n            return value ? trueValue : falseValue;\n        });\n    }\n\n\n    /**\n     * @ngdoc directive\n     * @name ng.directive:textarea\n     * @restrict E\n     *\n     * @description\n     * HTML textarea element control with angular data-binding. The data-binding and validation\n     * properties of this element are exactly the same as those of the\n     * {@link ng.directive:input input element}.\n     *\n     * @param {string} ngModel Assignable angular expression to data-bind to.\n     * @param {string=} name Property name of the form under which the control is published.\n     * @param {string=} required Sets `required` validation error key if the value is not entered.\n     * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to\n     *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of\n     *    `required` when you want to data-bind to the `required` attribute.\n     * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than\n     *    minlength.\n     * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than\n     *    maxlength.\n     * @param {string=} ngPattern Sets `pattern` validation error key if the value does not match the\n     *    RegExp pattern expression. Expected value is `/regexp/` for inline patterns or `regexp` for\n     *    patterns defined as scope expressions.\n     * @param {string=} ngChange Angular expression to be executed when input changes due to user\n     *    interaction with the input element.\n     */\n\n\n    /**\n     * @ngdoc directive\n     * @name ng.directive:input\n     * @restrict E\n     *\n     * @description\n     * HTML input element control with angular data-binding. Input control follows HTML5 input types\n     * and polyfills the HTML5 validation behavior for older browsers.\n     *\n     * @param {string} ngModel Assignable angular expression to data-bind to.\n     * @param {string=} name Property name of the form under which the control is published.\n     * @param {string=} required Sets `required` validation error key if the value is not entered.\n     * @param {boolean=} ngRequired Sets `required` attribute if set to true\n     * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than\n     *    minlength.\n     * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than\n     *    maxlength.\n     * @param {string=} ngPattern Sets `pattern` validation error key if the value does not match the\n     *    RegExp pattern expression. Expected value is `/regexp/` for inline patterns or `regexp` for\n     *    patterns defined as scope expressions.\n     * @param {string=} ngChange Angular expression to be executed when input changes due to user\n     *    interaction with the input element.\n     *\n     * @example\n     <doc:example>\n     <doc:source>\n     <script>\n     function Ctrl($scope) {\n           $scope.user = {name: 'guest', last: 'visitor'};\n         }\n     </script>\n     <div ng-controller=\"Ctrl\">\n     <form name=\"myForm\">\n     User name: <input type=\"text\" name=\"userName\" ng-model=\"user.name\" required>\n     <span class=\"error\" ng-show=\"myForm.userName.$error.required\">\n     Required!</span><br>\n     Last name: <input type=\"text\" name=\"lastName\" ng-model=\"user.last\"\n     ng-minlength=\"3\" ng-maxlength=\"10\">\n     <span class=\"error\" ng-show=\"myForm.lastName.$error.minlength\">\n     Too short!</span>\n     <span class=\"error\" ng-show=\"myForm.lastName.$error.maxlength\">\n     Too long!</span><br>\n     </form>\n     <hr>\n     <tt>user = {{user}}</tt><br/>\n     <tt>myForm.userName.$valid = {{myForm.userName.$valid}}</tt><br>\n     <tt>myForm.userName.$error = {{myForm.userName.$error}}</tt><br>\n     <tt>myForm.lastName.$valid = {{myForm.lastName.$valid}}</tt><br>\n     <tt>myForm.lastName.$error = {{myForm.lastName.$error}}</tt><br>\n     <tt>myForm.$valid = {{myForm.$valid}}</tt><br>\n     <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br>\n     <tt>myForm.$error.minlength = {{!!myForm.$error.minlength}}</tt><br>\n     <tt>myForm.$error.maxlength = {{!!myForm.$error.maxlength}}</tt><br>\n     </div>\n     </doc:source>\n     <doc:scenario>\n     it('should initialize to model', function() {\n          expect(binding('user')).toEqual('{\"name\":\"guest\",\"last\":\"visitor\"}');\n          expect(binding('myForm.userName.$valid')).toEqual('true');\n          expect(binding('myForm.$valid')).toEqual('true');\n        });\n\n     it('should be invalid if empty when required', function() {\n          input('user.name').enter('');\n          expect(binding('user')).toEqual('{\"last\":\"visitor\"}');\n          expect(binding('myForm.userName.$valid')).toEqual('false');\n          expect(binding('myForm.$valid')).toEqual('false');\n        });\n\n     it('should be valid if empty when min length is set', function() {\n          input('user.last').enter('');\n          expect(binding('user')).toEqual('{\"name\":\"guest\",\"last\":\"\"}');\n          expect(binding('myForm.lastName.$valid')).toEqual('true');\n          expect(binding('myForm.$valid')).toEqual('true');\n        });\n\n     it('should be invalid if less than required min length', function() {\n          input('user.last').enter('xx');\n          expect(binding('user')).toEqual('{\"name\":\"guest\"}');\n          expect(binding('myForm.lastName.$valid')).toEqual('false');\n          expect(binding('myForm.lastName.$error')).toMatch(/minlength/);\n          expect(binding('myForm.$valid')).toEqual('false');\n        });\n\n     it('should be invalid if longer than max length', function() {\n          input('user.last').enter('some ridiculously long name');\n          expect(binding('user'))\n            .toEqual('{\"name\":\"guest\"}');\n          expect(binding('myForm.lastName.$valid')).toEqual('false');\n          expect(binding('myForm.lastName.$error')).toMatch(/maxlength/);\n          expect(binding('myForm.$valid')).toEqual('false');\n        });\n     </doc:scenario>\n     </doc:example>\n     */\n    var inputDirective = ['$browser', '$sniffer', function($browser, $sniffer) {\n        return {\n            restrict: 'E',\n            require: '?ngModel',\n            link: function(scope, element, attr, ctrl) {\n                if (ctrl) {\n                    (inputType[lowercase(attr.type)] || inputType.text)(scope, element, attr, ctrl, $sniffer,\n                        $browser);\n                }\n            }\n        };\n    }];\n\n    var VALID_CLASS = 'ng-valid',\n        INVALID_CLASS = 'ng-invalid',\n        PRISTINE_CLASS = 'ng-pristine',\n        DIRTY_CLASS = 'ng-dirty';\n\n    /**\n     * @ngdoc object\n     * @name ng.directive:ngModel.NgModelController\n     *\n     * @property {string} $viewValue Actual string value in the view.\n     * @property {*} $modelValue The value in the model, that the control is bound to.\n     * @property {Array.<Function>} $parsers Whenever the control reads value from the DOM, it executes\n     *     all of these functions to sanitize / convert the value as well as validate.\n     *\n     * @property {Array.<Function>} $formatters Whenever the model value changes, it executes all of\n     *     these functions to convert the value as well as validate.\n     *\n     * @property {Object} $error An bject hash with all errors as keys.\n     *\n     * @property {boolean} $pristine True if user has not interacted with the control yet.\n     * @property {boolean} $dirty True if user has already interacted with the control.\n     * @property {boolean} $valid True if there is no error.\n     * @property {boolean} $invalid True if at least one error on the control.\n     *\n     * @description\n     *\n     * `NgModelController` provides API for the `ng-model` directive. The controller contains\n     * services for data-binding, validation, CSS update, value formatting and parsing. It\n     * specifically does not contain any logic which deals with DOM rendering or listening to\n     * DOM events. The `NgModelController` is meant to be extended by other directives where, the\n     * directive provides DOM manipulation and the `NgModelController` provides the data-binding.\n     *\n     * This example shows how to use `NgModelController` with a custom control to achieve\n     * data-binding. Notice how different directives (`contenteditable`, `ng-model`, and `required`)\n     * collaborate together to achieve the desired result.\n     *\n     * <example module=\"customControl\">\n     <file name=\"style.css\">\n     [contenteditable] {\n        border: 1px solid black;\n        background-color: white;\n        min-height: 20px;\n      }\n\n     .ng-invalid {\n        border: 1px solid red;\n      }\n\n     </file>\n     <file name=\"script.js\">\n     angular.module('customControl', []).\n     directive('contenteditable', function() {\n          return {\n            restrict: 'A', // only activate on element attribute\n            require: '?ngModel', // get a hold of NgModelController\n            link: function(scope, element, attrs, ngModel) {\n              if(!ngModel) return; // do nothing if no ng-model\n\n              // Specify how UI should be updated\n              ngModel.$render = function() {\n                element.html(ngModel.$viewValue || '');\n              };\n\n              // Listen for change events to enable binding\n              element.bind('blur keyup change', function() {\n                scope.$apply(read);\n              });\n              read(); // initialize\n\n              // Write data to the model\n              function read() {\n                ngModel.$setViewValue(element.html());\n              }\n            }\n          };\n        });\n     </file>\n     <file name=\"index.html\">\n     <form name=\"myForm\">\n     <div contenteditable\n     name=\"myWidget\" ng-model=\"userContent\"\n     required>Change me!</div>\n     <span ng-show=\"myForm.myWidget.$error.required\">Required!</span>\n     <hr>\n     <textarea ng-model=\"userContent\"></textarea>\n     </form>\n     </file>\n     <file name=\"scenario.js\">\n     it('should data-bind and become invalid', function() {\n        var contentEditable = element('[contenteditable]');\n\n        expect(contentEditable.text()).toEqual('Change me!');\n        input('userContent').enter('');\n        expect(contentEditable.text()).toEqual('');\n        expect(contentEditable.prop('className')).toMatch(/ng-invalid-required/);\n      });\n     </file>\n     * </example>\n     *\n     */\n    var NgModelController = ['$scope', '$exceptionHandler', '$attrs', '$element', '$parse',\n        function($scope, $exceptionHandler, $attr, $element, $parse) {\n            this.$viewValue = Number.NaN;\n            this.$modelValue = Number.NaN;\n            this.$parsers = [];\n            this.$formatters = [];\n            this.$viewChangeListeners = [];\n            this.$pristine = true;\n            this.$dirty = false;\n            this.$valid = true;\n            this.$invalid = false;\n            this.$name = $attr.name;\n\n            var ngModelGet = $parse($attr.ngModel),\n                ngModelSet = ngModelGet.assign;\n\n            if (!ngModelSet) {\n                throw Error(NON_ASSIGNABLE_MODEL_EXPRESSION + $attr.ngModel +\n                    ' (' + startingTag($element) + ')');\n            }\n\n            /**\n             * @ngdoc function\n             * @name ng.directive:ngModel.NgModelController#$render\n             * @methodOf ng.directive:ngModel.NgModelController\n             *\n             * @description\n             * Called when the view needs to be updated. It is expected that the user of the ng-model\n             * directive will implement this method.\n             */\n            this.$render = noop;\n\n            var parentForm = $element.inheritedData('$formController') || nullFormCtrl,\n                invalidCount = 0, // used to easily determine if we are valid\n                $error = this.$error = {}; // keep invalid keys here\n\n\n            // Setup initial state of the control\n            $element.addClass(PRISTINE_CLASS);\n            toggleValidCss(true);\n\n            // convenience method for easy toggling of classes\n            function toggleValidCss(isValid, validationErrorKey) {\n                validationErrorKey = validationErrorKey ? '-' + snake_case(validationErrorKey, '-') : '';\n                $element.\n                    removeClass((isValid ? INVALID_CLASS : VALID_CLASS) + validationErrorKey).\n                    addClass((isValid ? VALID_CLASS : INVALID_CLASS) + validationErrorKey);\n            }\n\n            /**\n             * @ngdoc function\n             * @name ng.directive:ngModel.NgModelController#$setValidity\n             * @methodOf ng.directive:ngModel.NgModelController\n             *\n             * @description\n             * Change the validity state, and notifies the form when the control changes validity. (i.e. it\n             * does not notify form if given validator is already marked as invalid).\n             *\n             * This method should be called by validators - i.e. the parser or formatter functions.\n             *\n             * @param {string} validationErrorKey Name of the validator. the `validationErrorKey` will assign\n             *        to `$error[validationErrorKey]=isValid` so that it is available for data-binding.\n             *        The `validationErrorKey` should be in camelCase and will get converted into dash-case\n             *        for class name. Example: `myError` will result in `ng-valid-my-error` and `ng-invalid-my-error`\n             *        class and can be bound to as  `{{someForm.someControl.$error.myError}}` .\n             * @param {boolean} isValid Whether the current state is valid (true) or invalid (false).\n             */\n            this.$setValidity = function(validationErrorKey, isValid) {\n                if ($error[validationErrorKey] === !isValid) return;\n\n                if (isValid) {\n                    if ($error[validationErrorKey]) invalidCount--;\n                    if (!invalidCount) {\n                        toggleValidCss(true);\n                        this.$valid = true;\n                        this.$invalid = false;\n                    }\n                } else {\n                    toggleValidCss(false);\n                    this.$invalid = true;\n                    this.$valid = false;\n                    invalidCount++;\n                }\n\n                $error[validationErrorKey] = !isValid;\n                toggleValidCss(isValid, validationErrorKey);\n\n                parentForm.$setValidity(validationErrorKey, isValid, this);\n            };\n\n\n            /**\n             * @ngdoc function\n             * @name ng.directive:ngModel.NgModelController#$setViewValue\n             * @methodOf ng.directive:ngModel.NgModelController\n             *\n             * @description\n             * Read a value from view.\n             *\n             * This method should be called from within a DOM event handler.\n             * For example {@link ng.directive:input input} or\n             * {@link ng.directive:select select} directives call it.\n             *\n             * It internally calls all `parsers` and if resulted value is valid, updates the model and\n             * calls all registered change listeners.\n             *\n             * @param {string} value Value from the view.\n             */\n            this.$setViewValue = function(value) {\n                this.$viewValue = value;\n\n                // change to dirty\n                if (this.$pristine) {\n                    this.$dirty = true;\n                    this.$pristine = false;\n                    $element.removeClass(PRISTINE_CLASS).addClass(DIRTY_CLASS);\n                    parentForm.$setDirty();\n                }\n\n                forEach(this.$parsers, function(fn) {\n                    value = fn(value);\n                });\n\n                if (this.$modelValue !== value) {\n                    this.$modelValue = value;\n                    ngModelSet($scope, value);\n                    forEach(this.$viewChangeListeners, function(listener) {\n                        try {\n                            listener();\n                        } catch(e) {\n                            $exceptionHandler(e);\n                        }\n                    })\n                }\n            };\n\n            // model -> value\n            var ctrl = this;\n\n            $scope.$watch(function ngModelWatch() {\n                var value = ngModelGet($scope);\n\n                // if scope model value and ngModel value are out of sync\n                if (ctrl.$modelValue !== value) {\n\n                    var formatters = ctrl.$formatters,\n                        idx = formatters.length;\n\n                    ctrl.$modelValue = value;\n                    while(idx--) {\n                        value = formatters[idx](value);\n                    }\n\n                    if (ctrl.$viewValue !== value) {\n                        ctrl.$viewValue = value;\n                        ctrl.$render();\n                    }\n                }\n            });\n        }];\n\n\n    /**\n     * @ngdoc directive\n     * @name ng.directive:ngModel\n     *\n     * @element input\n     *\n     * @description\n     * Is directive that tells Angular to do two-way data binding. It works together with `input`,\n     * `select`, `textarea`. You can easily write your own directives to use `ngModel` as well.\n     *\n     * `ngModel` is responsible for:\n     *\n     * - binding the view into the model, which other directives such as `input`, `textarea` or `select`\n     *   require,\n     * - providing validation behavior (i.e. required, number, email, url),\n     * - keeping state of the control (valid/invalid, dirty/pristine, validation errors),\n     * - setting related css class onto the element (`ng-valid`, `ng-invalid`, `ng-dirty`, `ng-pristine`),\n     * - register the control with parent {@link ng.directive:form form}.\n     *\n     * For basic examples, how to use `ngModel`, see:\n     *\n     *  - {@link ng.directive:input input}\n     *    - {@link ng.directive:input.text text}\n     *    - {@link ng.directive:input.checkbox checkbox}\n     *    - {@link ng.directive:input.radio radio}\n     *    - {@link ng.directive:input.number number}\n     *    - {@link ng.directive:input.email email}\n     *    - {@link ng.directive:input.url url}\n     *  - {@link ng.directive:select select}\n     *  - {@link ng.directive:textarea textarea}\n     *\n     */\n    var ngModelDirective = function() {\n        return {\n            require: ['ngModel', '^?form'],\n            controller: NgModelController,\n            link: function(scope, element, attr, ctrls) {\n                // notify others, especially parent forms\n\n                var modelCtrl = ctrls[0],\n                    formCtrl = ctrls[1] || nullFormCtrl;\n\n                formCtrl.$addControl(modelCtrl);\n\n                element.bind('$destroy', function() {\n                    formCtrl.$removeControl(modelCtrl);\n                });\n            }\n        };\n    };\n\n\n    /**\n     * @ngdoc directive\n     * @name ng.directive:ngChange\n     * @restrict E\n     *\n     * @description\n     * Evaluate given expression when user changes the input.\n     * The expression is not evaluated when the value change is coming from the model.\n     *\n     * Note, this directive requires `ngModel` to be present.\n     *\n     * @element input\n     *\n     * @example\n     * <doc:example>\n     *   <doc:source>\n     *     <script>\n     *       function Controller($scope) {\n *         $scope.counter = 0;\n *         $scope.change = function() {\n *           $scope.counter++;\n *         };\n *       }\n     *     </script>\n     *     <div ng-controller=\"Controller\">\n     *       <input type=\"checkbox\" ng-model=\"confirmed\" ng-change=\"change()\" id=\"ng-change-example1\" />\n     *       <input type=\"checkbox\" ng-model=\"confirmed\" id=\"ng-change-example2\" />\n     *       <label for=\"ng-change-example2\">Confirmed</label><br />\n     *       debug = {{confirmed}}<br />\n     *       counter = {{counter}}\n     *     </div>\n     *   </doc:source>\n     *   <doc:scenario>\n     *     it('should evaluate the expression if changing from view', function() {\n *       expect(binding('counter')).toEqual('0');\n *       element('#ng-change-example1').click();\n *       expect(binding('counter')).toEqual('1');\n *       expect(binding('confirmed')).toEqual('true');\n *     });\n     *\n     *     it('should not evaluate the expression if changing from model', function() {\n *       element('#ng-change-example2').click();\n *       expect(binding('counter')).toEqual('0');\n *       expect(binding('confirmed')).toEqual('true');\n *     });\n     *   </doc:scenario>\n     * </doc:example>\n     */\n    var ngChangeDirective = valueFn({\n        require: 'ngModel',\n        link: function(scope, element, attr, ctrl) {\n            ctrl.$viewChangeListeners.push(function() {\n                scope.$eval(attr.ngChange);\n            });\n        }\n    });\n\n\n    var requiredDirective = function() {\n        return {\n            require: '?ngModel',\n            link: function(scope, elm, attr, ctrl) {\n                if (!ctrl) return;\n                attr.required = true; // force truthy in case we are on non input element\n\n                var validator = function(value) {\n                    if (attr.required && (isEmpty(value) || value === false)) {\n                        ctrl.$setValidity('required', false);\n                        return;\n                    } else {\n                        ctrl.$setValidity('required', true);\n                        return value;\n                    }\n                };\n\n                ctrl.$formatters.push(validator);\n                ctrl.$parsers.unshift(validator);\n\n                attr.$observe('required', function() {\n                    validator(ctrl.$viewValue);\n                });\n            }\n        };\n    };\n\n\n    /**\n     * @ngdoc directive\n     * @name ng.directive:ngList\n     *\n     * @description\n     * Text input that converts between comma-separated string into an array of strings.\n     *\n     * @element input\n     * @param {string=} ngList optional delimiter that should be used to split the value. If\n     *   specified in form `/something/` then the value will be converted into a regular expression.\n     *\n     * @example\n     <doc:example>\n     <doc:source>\n     <script>\n     function Ctrl($scope) {\n           $scope.names = ['igor', 'misko', 'vojta'];\n         }\n     </script>\n     <form name=\"myForm\" ng-controller=\"Ctrl\">\n     List: <input name=\"namesInput\" ng-model=\"names\" ng-list required>\n     <span class=\"error\" ng-show=\"myForm.list.$error.required\">\n     Required!</span>\n     <tt>names = {{names}}</tt><br/>\n     <tt>myForm.namesInput.$valid = {{myForm.namesInput.$valid}}</tt><br/>\n     <tt>myForm.namesInput.$error = {{myForm.namesInput.$error}}</tt><br/>\n     <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>\n     <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>\n     </form>\n     </doc:source>\n     <doc:scenario>\n     it('should initialize to model', function() {\n          expect(binding('names')).toEqual('[\"igor\",\"misko\",\"vojta\"]');\n          expect(binding('myForm.namesInput.$valid')).toEqual('true');\n        });\n\n     it('should be invalid if empty', function() {\n          input('names').enter('');\n          expect(binding('names')).toEqual('[]');\n          expect(binding('myForm.namesInput.$valid')).toEqual('false');\n        });\n     </doc:scenario>\n     </doc:example>\n     */\n    var ngListDirective = function() {\n        return {\n            require: 'ngModel',\n            link: function(scope, element, attr, ctrl) {\n                var match = /\\/(.*)\\//.exec(attr.ngList),\n                    separator = match && new RegExp(match[1]) || attr.ngList || ',';\n\n                var parse = function(viewValue) {\n                    var list = [];\n\n                    if (viewValue) {\n                        forEach(viewValue.split(separator), function(value) {\n                            if (value) list.push(trim(value));\n                        });\n                    }\n\n                    return list;\n                };\n\n                ctrl.$parsers.push(parse);\n                ctrl.$formatters.push(function(value) {\n                    if (isArray(value)) {\n                        return value.join(', ');\n                    }\n\n                    return undefined;\n                });\n            }\n        };\n    };\n\n\n    var CONSTANT_VALUE_REGEXP = /^(true|false|\\d+)$/;\n\n    var ngValueDirective = function() {\n        return {\n            priority: 100,\n            compile: function(tpl, tplAttr) {\n                if (CONSTANT_VALUE_REGEXP.test(tplAttr.ngValue)) {\n                    return function(scope, elm, attr) {\n                        attr.$set('value', scope.$eval(attr.ngValue));\n                    };\n                } else {\n                    return function(scope, elm, attr) {\n                        scope.$watch(attr.ngValue, function valueWatchAction(value) {\n                            attr.$set('value', value, false);\n                        });\n                    };\n                }\n            }\n        };\n    };\n\n    /**\n     * @ngdoc directive\n     * @name ng.directive:ngBind\n     *\n     * @description\n     * The `ngBind` attribute tells Angular to replace the text content of the specified HTML element\n     * with the value of a given expression, and to update the text content when the value of that\n     * expression changes.\n     *\n     * Typically, you don't use `ngBind` directly, but instead you use the double curly markup like\n     * `{{ expression }}` which is similar but less verbose.\n     *\n     * One scenario in which the use of `ngBind` is preferred over `{{ expression }}` binding is when\n     * it's desirable to put bindings into template that is momentarily displayed by the browser in its\n     * raw state before Angular compiles it. Since `ngBind` is an element attribute, it makes the\n     * bindings invisible to the user while the page is loading.\n     *\n     * An alternative solution to this problem would be using the\n     * {@link ng.directive:ngCloak ngCloak} directive.\n     *\n     *\n     * @element ANY\n     * @param {expression} ngBind {@link guide/expression Expression} to evaluate.\n     *\n     * @example\n     * Enter a name in the Live Preview text box; the greeting below the text box changes instantly.\n     <doc:example>\n     <doc:source>\n     <script>\n     function Ctrl($scope) {\n           $scope.name = 'Whirled';\n         }\n     </script>\n     <div ng-controller=\"Ctrl\">\n     Enter name: <input type=\"text\" ng-model=\"name\"><br>\n     Hello <span ng-bind=\"name\"></span>!\n     </div>\n     </doc:source>\n     <doc:scenario>\n     it('should check ng-bind', function() {\n         expect(using('.doc-example-live').binding('name')).toBe('Whirled');\n         using('.doc-example-live').input('name').enter('world');\n         expect(using('.doc-example-live').binding('name')).toBe('world');\n       });\n     </doc:scenario>\n     </doc:example>\n     */\n    var ngBindDirective = ngDirective(function(scope, element, attr) {\n        element.addClass('ng-binding').data('$binding', attr.ngBind);\n        scope.$watch(attr.ngBind, function ngBindWatchAction(value) {\n            element.text(value == undefined ? '' : value);\n        });\n    });\n\n\n    /**\n     * @ngdoc directive\n     * @name ng.directive:ngBindTemplate\n     *\n     * @description\n     * The `ngBindTemplate` directive specifies that the element\n     * text should be replaced with the template in ngBindTemplate.\n     * Unlike ngBind the ngBindTemplate can contain multiple `{{` `}}`\n     * expressions. (This is required since some HTML elements\n     * can not have SPAN elements such as TITLE, or OPTION to name a few.)\n     *\n     * @element ANY\n     * @param {string} ngBindTemplate template of form\n     *   <tt>{{</tt> <tt>expression</tt> <tt>}}</tt> to eval.\n     *\n     * @example\n     * Try it here: enter text in text box and watch the greeting change.\n     <doc:example>\n     <doc:source>\n     <script>\n     function Ctrl($scope) {\n           $scope.salutation = 'Hello';\n           $scope.name = 'World';\n         }\n     </script>\n     <div ng-controller=\"Ctrl\">\n     Salutation: <input type=\"text\" ng-model=\"salutation\"><br>\n     Name: <input type=\"text\" ng-model=\"name\"><br>\n     <pre ng-bind-template=\"{{salutation}} {{name}}!\"></pre>\n     </div>\n     </doc:source>\n     <doc:scenario>\n     it('should check ng-bind', function() {\n         expect(using('.doc-example-live').binding('salutation')).\n           toBe('Hello');\n         expect(using('.doc-example-live').binding('name')).\n           toBe('World');\n         using('.doc-example-live').input('salutation').enter('Greetings');\n         using('.doc-example-live').input('name').enter('user');\n         expect(using('.doc-example-live').binding('salutation')).\n           toBe('Greetings');\n         expect(using('.doc-example-live').binding('name')).\n           toBe('user');\n       });\n     </doc:scenario>\n     </doc:example>\n     */\n    var ngBindTemplateDirective = ['$interpolate', function($interpolate) {\n        return function(scope, element, attr) {\n            // TODO: move this to scenario runner\n            var interpolateFn = $interpolate(element.attr(attr.$attr.ngBindTemplate));\n            element.addClass('ng-binding').data('$binding', interpolateFn);\n            attr.$observe('ngBindTemplate', function(value) {\n                element.text(value);\n            });\n        }\n    }];\n\n\n    /**\n     * @ngdoc directive\n     * @name ng.directive:ngBindHtmlUnsafe\n     *\n     * @description\n     * Creates a binding that will innerHTML the result of evaluating the `expression` into the current\n     * element. *The innerHTML-ed content will not be sanitized!* You should use this directive only if\n     * {@link ngSanitize.directive:ngBindHtml ngBindHtml} directive is too\n     * restrictive and when you absolutely trust the source of the content you are binding to.\n     *\n     * See {@link ngSanitize.$sanitize $sanitize} docs for examples.\n     *\n     * @element ANY\n     * @param {expression} ngBindHtmlUnsafe {@link guide/expression Expression} to evaluate.\n     */\n    var ngBindHtmlUnsafeDirective = [function() {\n        return function(scope, element, attr) {\n            element.addClass('ng-binding').data('$binding', attr.ngBindHtmlUnsafe);\n            scope.$watch(attr.ngBindHtmlUnsafe, function ngBindHtmlUnsafeWatchAction(value) {\n                element.html(value || '');\n            });\n        };\n    }];\n\n    function classDirective(name, selector) {\n        name = 'ngClass' + name;\n        return ngDirective(function(scope, element, attr) {\n            var oldVal = undefined;\n\n            scope.$watch(attr[name], ngClassWatchAction, true);\n\n            attr.$observe('class', function(value) {\n                var ngClass = scope.$eval(attr[name]);\n                ngClassWatchAction(ngClass, ngClass);\n            });\n\n\n            if (name !== 'ngClass') {\n                scope.$watch('$index', function($index, old$index) {\n                    var mod = $index & 1;\n                    if (mod !== old$index & 1) {\n                        if (mod === selector) {\n                            addClass(scope.$eval(attr[name]));\n                        } else {\n                            removeClass(scope.$eval(attr[name]));\n                        }\n                    }\n                });\n            }\n\n\n            function ngClassWatchAction(newVal) {\n                if (selector === true || scope.$index % 2 === selector) {\n                    if (oldVal && !equals(newVal,oldVal)) {\n                        removeClass(oldVal);\n                    }\n                    addClass(newVal);\n                }\n                oldVal = copy(newVal);\n            }\n\n\n            function removeClass(classVal) {\n                if (isObject(classVal) && !isArray(classVal)) {\n                    classVal = map(classVal, function(v, k) { if (v) return k });\n                }\n                element.removeClass(isArray(classVal) ? classVal.join(' ') : classVal);\n            }\n\n\n            function addClass(classVal) {\n                if (isObject(classVal) && !isArray(classVal)) {\n                    classVal = map(classVal, function(v, k) { if (v) return k });\n                }\n                if (classVal) {\n                    element.addClass(isArray(classVal) ? classVal.join(' ') : classVal);\n                }\n            }\n        });\n    }\n\n    /**\n     * @ngdoc directive\n     * @name ng.directive:ngClass\n     *\n     * @description\n     * The `ngClass` allows you to set CSS class on HTML element dynamically by databinding an\n     * expression that represents all classes to be added.\n     *\n     * The directive won't add duplicate classes if a particular class was already set.\n     *\n     * When the expression changes, the previously added classes are removed and only then the\n     * new classes are added.\n     *\n     * @element ANY\n     * @param {expression} ngClass {@link guide/expression Expression} to eval. The result\n     *   of the evaluation can be a string representing space delimited class\n     *   names, an array, or a map of class names to boolean values.\n     *\n     * @example\n     <example>\n     <file name=\"index.html\">\n     <input type=\"button\" value=\"set\" ng-click=\"myVar='my-class'\">\n     <input type=\"button\" value=\"clear\" ng-click=\"myVar=''\">\n     <br>\n     <span ng-class=\"myVar\">Sample Text</span>\n     </file>\n     <file name=\"style.css\">\n     .my-class {\n         color: red;\n       }\n     </file>\n     <file name=\"scenario.js\">\n     it('should check ng-class', function() {\n         expect(element('.doc-example-live span').prop('className')).not().\n           toMatch(/my-class/);\n\n         using('.doc-example-live').element(':button:first').click();\n\n         expect(element('.doc-example-live span').prop('className')).\n           toMatch(/my-class/);\n\n         using('.doc-example-live').element(':button:last').click();\n\n         expect(element('.doc-example-live span').prop('className')).not().\n           toMatch(/my-class/);\n       });\n     </file>\n     </example>\n     */\n    var ngClassDirective = classDirective('', true);\n\n    /**\n     * @ngdoc directive\n     * @name ng.directive:ngClassOdd\n     *\n     * @description\n     * The `ngClassOdd` and `ngClassEven` directives work exactly as\n     * {@link ng.directive:ngClass ngClass}, except it works in\n     * conjunction with `ngRepeat` and takes affect only on odd (even) rows.\n     *\n     * This directive can be applied only within a scope of an\n     * {@link ng.directive:ngRepeat ngRepeat}.\n     *\n     * @element ANY\n     * @param {expression} ngClassOdd {@link guide/expression Expression} to eval. The result\n     *   of the evaluation can be a string representing space delimited class names or an array.\n     *\n     * @example\n     <example>\n     <file name=\"index.html\">\n     <ol ng-init=\"names=['John', 'Mary', 'Cate', 'Suz']\">\n     <li ng-repeat=\"name in names\">\n     <span ng-class-odd=\"'odd'\" ng-class-even=\"'even'\">\n     {{name}}\n     </span>\n     </li>\n     </ol>\n     </file>\n     <file name=\"style.css\">\n     .odd {\n         color: red;\n       }\n     .even {\n         color: blue;\n       }\n     </file>\n     <file name=\"scenario.js\">\n     it('should check ng-class-odd and ng-class-even', function() {\n         expect(element('.doc-example-live li:first span').prop('className')).\n           toMatch(/odd/);\n         expect(element('.doc-example-live li:last span').prop('className')).\n           toMatch(/even/);\n       });\n     </file>\n     </example>\n     */\n    var ngClassOddDirective = classDirective('Odd', 0);\n\n    /**\n     * @ngdoc directive\n     * @name ng.directive:ngClassEven\n     *\n     * @description\n     * The `ngClassOdd` and `ngClassEven` directives work exactly as\n     * {@link ng.directive:ngClass ngClass}, except it works in\n     * conjunction with `ngRepeat` and takes affect only on odd (even) rows.\n     *\n     * This directive can be applied only within a scope of an\n     * {@link ng.directive:ngRepeat ngRepeat}.\n     *\n     * @element ANY\n     * @param {expression} ngClassEven {@link guide/expression Expression} to eval. The\n     *   result of the evaluation can be a string representing space delimited class names or an array.\n     *\n     * @example\n     <example>\n     <file name=\"index.html\">\n     <ol ng-init=\"names=['John', 'Mary', 'Cate', 'Suz']\">\n     <li ng-repeat=\"name in names\">\n     <span ng-class-odd=\"'odd'\" ng-class-even=\"'even'\">\n     {{name}} &nbsp; &nbsp; &nbsp;\n     </span>\n     </li>\n     </ol>\n     </file>\n     <file name=\"style.css\">\n     .odd {\n         color: red;\n       }\n     .even {\n         color: blue;\n       }\n     </file>\n     <file name=\"scenario.js\">\n     it('should check ng-class-odd and ng-class-even', function() {\n         expect(element('.doc-example-live li:first span').prop('className')).\n           toMatch(/odd/);\n         expect(element('.doc-example-live li:last span').prop('className')).\n           toMatch(/even/);\n       });\n     </file>\n     </example>\n     */\n    var ngClassEvenDirective = classDirective('Even', 1);\n\n    /**\n     * @ngdoc directive\n     * @name ng.directive:ngCloak\n     *\n     * @description\n     * The `ngCloak` directive is used to prevent the Angular html template from being briefly\n     * displayed by the browser in its raw (uncompiled) form while your application is loading. Use this\n     * directive to avoid the undesirable flicker effect caused by the html template display.\n     *\n     * The directive can be applied to the `<body>` element, but typically a fine-grained application is\n     * prefered in order to benefit from progressive rendering of the browser view.\n     *\n     * `ngCloak` works in cooperation with a css rule that is embedded within `angular.js` and\n     *  `angular.min.js` files. Following is the css rule:\n     *\n     * <pre>\n     * [ng\\:cloak], [ng-cloak], [data-ng-cloak], [x-ng-cloak], .ng-cloak, .x-ng-cloak {\n *   display: none;\n * }\n     * </pre>\n     *\n     * When this css rule is loaded by the browser, all html elements (including their children) that\n     * are tagged with the `ng-cloak` directive are hidden. When Angular comes across this directive\n     * during the compilation of the template it deletes the `ngCloak` element attribute, which\n     * makes the compiled element visible.\n     *\n     * For the best result, `angular.js` script must be loaded in the head section of the html file;\n     * alternatively, the css rule (above) must be included in the external stylesheet of the\n     * application.\n     *\n     * Legacy browsers, like IE7, do not provide attribute selector support (added in CSS 2.1) so they\n     * cannot match the `[ng\\:cloak]` selector. To work around this limitation, you must add the css\n     * class `ngCloak` in addition to `ngCloak` directive as shown in the example below.\n     *\n     * @element ANY\n     *\n     * @example\n     <doc:example>\n     <doc:source>\n     <div id=\"template1\" ng-cloak>{{ 'hello' }}</div>\n     <div id=\"template2\" ng-cloak class=\"ng-cloak\">{{ 'hello IE7' }}</div>\n     </doc:source>\n     <doc:scenario>\n     it('should remove the template directive and css class', function() {\n         expect(element('.doc-example-live #template1').attr('ng-cloak')).\n           not().toBeDefined();\n         expect(element('.doc-example-live #template2').attr('ng-cloak')).\n           not().toBeDefined();\n       });\n     </doc:scenario>\n     </doc:example>\n     *\n     */\n    var ngCloakDirective = ngDirective({\n        compile: function(element, attr) {\n            attr.$set('ngCloak', undefined);\n            element.removeClass('ng-cloak');\n        }\n    });\n\n    /**\n     * @ngdoc directive\n     * @name ng.directive:ngController\n     *\n     * @description\n     * The `ngController` directive assigns behavior to a scope. This is a key aspect of how angular\n     * supports the principles behind the Model-View-Controller design pattern.\n     *\n     * MVC components in angular:\n     *\n     * * Model \u2014 The Model is data in scope properties; scopes are attached to the DOM.\n     * * View \u2014 The template (HTML with data bindings) is rendered into the View.\n     * * Controller \u2014 The `ngController` directive specifies a Controller class; the class has\n     *   methods that typically express the business logic behind the application.\n     *\n     * Note that an alternative way to define controllers is via the {@link ng.$route $route} service.\n     *\n     * @element ANY\n     * @scope\n     * @param {expression} ngController Name of a globally accessible constructor function or an\n     *     {@link guide/expression expression} that on the current scope evaluates to a\n     *     constructor function.\n     *\n     * @example\n     * Here is a simple form for editing user contact information. Adding, removing, clearing, and\n     * greeting are methods declared on the controller (see source tab). These methods can\n     * easily be called from the angular markup. Notice that the scope becomes the `this` for the\n     * controller's instance. This allows for easy access to the view data from the controller. Also\n     * notice that any changes to the data are automatically reflected in the View without the need\n     * for a manual update.\n     <doc:example>\n     <doc:source>\n     <script>\n     function SettingsController($scope) {\n          $scope.name = \"John Smith\";\n          $scope.contacts = [\n            {type:'phone', value:'408 555 1212'},\n            {type:'email', value:'john.smith@example.org'} ];\n\n     $scope.greet = function() {\n           alert(this.name);\n          };\n\n     $scope.addContact = function() {\n           this.contacts.push({type:'email', value:'yourname@example.org'});\n     };\n\n     $scope.removeContact = function(contactToRemove) {\n           var index = this.contacts.indexOf(contactToRemove);\n           this.contacts.splice(index, 1);\n          };\n\n     $scope.clearContact = function(contact) {\n           contact.type = 'phone';\n           contact.value = '';\n          };\n     }\n     </script>\n     <div ng-controller=\"SettingsController\">\n     Name: <input type=\"text\" ng-model=\"name\"/>\n     [ <a href=\"\" ng-click=\"greet()\">greet</a> ]<br/>\n     Contact:\n     <ul>\n     <li ng-repeat=\"contact in contacts\">\n     <select ng-model=\"contact.type\">\n     <option>phone</option>\n     <option>email</option>\n     </select>\n     <input type=\"text\" ng-model=\"contact.value\"/>\n     [ <a href=\"\" ng-click=\"clearContact(contact)\">clear</a>\n     | <a href=\"\" ng-click=\"removeContact(contact)\">X</a> ]\n     </li>\n     <li>[ <a href=\"\" ng-click=\"addContact()\">add</a> ]</li>\n     </ul>\n     </div>\n     </doc:source>\n     <doc:scenario>\n     it('should check controller', function() {\n         expect(element('.doc-example-live div>:input').val()).toBe('John Smith');\n         expect(element('.doc-example-live li:nth-child(1) input').val())\n           .toBe('408 555 1212');\n         expect(element('.doc-example-live li:nth-child(2) input').val())\n           .toBe('john.smith@example.org');\n\n     element('.doc-example-live li:first a:contains(\"clear\")').click();\n     expect(element('.doc-example-live li:first input').val()).toBe('');\n\n     element('.doc-example-live li:last a:contains(\"add\")').click();\n     expect(element('.doc-example-live li:nth-child(3) input').val())\n     .toBe('yourname@example.org');\n     });\n     </doc:scenario>\n     </doc:example>\n     */\n    var ngControllerDirective = [function() {\n        return {\n            scope: true,\n            controller: '@'\n        };\n    }];\n\n    /**\n     * @ngdoc directive\n     * @name ng.directive:ngCsp\n     * @priority 1000\n     *\n     * @element html\n     * @description\n     * Enables [CSP (Content Security Policy)](https://developer.mozilla.org/en/Security/CSP) support.\n     *\n     * This is necessary when developing things like Google Chrome Extensions.\n     *\n     * CSP forbids apps to use `eval` or `Function(string)` generated functions (among other things).\n     * For us to be compatible, we just need to implement the \"getterFn\" in $parse without violating\n     * any of these restrictions.\n     *\n     * AngularJS uses `Function(string)` generated functions as a speed optimization. By applying `ngCsp`\n     * it is be possible to opt into the CSP compatible mode. When this mode is on AngularJS will\n     * evaluate all expressions up to 30% slower than in non-CSP mode, but no security violations will\n     * be raised.\n     *\n     * In order to use this feature put `ngCsp` directive on the root element of the application.\n     *\n     * @example\n     * This example shows how to apply the `ngCsp` directive to the `html` tag.\n     <pre>\n     <!doctype html>\n     <html ng-app ng-csp>\n     ...\n     ...\n     </html>\n     </pre>\n     */\n\n    var ngCspDirective = ['$sniffer', function($sniffer) {\n        return {\n            priority: 1000,\n            compile: function() {\n                $sniffer.csp = true;\n            }\n        };\n    }];\n\n    /**\n     * @ngdoc directive\n     * @name ng.directive:ngClick\n     *\n     * @description\n     * The ngClick allows you to specify custom behavior when\n     * element is clicked.\n     *\n     * @element ANY\n     * @param {expression} ngClick {@link guide/expression Expression} to evaluate upon\n     * click. (Event object is available as `$event`)\n     *\n     * @example\n     <doc:example>\n     <doc:source>\n     <button ng-click=\"count = count + 1\" ng-init=\"count=0\">\n     Increment\n     </button>\n     count: {{count}}\n     </doc:source>\n     <doc:scenario>\n     it('should check ng-click', function() {\n         expect(binding('count')).toBe('0');\n         element('.doc-example-live :button').click();\n         expect(binding('count')).toBe('1');\n       });\n     </doc:scenario>\n     </doc:example>\n     */\n    /*\n     * A directive that allows creation of custom onclick handlers that are defined as angular\n     * expressions and are compiled and executed within the current scope.\n     *\n     * Events that are handled via these handler are always configured not to propagate further.\n     */\n    var ngEventDirectives = {};\n    forEach(\n        'click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave'.split(' '),\n        function(name) {\n            var directiveName = directiveNormalize('ng-' + name);\n            ngEventDirectives[directiveName] = ['$parse', function($parse) {\n                return function(scope, element, attr) {\n                    var fn = $parse(attr[directiveName]);\n                    element.bind(lowercase(name), function(event) {\n                        scope.$apply(function() {\n                            fn(scope, {$event:event});\n                        });\n                    });\n                };\n            }];\n        }\n    );\n\n    /**\n     * @ngdoc directive\n     * @name ng.directive:ngDblclick\n     *\n     * @description\n     * The `ngDblclick` directive allows you to specify custom behavior on dblclick event.\n     *\n     * @element ANY\n     * @param {expression} ngDblclick {@link guide/expression Expression} to evaluate upon\n     * dblclick. (Event object is available as `$event`)\n     *\n     * @example\n     * See {@link ng.directive:ngClick ngClick}\n     */\n\n\n    /**\n     * @ngdoc directive\n     * @name ng.directive:ngMousedown\n     *\n     * @description\n     * The ngMousedown directive allows you to specify custom behavior on mousedown event.\n     *\n     * @element ANY\n     * @param {expression} ngMousedown {@link guide/expression Expression} to evaluate upon\n     * mousedown. (Event object is available as `$event`)\n     *\n     * @example\n     * See {@link ng.directive:ngClick ngClick}\n     */\n\n\n    /**\n     * @ngdoc directive\n     * @name ng.directive:ngMouseup\n     *\n     * @description\n     * Specify custom behavior on mouseup event.\n     *\n     * @element ANY\n     * @param {expression} ngMouseup {@link guide/expression Expression} to evaluate upon\n     * mouseup. (Event object is available as `$event`)\n     *\n     * @example\n     * See {@link ng.directive:ngClick ngClick}\n     */\n\n    /**\n     * @ngdoc directive\n     * @name ng.directive:ngMouseover\n     *\n     * @description\n     * Specify custom behavior on mouseover event.\n     *\n     * @element ANY\n     * @param {expression} ngMouseover {@link guide/expression Expression} to evaluate upon\n     * mouseover. (Event object is available as `$event`)\n     *\n     * @example\n     * See {@link ng.directive:ngClick ngClick}\n     */\n\n\n    /**\n     * @ngdoc directive\n     * @name ng.directive:ngMouseenter\n     *\n     * @description\n     * Specify custom behavior on mouseenter event.\n     *\n     * @element ANY\n     * @param {expression} ngMouseenter {@link guide/expression Expression} to evaluate upon\n     * mouseenter. (Event object is available as `$event`)\n     *\n     * @example\n     * See {@link ng.directive:ngClick ngClick}\n     */\n\n\n    /**\n     * @ngdoc directive\n     * @name ng.directive:ngMouseleave\n     *\n     * @description\n     * Specify custom behavior on mouseleave event.\n     *\n     * @element ANY\n     * @param {expression} ngMouseleave {@link guide/expression Expression} to evaluate upon\n     * mouseleave. (Event object is available as `$event`)\n     *\n     * @example\n     * See {@link ng.directive:ngClick ngClick}\n     */\n\n\n    /**\n     * @ngdoc directive\n     * @name ng.directive:ngMousemove\n     *\n     * @description\n     * Specify custom behavior on mousemove event.\n     *\n     * @element ANY\n     * @param {expression} ngMousemove {@link guide/expression Expression} to evaluate upon\n     * mousemove. (Event object is available as `$event`)\n     *\n     * @example\n     * See {@link ng.directive:ngClick ngClick}\n     */\n\n\n    /**\n     * @ngdoc directive\n     * @name ng.directive:ngSubmit\n     *\n     * @description\n     * Enables binding angular expressions to onsubmit events.\n     *\n     * Additionally it prevents the default action (which for form means sending the request to the\n     * server and reloading the current page).\n     *\n     * @element form\n     * @param {expression} ngSubmit {@link guide/expression Expression} to eval.\n     *\n     * @example\n     <doc:example>\n     <doc:source>\n     <script>\n     function Ctrl($scope) {\n          $scope.list = [];\n          $scope.text = 'hello';\n          $scope.submit = function() {\n            if (this.text) {\n              this.list.push(this.text);\n              this.text = '';\n            }\n          };\n        }\n     </script>\n     <form ng-submit=\"submit()\" ng-controller=\"Ctrl\">\n     Enter text and hit enter:\n     <input type=\"text\" ng-model=\"text\" name=\"text\" />\n     <input type=\"submit\" id=\"submit\" value=\"Submit\" />\n     <pre>list={{list}}</pre>\n     </form>\n     </doc:source>\n     <doc:scenario>\n     it('should check ng-submit', function() {\n         expect(binding('list')).toBe('[]');\n         element('.doc-example-live #submit').click();\n         expect(binding('list')).toBe('[\"hello\"]');\n         expect(input('text').val()).toBe('');\n       });\n     it('should ignore empty strings', function() {\n         expect(binding('list')).toBe('[]');\n         element('.doc-example-live #submit').click();\n         element('.doc-example-live #submit').click();\n         expect(binding('list')).toBe('[\"hello\"]');\n       });\n     </doc:scenario>\n     </doc:example>\n     */\n    var ngSubmitDirective = ngDirective(function(scope, element, attrs) {\n        element.bind('submit', function() {\n            scope.$apply(attrs.ngSubmit);\n        });\n    });\n\n    /**\n     * @ngdoc directive\n     * @name ng.directive:ngInclude\n     * @restrict ECA\n     *\n     * @description\n     * Fetches, compiles and includes an external HTML fragment.\n     *\n     * Keep in mind that Same Origin Policy applies to included resources\n     * (e.g. ngInclude won't work for cross-domain requests on all browsers and for\n     *  file:// access on some browsers).\n     *\n     * @scope\n     *\n     * @param {string} ngInclude|src angular expression evaluating to URL. If the source is a string constant,\n     *                 make sure you wrap it in quotes, e.g. `src=\"'myPartialTemplate.html'\"`.\n     * @param {string=} onload Expression to evaluate when a new partial is loaded.\n     *\n     * @param {string=} autoscroll Whether `ngInclude` should call {@link ng.$anchorScroll\n     *                  $anchorScroll} to scroll the viewport after the content is loaded.\n     *\n     *                  - If the attribute is not set, disable scrolling.\n     *                  - If the attribute is set without value, enable scrolling.\n     *                  - Otherwise enable scrolling only if the expression evaluates to truthy value.\n     *\n     * @example\n     <example>\n     <file name=\"index.html\">\n     <div ng-controller=\"Ctrl\">\n     <select ng-model=\"template\" ng-options=\"t.name for t in templates\">\n     <option value=\"\">(blank)</option>\n     </select>\n     url of the template: <tt>{{template.url}}</tt>\n     <hr/>\n     <div ng-include src=\"template.url\"></div>\n     </div>\n     </file>\n     <file name=\"script.js\">\n     function Ctrl($scope) {\n        $scope.templates =\n          [ { name: 'template1.html', url: 'template1.html'}\n          , { name: 'template2.html', url: 'template2.html'} ];\n        $scope.template = $scope.templates[0];\n      }\n     </file>\n     <file name=\"template1.html\">\n     Content of template1.html\n     </file>\n     <file name=\"template2.html\">\n     Content of template2.html\n     </file>\n     <file name=\"scenario.js\">\n     it('should load template1.html', function() {\n       expect(element('.doc-example-live [ng-include]').text()).\n         toMatch(/Content of template1.html/);\n      });\n     it('should load template2.html', function() {\n       select('template').option('1');\n       expect(element('.doc-example-live [ng-include]').text()).\n         toMatch(/Content of template2.html/);\n      });\n     it('should change to blank', function() {\n       select('template').option('');\n       expect(element('.doc-example-live [ng-include]').text()).toEqual('');\n      });\n     </file>\n     </example>\n     */\n\n\n    /**\n     * @ngdoc event\n     * @name ng.directive:ngInclude#$includeContentLoaded\n     * @eventOf ng.directive:ngInclude\n     * @eventType emit on the current ngInclude scope\n     * @description\n     * Emitted every time the ngInclude content is reloaded.\n     */\n    var ngIncludeDirective = ['$http', '$templateCache', '$anchorScroll', '$compile',\n        function($http,   $templateCache,   $anchorScroll,   $compile) {\n            return {\n                restrict: 'ECA',\n                terminal: true,\n                compile: function(element, attr) {\n                    var srcExp = attr.ngInclude || attr.src,\n                        onloadExp = attr.onload || '',\n                        autoScrollExp = attr.autoscroll;\n\n                    return function(scope, element) {\n                        var changeCounter = 0,\n                            childScope;\n\n                        var clearContent = function() {\n                            if (childScope) {\n                                childScope.$destroy();\n                                childScope = null;\n                            }\n\n                            element.html('');\n                        };\n\n                        scope.$watch(srcExp, function ngIncludeWatchAction(src) {\n                            var thisChangeId = ++changeCounter;\n\n                            if (src) {\n                                $http.get(src, {cache: $templateCache}).success(function(response) {\n                                    if (thisChangeId !== changeCounter) return;\n\n                                    if (childScope) childScope.$destroy();\n                                    childScope = scope.$new();\n\n                                    element.html(response);\n                                    $compile(element.contents())(childScope);\n\n                                    if (isDefined(autoScrollExp) && (!autoScrollExp || scope.$eval(autoScrollExp))) {\n                                        $anchorScroll();\n                                    }\n\n                                    childScope.$emit('$includeContentLoaded');\n                                    scope.$eval(onloadExp);\n                                }).error(function() {\n                                        if (thisChangeId === changeCounter) clearContent();\n                                    });\n                            } else clearContent();\n                        });\n                    };\n                }\n            };\n        }];\n\n    /**\n     * @ngdoc directive\n     * @name ng.directive:ngInit\n     *\n     * @description\n     * The `ngInit` directive specifies initialization tasks to be executed\n     *  before the template enters execution mode during bootstrap.\n     *\n     * @element ANY\n     * @param {expression} ngInit {@link guide/expression Expression} to eval.\n     *\n     * @example\n     <doc:example>\n     <doc:source>\n     <div ng-init=\"greeting='Hello'; person='World'\">\n     {{greeting}} {{person}}!\n     </div>\n     </doc:source>\n     <doc:scenario>\n     it('should check greeting', function() {\n         expect(binding('greeting')).toBe('Hello');\n         expect(binding('person')).toBe('World');\n       });\n     </doc:scenario>\n     </doc:example>\n     */\n    var ngInitDirective = ngDirective({\n        compile: function() {\n            return {\n                pre: function(scope, element, attrs) {\n                    scope.$eval(attrs.ngInit);\n                }\n            }\n        }\n    });\n\n    /**\n     * @ngdoc directive\n     * @name ng.directive:ngNonBindable\n     * @priority 1000\n     *\n     * @description\n     * Sometimes it is necessary to write code which looks like bindings but which should be left alone\n     * by angular. Use `ngNonBindable` to make angular ignore a chunk of HTML.\n     *\n     * @element ANY\n     *\n     * @example\n     * In this example there are two location where a simple binding (`{{}}`) is present, but the one\n     * wrapped in `ngNonBindable` is left alone.\n     *\n     * @example\n     <doc:example>\n     <doc:source>\n     <div>Normal: {{1 + 2}}</div>\n     <div ng-non-bindable>Ignored: {{1 + 2}}</div>\n     </doc:source>\n     <doc:scenario>\n     it('should check ng-non-bindable', function() {\n         expect(using('.doc-example-live').binding('1 + 2')).toBe('3');\n         expect(using('.doc-example-live').element('div:last').text()).\n           toMatch(/1 \\+ 2/);\n       });\n     </doc:scenario>\n     </doc:example>\n     */\n    var ngNonBindableDirective = ngDirective({ terminal: true, priority: 1000 });\n\n    /**\n     * @ngdoc directive\n     * @name ng.directive:ngPluralize\n     * @restrict EA\n     *\n     * @description\n     * # Overview\n     * `ngPluralize` is a directive that displays messages according to en-US localization rules.\n     * These rules are bundled with angular.js and the rules can be overridden\n     * (see {@link guide/i18n Angular i18n} dev guide). You configure ngPluralize directive\n     * by specifying the mappings between\n     * {@link http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html\n     * plural categories} and the strings to be displayed.\n     *\n     * # Plural categories and explicit number rules\n     * There are two\n     * {@link http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html\n     * plural categories} in Angular's default en-US locale: \"one\" and \"other\".\n     *\n     * While a pural category may match many numbers (for example, in en-US locale, \"other\" can match\n     * any number that is not 1), an explicit number rule can only match one number. For example, the\n     * explicit number rule for \"3\" matches the number 3. You will see the use of plural categories\n     * and explicit number rules throughout later parts of this documentation.\n     *\n     * # Configuring ngPluralize\n     * You configure ngPluralize by providing 2 attributes: `count` and `when`.\n     * You can also provide an optional attribute, `offset`.\n     *\n     * The value of the `count` attribute can be either a string or an {@link guide/expression\n     * Angular expression}; these are evaluated on the current scope for its bound value.\n     *\n     * The `when` attribute specifies the mappings between plural categories and the actual\n     * string to be displayed. The value of the attribute should be a JSON object so that Angular\n     * can interpret it correctly.\n     *\n     * The following example shows how to configure ngPluralize:\n     *\n     * <pre>\n     * <ng-pluralize count=\"personCount\"\n     when=\"{'0': 'Nobody is viewing.',\n *                      'one': '1 person is viewing.',\n *                      'other': '{} people are viewing.'}\">\n     * </ng-pluralize>\n     *</pre>\n     *\n     * In the example, `\"0: Nobody is viewing.\"` is an explicit number rule. If you did not\n     * specify this rule, 0 would be matched to the \"other\" category and \"0 people are viewing\"\n     * would be shown instead of \"Nobody is viewing\". You can specify an explicit number rule for\n     * other numbers, for example 12, so that instead of showing \"12 people are viewing\", you can\n     * show \"a dozen people are viewing\".\n     *\n     * You can use a set of closed braces(`{}`) as a placeholder for the number that you want substituted\n     * into pluralized strings. In the previous example, Angular will replace `{}` with\n     * <span ng-non-bindable>`{{personCount}}`</span>. The closed braces `{}` is a placeholder\n     * for <span ng-non-bindable>{{numberExpression}}</span>.\n     *\n     * # Configuring ngPluralize with offset\n     * The `offset` attribute allows further customization of pluralized text, which can result in\n     * a better user experience. For example, instead of the message \"4 people are viewing this document\",\n     * you might display \"John, Kate and 2 others are viewing this document\".\n     * The offset attribute allows you to offset a number by any desired value.\n     * Let's take a look at an example:\n     *\n     * <pre>\n     * <ng-pluralize count=\"personCount\" offset=2\n     *               when=\"{'0': 'Nobody is viewing.',\n *                      '1': '{{person1}} is viewing.',\n *                      '2': '{{person1}} and {{person2}} are viewing.',\n *                      'one': '{{person1}}, {{person2}} and one other person are viewing.',\n *                      'other': '{{person1}}, {{person2}} and {} other people are viewing.'}\">\n     * </ng-pluralize>\n     * </pre>\n     *\n     * Notice that we are still using two plural categories(one, other), but we added\n     * three explicit number rules 0, 1 and 2.\n     * When one person, perhaps John, views the document, \"John is viewing\" will be shown.\n     * When three people view the document, no explicit number rule is found, so\n     * an offset of 2 is taken off 3, and Angular uses 1 to decide the plural category.\n     * In this case, plural category 'one' is matched and \"John, Marry and one other person are viewing\"\n     * is shown.\n     *\n     * Note that when you specify offsets, you must provide explicit number rules for\n     * numbers from 0 up to and including the offset. If you use an offset of 3, for example,\n     * you must provide explicit number rules for 0, 1, 2 and 3. You must also provide plural strings for\n     * plural categories \"one\" and \"other\".\n     *\n     * @param {string|expression} count The variable to be bounded to.\n     * @param {string} when The mapping between plural category to its correspoding strings.\n     * @param {number=} offset Offset to deduct from the total number.\n     *\n     * @example\n     <doc:example>\n     <doc:source>\n     <script>\n     function Ctrl($scope) {\n            $scope.person1 = 'Igor';\n            $scope.person2 = 'Misko';\n            $scope.personCount = 1;\n          }\n     </script>\n     <div ng-controller=\"Ctrl\">\n     Person 1:<input type=\"text\" ng-model=\"person1\" value=\"Igor\" /><br/>\n     Person 2:<input type=\"text\" ng-model=\"person2\" value=\"Misko\" /><br/>\n     Number of People:<input type=\"text\" ng-model=\"personCount\" value=\"1\" /><br/>\n\n     <!--- Example with simple pluralization rules for en locale --->\n     Without Offset:\n     <ng-pluralize count=\"personCount\"\n     when=\"{'0': 'Nobody is viewing.',\n                               'one': '1 person is viewing.',\n                               'other': '{} people are viewing.'}\">\n     </ng-pluralize><br>\n\n     <!--- Example with offset --->\n     With Offset(2):\n     <ng-pluralize count=\"personCount\" offset=2\n     when=\"{'0': 'Nobody is viewing.',\n                               '1': '{{person1}} is viewing.',\n                               '2': '{{person1}} and {{person2}} are viewing.',\n                               'one': '{{person1}}, {{person2}} and one other person are viewing.',\n                               'other': '{{person1}}, {{person2}} and {} other people are viewing.'}\">\n     </ng-pluralize>\n     </div>\n     </doc:source>\n     <doc:scenario>\n     it('should show correct pluralized string', function() {\n          expect(element('.doc-example-live ng-pluralize:first').text()).\n                                             toBe('1 person is viewing.');\n          expect(element('.doc-example-live ng-pluralize:last').text()).\n                                                toBe('Igor is viewing.');\n\n          using('.doc-example-live').input('personCount').enter('0');\n          expect(element('.doc-example-live ng-pluralize:first').text()).\n                                               toBe('Nobody is viewing.');\n          expect(element('.doc-example-live ng-pluralize:last').text()).\n                                              toBe('Nobody is viewing.');\n\n          using('.doc-example-live').input('personCount').enter('2');\n          expect(element('.doc-example-live ng-pluralize:first').text()).\n                                            toBe('2 people are viewing.');\n          expect(element('.doc-example-live ng-pluralize:last').text()).\n                              toBe('Igor and Misko are viewing.');\n\n          using('.doc-example-live').input('personCount').enter('3');\n          expect(element('.doc-example-live ng-pluralize:first').text()).\n                                            toBe('3 people are viewing.');\n          expect(element('.doc-example-live ng-pluralize:last').text()).\n                              toBe('Igor, Misko and one other person are viewing.');\n\n          using('.doc-example-live').input('personCount').enter('4');\n          expect(element('.doc-example-live ng-pluralize:first').text()).\n                                            toBe('4 people are viewing.');\n          expect(element('.doc-example-live ng-pluralize:last').text()).\n                              toBe('Igor, Misko and 2 other people are viewing.');\n        });\n\n     it('should show data-binded names', function() {\n          using('.doc-example-live').input('personCount').enter('4');\n          expect(element('.doc-example-live ng-pluralize:last').text()).\n              toBe('Igor, Misko and 2 other people are viewing.');\n\n          using('.doc-example-live').input('person1').enter('Di');\n          using('.doc-example-live').input('person2').enter('Vojta');\n          expect(element('.doc-example-live ng-pluralize:last').text()).\n              toBe('Di, Vojta and 2 other people are viewing.');\n        });\n     </doc:scenario>\n     </doc:example>\n     */\n    var ngPluralizeDirective = ['$locale', '$interpolate', function($locale, $interpolate) {\n        var BRACE = /{}/g;\n        return {\n            restrict: 'EA',\n            link: function(scope, element, attr) {\n                var numberExp = attr.count,\n                    whenExp = element.attr(attr.$attr.when), // this is because we have {{}} in attrs\n                    offset = attr.offset || 0,\n                    whens = scope.$eval(whenExp),\n                    whensExpFns = {},\n                    startSymbol = $interpolate.startSymbol(),\n                    endSymbol = $interpolate.endSymbol();\n\n                forEach(whens, function(expression, key) {\n                    whensExpFns[key] =\n                        $interpolate(expression.replace(BRACE, startSymbol + numberExp + '-' +\n                            offset + endSymbol));\n                });\n\n                scope.$watch(function ngPluralizeWatch() {\n                    var value = parseFloat(scope.$eval(numberExp));\n\n                    if (!isNaN(value)) {\n                        //if explicit number rule such as 1, 2, 3... is defined, just use it. Otherwise,\n                        //check it against pluralization rules in $locale service\n                        if (!(value in whens)) value = $locale.pluralCat(value - offset);\n                        return whensExpFns[value](scope, element, true);\n                    } else {\n                        return '';\n                    }\n                }, function ngPluralizeWatchAction(newVal) {\n                    element.text(newVal);\n                });\n            }\n        };\n    }];\n\n    /**\n     * @ngdoc directive\n     * @name ng.directive:ngRepeat\n     *\n     * @description\n     * The `ngRepeat` directive instantiates a template once per item from a collection. Each template\n     * instance gets its own scope, where the given loop variable is set to the current collection item,\n     * and `$index` is set to the item index or key.\n     *\n     * Special properties are exposed on the local scope of each template instance, including:\n     *\n     *   * `$index` \u2013 `{number}` \u2013 iterator offset of the repeated element (0..length-1)\n     *   * `$first` \u2013 `{boolean}` \u2013 true if the repeated element is first in the iterator.\n     *   * `$middle` \u2013 `{boolean}` \u2013 true if the repeated element is between the first and last in the iterator.\n     *   * `$last` \u2013 `{boolean}` \u2013 true if the repeated element is last in the iterator.\n     *\n     *\n     * @element ANY\n     * @scope\n     * @priority 1000\n     * @param {repeat_expression} ngRepeat The expression indicating how to enumerate a collection. Two\n     *   formats are currently supported:\n     *\n     *   * `variable in expression` \u2013 where variable is the user defined loop variable and `expression`\n     *     is a scope expression giving the collection to enumerate.\n     *\n     *     For example: `track in cd.tracks`.\n     *\n     *   * `(key, value) in expression` \u2013 where `key` and `value` can be any user defined identifiers,\n     *     and `expression` is the scope expression giving the collection to enumerate.\n     *\n     *     For example: `(name, age) in {'adam':10, 'amalie':12}`.\n     *\n     * @example\n     * This example initializes the scope to a list of names and\n     * then uses `ngRepeat` to display every person:\n     <doc:example>\n     <doc:source>\n     <div ng-init=\"friends = [{name:'John', age:25}, {name:'Mary', age:28}]\">\n     I have {{friends.length}} friends. They are:\n     <ul>\n     <li ng-repeat=\"friend in friends\">\n     [{{$index + 1}}] {{friend.name}} who is {{friend.age}} years old.\n     </li>\n     </ul>\n     </div>\n     </doc:source>\n     <doc:scenario>\n     it('should check ng-repeat', function() {\n           var r = using('.doc-example-live').repeater('ul li');\n           expect(r.count()).toBe(2);\n           expect(r.row(0)).toEqual([\"1\",\"John\",\"25\"]);\n           expect(r.row(1)).toEqual([\"2\",\"Mary\",\"28\"]);\n         });\n     </doc:scenario>\n     </doc:example>\n     */\n    var ngRepeatDirective = ngDirective({\n        transclude: 'element',\n        priority: 1000,\n        terminal: true,\n        compile: function(element, attr, linker) {\n            return function(scope, iterStartElement, attr){\n                var expression = attr.ngRepeat;\n                var match = expression.match(/^\\s*(.+)\\s+in\\s+(.*)\\s*$/),\n                    lhs, rhs, valueIdent, keyIdent;\n                if (! match) {\n                    throw Error(\"Expected ngRepeat in form of '_item_ in _collection_' but got '\" +\n                        expression + \"'.\");\n                }\n                lhs = match[1];\n                rhs = match[2];\n                match = lhs.match(/^(?:([\\$\\w]+)|\\(([\\$\\w]+)\\s*,\\s*([\\$\\w]+)\\))$/);\n                if (!match) {\n                    throw Error(\"'item' in 'item in collection' should be identifier or (key, value) but got '\" +\n                        lhs + \"'.\");\n                }\n                valueIdent = match[3] || match[1];\n                keyIdent = match[2];\n\n                // Store a list of elements from previous run. This is a hash where key is the item from the\n                // iterator, and the value is an array of objects with following properties.\n                //   - scope: bound scope\n                //   - element: previous element.\n                //   - index: position\n                // We need an array of these objects since the same object can be returned from the iterator.\n                // We expect this to be a rare case.\n                var lastOrder = new HashQueueMap();\n\n                scope.$watch(function ngRepeatWatch(scope){\n                    var index, length,\n                        collection = scope.$eval(rhs),\n                        cursor = iterStartElement,     // current position of the node\n                    // Same as lastOrder but it has the current state. It will become the\n                    // lastOrder on the next iteration.\n                        nextOrder = new HashQueueMap(),\n                        arrayBound,\n                        childScope,\n                        key, value, // key/value of iteration\n                        array,\n                        last;       // last object information {scope, element, index}\n\n\n\n                    if (!isArray(collection)) {\n                        // if object, extract keys, sort them and use to determine order of iteration over obj props\n                        array = [];\n                        for(key in collection) {\n                            if (collection.hasOwnProperty(key) && key.charAt(0) != '$') {\n                                array.push(key);\n                            }\n                        }\n                        array.sort();\n                    } else {\n                        array = collection || [];\n                    }\n\n                    arrayBound = array.length-1;\n\n                    // we are not using forEach for perf reasons (trying to avoid #call)\n                    for (index = 0, length = array.length; index < length; index++) {\n                        key = (collection === array) ? index : array[index];\n                        value = collection[key];\n\n                        last = lastOrder.shift(value);\n\n                        if (last) {\n                            // if we have already seen this object, then we need to reuse the\n                            // associated scope/element\n                            childScope = last.scope;\n                            nextOrder.push(value, last);\n\n                            if (index === last.index) {\n                                // do nothing\n                                cursor = last.element;\n                            } else {\n                                // existing item which got moved\n                                last.index = index;\n                                // This may be a noop, if the element is next, but I don't know of a good way to\n                                // figure this out,  since it would require extra DOM access, so let's just hope that\n                                // the browsers realizes that it is noop, and treats it as such.\n                                cursor.after(last.element);\n                                cursor = last.element;\n                            }\n                        } else {\n                            // new item which we don't know about\n                            childScope = scope.$new();\n                        }\n\n                        childScope[valueIdent] = value;\n                        if (keyIdent) childScope[keyIdent] = key;\n                        childScope.$index = index;\n\n                        childScope.$first = (index === 0);\n                        childScope.$last = (index === arrayBound);\n                        childScope.$middle = !(childScope.$first || childScope.$last);\n\n                        if (!last) {\n                            linker(childScope, function(clone){\n                                cursor.after(clone);\n                                last = {\n                                    scope: childScope,\n                                    element: (cursor = clone),\n                                    index: index\n                                };\n                                nextOrder.push(value, last);\n                            });\n                        }\n                    }\n\n                    //shrink children\n                    for (key in lastOrder) {\n                        if (lastOrder.hasOwnProperty(key)) {\n                            array = lastOrder[key];\n                            while(array.length) {\n                                value = array.pop();\n                                value.element.remove();\n                                value.scope.$destroy();\n                            }\n                        }\n                    }\n\n                    lastOrder = nextOrder;\n                });\n            };\n        }\n    });\n\n    /**\n     * @ngdoc directive\n     * @name ng.directive:ngShow\n     *\n     * @description\n     * The `ngShow` and `ngHide` directives show or hide a portion of the DOM tree (HTML)\n     * conditionally.\n     *\n     * @element ANY\n     * @param {expression} ngShow If the {@link guide/expression expression} is truthy\n     *     then the element is shown or hidden respectively.\n     *\n     * @example\n     <doc:example>\n     <doc:source>\n     Click me: <input type=\"checkbox\" ng-model=\"checked\"><br/>\n     Show: <span ng-show=\"checked\">I show up when your checkbox is checked.</span> <br/>\n     Hide: <span ng-hide=\"checked\">I hide when your checkbox is checked.</span>\n     </doc:source>\n     <doc:scenario>\n     it('should check ng-show / ng-hide', function() {\n         expect(element('.doc-example-live span:first:hidden').count()).toEqual(1);\n         expect(element('.doc-example-live span:last:visible').count()).toEqual(1);\n\n         input('checked').check();\n\n         expect(element('.doc-example-live span:first:visible').count()).toEqual(1);\n         expect(element('.doc-example-live span:last:hidden').count()).toEqual(1);\n       });\n     </doc:scenario>\n     </doc:example>\n     */\n//TODO(misko): refactor to remove element from the DOM\n    var ngShowDirective = ngDirective(function(scope, element, attr){\n        scope.$watch(attr.ngShow, function ngShowWatchAction(value){\n            element.css('display', toBoolean(value) ? '' : 'none');\n        });\n    });\n\n\n    /**\n     * @ngdoc directive\n     * @name ng.directive:ngHide\n     *\n     * @description\n     * The `ngHide` and `ngShow` directives hide or show a portion of the DOM tree (HTML)\n     * conditionally.\n     *\n     * @element ANY\n     * @param {expression} ngHide If the {@link guide/expression expression} is truthy then\n     *     the element is shown or hidden respectively.\n     *\n     * @example\n     <doc:example>\n     <doc:source>\n     Click me: <input type=\"checkbox\" ng-model=\"checked\"><br/>\n     Show: <span ng-show=\"checked\">I show up when you checkbox is checked?</span> <br/>\n     Hide: <span ng-hide=\"checked\">I hide when you checkbox is checked?</span>\n     </doc:source>\n     <doc:scenario>\n     it('should check ng-show / ng-hide', function() {\n         expect(element('.doc-example-live span:first:hidden').count()).toEqual(1);\n         expect(element('.doc-example-live span:last:visible').count()).toEqual(1);\n\n         input('checked').check();\n\n         expect(element('.doc-example-live span:first:visible').count()).toEqual(1);\n         expect(element('.doc-example-live span:last:hidden').count()).toEqual(1);\n       });\n     </doc:scenario>\n     </doc:example>\n     */\n//TODO(misko): refactor to remove element from the DOM\n    var ngHideDirective = ngDirective(function(scope, element, attr){\n        scope.$watch(attr.ngHide, function ngHideWatchAction(value){\n            element.css('display', toBoolean(value) ? 'none' : '');\n        });\n    });\n\n    /**\n     * @ngdoc directive\n     * @name ng.directive:ngStyle\n     *\n     * @description\n     * The `ngStyle` directive allows you to set CSS style on an HTML element conditionally.\n     *\n     * @element ANY\n     * @param {expression} ngStyle {@link guide/expression Expression} which evals to an\n     *      object whose keys are CSS style names and values are corresponding values for those CSS\n     *      keys.\n     *\n     * @example\n     <example>\n     <file name=\"index.html\">\n     <input type=\"button\" value=\"set\" ng-click=\"myStyle={color:'red'}\">\n     <input type=\"button\" value=\"clear\" ng-click=\"myStyle={}\">\n     <br/>\n     <span ng-style=\"myStyle\">Sample Text</span>\n     <pre>myStyle={{myStyle}}</pre>\n     </file>\n     <file name=\"style.css\">\n     span {\n         color: black;\n       }\n     </file>\n     <file name=\"scenario.js\">\n     it('should check ng-style', function() {\n         expect(element('.doc-example-live span').css('color')).toBe('rgb(0, 0, 0)');\n         element('.doc-example-live :button[value=set]').click();\n         expect(element('.doc-example-live span').css('color')).toBe('rgb(255, 0, 0)');\n         element('.doc-example-live :button[value=clear]').click();\n         expect(element('.doc-example-live span').css('color')).toBe('rgb(0, 0, 0)');\n       });\n     </file>\n     </example>\n     */\n    var ngStyleDirective = ngDirective(function(scope, element, attr) {\n        scope.$watch(attr.ngStyle, function ngStyleWatchAction(newStyles, oldStyles) {\n            if (oldStyles && (newStyles !== oldStyles)) {\n                forEach(oldStyles, function(val, style) { element.css(style, '');});\n            }\n            if (newStyles) element.css(newStyles);\n        }, true);\n    });\n\n    /**\n     * @ngdoc directive\n     * @name ng.directive:ngSwitch\n     * @restrict EA\n     *\n     * @description\n     * Conditionally change the DOM structure.\n     *\n     * @usage\n     * <ANY ng-switch=\"expression\">\n     *   <ANY ng-switch-when=\"matchValue1\">...</ANY>\n     *   <ANY ng-switch-when=\"matchValue2\">...</ANY>\n     *   ...\n     *   <ANY ng-switch-default>...</ANY>\n     * </ANY>\n     *\n     * @scope\n     * @param {*} ngSwitch|on expression to match against <tt>ng-switch-when</tt>.\n     * @paramDescription\n     * On child elments add:\n     *\n     * * `ngSwitchWhen`: the case statement to match against. If match then this\n     *   case will be displayed.\n     * * `ngSwitchDefault`: the default case when no other casses match.\n     *\n     * @example\n     <doc:example>\n     <doc:source>\n     <script>\n     function Ctrl($scope) {\n            $scope.items = ['settings', 'home', 'other'];\n            $scope.selection = $scope.items[0];\n          }\n     </script>\n     <div ng-controller=\"Ctrl\">\n     <select ng-model=\"selection\" ng-options=\"item for item in items\">\n     </select>\n     <tt>selection={{selection}}</tt>\n     <hr/>\n     <div ng-switch on=\"selection\" >\n     <div ng-switch-when=\"settings\">Settings Div</div>\n     <span ng-switch-when=\"home\">Home Span</span>\n     <span ng-switch-default>default</span>\n     </div>\n     </div>\n     </doc:source>\n     <doc:scenario>\n     it('should start in settings', function() {\n         expect(element('.doc-example-live [ng-switch]').text()).toMatch(/Settings Div/);\n        });\n     it('should change to home', function() {\n         select('selection').option('home');\n         expect(element('.doc-example-live [ng-switch]').text()).toMatch(/Home Span/);\n        });\n     it('should select deafault', function() {\n         select('selection').option('other');\n         expect(element('.doc-example-live [ng-switch]').text()).toMatch(/default/);\n        });\n     </doc:scenario>\n     </doc:example>\n     */\n    var NG_SWITCH = 'ng-switch';\n    var ngSwitchDirective = valueFn({\n        restrict: 'EA',\n        require: 'ngSwitch',\n        // asks for $scope to fool the BC controller module\n        controller: ['$scope', function ngSwitchController() {\n            this.cases = {};\n        }],\n        link: function(scope, element, attr, ctrl) {\n            var watchExpr = attr.ngSwitch || attr.on,\n                selectedTransclude,\n                selectedElement,\n                selectedScope;\n\n            scope.$watch(watchExpr, function ngSwitchWatchAction(value) {\n                if (selectedElement) {\n                    selectedScope.$destroy();\n                    selectedElement.remove();\n                    selectedElement = selectedScope = null;\n                }\n                if ((selectedTransclude = ctrl.cases['!' + value] || ctrl.cases['?'])) {\n                    scope.$eval(attr.change);\n                    selectedScope = scope.$new();\n                    selectedTransclude(selectedScope, function(caseElement) {\n                        selectedElement = caseElement;\n                        element.append(caseElement);\n                    });\n                }\n            });\n        }\n    });\n\n    var ngSwitchWhenDirective = ngDirective({\n        transclude: 'element',\n        priority: 500,\n        require: '^ngSwitch',\n        compile: function(element, attrs, transclude) {\n            return function(scope, element, attr, ctrl) {\n                ctrl.cases['!' + attrs.ngSwitchWhen] = transclude;\n            };\n        }\n    });\n\n    var ngSwitchDefaultDirective = ngDirective({\n        transclude: 'element',\n        priority: 500,\n        require: '^ngSwitch',\n        compile: function(element, attrs, transclude) {\n            return function(scope, element, attr, ctrl) {\n                ctrl.cases['?'] = transclude;\n            };\n        }\n    });\n\n    /**\n     * @ngdoc directive\n     * @name ng.directive:ngTransclude\n     *\n     * @description\n     * Insert the transcluded DOM here.\n     *\n     * @element ANY\n     *\n     * @example\n     <doc:example module=\"transclude\">\n     <doc:source>\n     <script>\n     function Ctrl($scope) {\n           $scope.title = 'Lorem Ipsum';\n           $scope.text = 'Neque porro quisquam est qui dolorem ipsum quia dolor...';\n         }\n\n     angular.module('transclude', [])\n     .directive('pane', function(){\n             return {\n               restrict: 'E',\n               transclude: true,\n               scope: 'isolate',\n               locals: { title:'bind' },\n               template: '<div style=\"border: 1px solid black;\">' +\n                           '<div style=\"background-color: gray\">{{title}}</div>' +\n                           '<div ng-transclude></div>' +\n                         '</div>'\n             };\n         });\n     </script>\n     <div ng-controller=\"Ctrl\">\n     <input ng-model=\"title\"><br>\n     <textarea ng-model=\"text\"></textarea> <br/>\n     <pane title=\"{{title}}\">{{text}}</pane>\n     </div>\n     </doc:source>\n     <doc:scenario>\n     it('should have transcluded', function() {\n          input('title').enter('TITLE');\n          input('text').enter('TEXT');\n          expect(binding('title')).toEqual('TITLE');\n          expect(binding('text')).toEqual('TEXT');\n        });\n     </doc:scenario>\n     </doc:example>\n     *\n     */\n    var ngTranscludeDirective = ngDirective({\n        controller: ['$transclude', '$element', function($transclude, $element) {\n            $transclude(function(clone) {\n                $element.append(clone);\n            });\n        }]\n    });\n\n    /**\n     * @ngdoc directive\n     * @name ng.directive:ngView\n     * @restrict ECA\n     *\n     * @description\n     * # Overview\n     * `ngView` is a directive that complements the {@link ng.$route $route} service by\n     * including the rendered template of the current route into the main layout (`index.html`) file.\n     * Every time the current route changes, the included view changes with it according to the\n     * configuration of the `$route` service.\n     *\n     * @scope\n     * @example\n     <example module=\"ngView\">\n     <file name=\"index.html\">\n     <div ng-controller=\"MainCntl\">\n     Choose:\n     <a href=\"Book/Moby\">Moby</a> |\n     <a href=\"Book/Moby/ch/1\">Moby: Ch1</a> |\n     <a href=\"Book/Gatsby\">Gatsby</a> |\n     <a href=\"Book/Gatsby/ch/4?key=value\">Gatsby: Ch4</a> |\n     <a href=\"Book/Scarlet\">Scarlet Letter</a><br/>\n\n     <div ng-view></div>\n     <hr />\n\n     <pre>$location.path() = {{$location.path()}}</pre>\n     <pre>$route.current.templateUrl = {{$route.current.templateUrl}}</pre>\n     <pre>$route.current.params = {{$route.current.params}}</pre>\n     <pre>$route.current.scope.name = {{$route.current.scope.name}}</pre>\n     <pre>$routeParams = {{$routeParams}}</pre>\n     </div>\n     </file>\n\n     <file name=\"book.html\">\n     controller: {{name}}<br />\n     Book Id: {{params.bookId}}<br />\n     </file>\n\n     <file name=\"chapter.html\">\n     controller: {{name}}<br />\n     Book Id: {{params.bookId}}<br />\n     Chapter Id: {{params.chapterId}}\n     </file>\n\n     <file name=\"script.js\">\n     angular.module('ngView', [], function($routeProvider, $locationProvider) {\n          $routeProvider.when('/Book/:bookId', {\n            templateUrl: 'book.html',\n            controller: BookCntl\n          });\n          $routeProvider.when('/Book/:bookId/ch/:chapterId', {\n            templateUrl: 'chapter.html',\n            controller: ChapterCntl\n          });\n\n          // configure html5 to get links working on jsfiddle\n          $locationProvider.html5Mode(true);\n        });\n\n     function MainCntl($scope, $route, $routeParams, $location) {\n          $scope.$route = $route;\n          $scope.$location = $location;\n          $scope.$routeParams = $routeParams;\n        }\n\n     function BookCntl($scope, $routeParams) {\n          $scope.name = \"BookCntl\";\n          $scope.params = $routeParams;\n        }\n\n     function ChapterCntl($scope, $routeParams) {\n          $scope.name = \"ChapterCntl\";\n          $scope.params = $routeParams;\n        }\n     </file>\n\n     <file name=\"scenario.js\">\n     it('should load and compile correct template', function() {\n          element('a:contains(\"Moby: Ch1\")').click();\n          var content = element('.doc-example-live [ng-view]').text();\n          expect(content).toMatch(/controller\\: ChapterCntl/);\n          expect(content).toMatch(/Book Id\\: Moby/);\n          expect(content).toMatch(/Chapter Id\\: 1/);\n\n          element('a:contains(\"Scarlet\")').click();\n          content = element('.doc-example-live [ng-view]').text();\n          expect(content).toMatch(/controller\\: BookCntl/);\n          expect(content).toMatch(/Book Id\\: Scarlet/);\n        });\n     </file>\n     </example>\n     */\n\n\n    /**\n     * @ngdoc event\n     * @name ng.directive:ngView#$viewContentLoaded\n     * @eventOf ng.directive:ngView\n     * @eventType emit on the current ngView scope\n     * @description\n     * Emitted every time the ngView content is reloaded.\n     */\n    var ngViewDirective = ['$http', '$templateCache', '$route', '$anchorScroll', '$compile',\n        '$controller',\n        function($http,   $templateCache,   $route,   $anchorScroll,   $compile,\n                 $controller) {\n            return {\n                restrict: 'ECA',\n                terminal: true,\n                link: function(scope, element, attr) {\n                    var lastScope,\n                        onloadExp = attr.onload || '';\n\n                    scope.$on('$routeChangeSuccess', update);\n                    update();\n\n\n                    function destroyLastScope() {\n                        if (lastScope) {\n                            lastScope.$destroy();\n                            lastScope = null;\n                        }\n                    }\n\n                    function clearContent() {\n                        element.html('');\n                        destroyLastScope();\n                    }\n\n                    function update() {\n                        var locals = $route.current && $route.current.locals,\n                            template = locals && locals.$template;\n\n                        if (template) {\n                            element.html(template);\n                            destroyLastScope();\n\n                            var link = $compile(element.contents()),\n                                current = $route.current,\n                                controller;\n\n                            lastScope = current.scope = scope.$new();\n                            if (current.controller) {\n                                locals.$scope = lastScope;\n                                controller = $controller(current.controller, locals);\n                                element.children().data('$ngControllerController', controller);\n                            }\n\n                            link(lastScope);\n                            lastScope.$emit('$viewContentLoaded');\n                            lastScope.$eval(onloadExp);\n\n                            // $anchorScroll might listen on event...\n                            $anchorScroll();\n                        } else {\n                            clearContent();\n                        }\n                    }\n                }\n            };\n        }];\n\n    /**\n     * @ngdoc directive\n     * @name ng.directive:script\n     *\n     * @description\n     * Load content of a script tag, with type `text/ng-template`, into `$templateCache`, so that the\n     * template can be used by `ngInclude`, `ngView` or directive templates.\n     *\n     * @restrict E\n     * @param {'text/ng-template'} type must be set to `'text/ng-template'`\n     *\n     * @example\n     <doc:example>\n     <doc:source>\n     <script type=\"text/ng-template\" id=\"/tpl.html\">\n     Content of the template.\n     </script>\n\n     <a ng-click=\"currentTpl='/tpl.html'\" id=\"tpl-link\">Load inlined template</a>\n     <div id=\"tpl-content\" ng-include src=\"currentTpl\"></div>\n     </doc:source>\n     <doc:scenario>\n     it('should load template defined inside script tag', function() {\n        element('#tpl-link').click();\n        expect(element('#tpl-content').text()).toMatch(/Content of the template/);\n      });\n     </doc:scenario>\n     </doc:example>\n     */\n    var scriptDirective = ['$templateCache', function($templateCache) {\n        return {\n            restrict: 'E',\n            terminal: true,\n            compile: function(element, attr) {\n                if (attr.type == 'text/ng-template') {\n                    var templateUrl = attr.id,\n                    // IE is not consistent, in scripts we have to read .text but in other nodes we have to read .textContent\n                        text = element[0].text;\n\n                    $templateCache.put(templateUrl, text);\n                }\n            }\n        };\n    }];\n\n    /**\n     * @ngdoc directive\n     * @name ng.directive:select\n     * @restrict E\n     *\n     * @description\n     * HTML `SELECT` element with angular data-binding.\n     *\n     * # `ngOptions`\n     *\n     * Optionally `ngOptions` attribute can be used to dynamically generate a list of `<option>`\n     * elements for a `<select>` element using an array or an object obtained by evaluating the\n     * `ngOptions` expression.\n     *\u02dd\u02dd\n     * When an item in the select menu is select, the value of array element or object property\n     * represented by the selected option will be bound to the model identified by the `ngModel`\n     * directive of the parent select element.\n     *\n     * Optionally, a single hard-coded `<option>` element, with the value set to an empty string, can\n     * be nested into the `<select>` element. This element will then represent `null` or \"not selected\"\n     * option. See example below for demonstration.\n     *\n     * Note: `ngOptions` provides iterator facility for `<option>` element which should be used instead\n     * of {@link ng.directive:ngRepeat ngRepeat} when you want the\n     * `select` model to be bound to a non-string value. This is because an option element can currently\n     * be bound to string values only.\n     *\n     * @param {string} ngModel Assignable angular expression to data-bind to.\n     * @param {string=} name Property name of the form under which the control is published.\n     * @param {string=} required The control is considered valid only if value is entered.\n     * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to\n     *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of\n     *    `required` when you want to data-bind to the `required` attribute.\n     * @param {comprehension_expression=} ngOptions in one of the following forms:\n     *\n     *   * for array data sources:\n     *     * `label` **`for`** `value` **`in`** `array`\n     *     * `select` **`as`** `label` **`for`** `value` **`in`** `array`\n     *     * `label`  **`group by`** `group` **`for`** `value` **`in`** `array`\n     *     * `select` **`as`** `label` **`group by`** `group` **`for`** `value` **`in`** `array`\n     *   * for object data sources:\n     *     * `label` **`for (`**`key` **`,`** `value`**`) in`** `object`\n     *     * `select` **`as`** `label` **`for (`**`key` **`,`** `value`**`) in`** `object`\n     *     * `label` **`group by`** `group` **`for (`**`key`**`,`** `value`**`) in`** `object`\n     *     * `select` **`as`** `label` **`group by`** `group`\n     *         **`for` `(`**`key`**`,`** `value`**`) in`** `object`\n     *\n     * Where:\n     *\n     *   * `array` / `object`: an expression which evaluates to an array / object to iterate over.\n     *   * `value`: local variable which will refer to each item in the `array` or each property value\n     *      of `object` during iteration.\n     *   * `key`: local variable which will refer to a property name in `object` during iteration.\n     *   * `label`: The result of this expression will be the label for `<option>` element. The\n     *     `expression` will most likely refer to the `value` variable (e.g. `value.propertyName`).\n     *   * `select`: The result of this expression will be bound to the model of the parent `<select>`\n     *      element. If not specified, `select` expression will default to `value`.\n     *   * `group`: The result of this expression will be used to group options using the `<optgroup>`\n     *      DOM element.\n     *\n     * @example\n     <doc:example>\n     <doc:source>\n     <script>\n     function MyCntrl($scope) {\n          $scope.colors = [\n            {name:'black', shade:'dark'},\n            {name:'white', shade:'light'},\n            {name:'red', shade:'dark'},\n            {name:'blue', shade:'dark'},\n            {name:'yellow', shade:'light'}\n          ];\n          $scope.color = $scope.colors[2]; // red\n        }\n     </script>\n     <div ng-controller=\"MyCntrl\">\n     <ul>\n     <li ng-repeat=\"color in colors\">\n     Name: <input ng-model=\"color.name\">\n     [<a href ng-click=\"colors.splice($index, 1)\">X</a>]\n     </li>\n     <li>\n     [<a href ng-click=\"colors.push({})\">add</a>]\n     </li>\n     </ul>\n     <hr/>\n     Color (null not allowed):\n     <select ng-model=\"color\" ng-options=\"c.name for c in colors\"></select><br>\n\n     Color (null allowed):\n     <span  class=\"nullable\">\n     <select ng-model=\"color\" ng-options=\"c.name for c in colors\">\n     <option value=\"\">-- chose color --</option>\n     </select>\n     </span><br/>\n\n     Color grouped by shade:\n     <select ng-model=\"color\" ng-options=\"c.name group by c.shade for c in colors\">\n     </select><br/>\n\n\n     Select <a href ng-click=\"color={name:'not in list'}\">bogus</a>.<br>\n     <hr/>\n     Currently selected: {{ {selected_color:color}  }}\n     <div style=\"border:solid 1px black; height:20px\"\n     ng-style=\"{'background-color':color.name}\">\n     </div>\n     </div>\n     </doc:source>\n     <doc:scenario>\n     it('should check ng-options', function() {\n           expect(binding('{selected_color:color}')).toMatch('red');\n           select('color').option('0');\n           expect(binding('{selected_color:color}')).toMatch('black');\n           using('.nullable').select('color').option('');\n           expect(binding('{selected_color:color}')).toMatch('null');\n         });\n     </doc:scenario>\n     </doc:example>\n     */\n\n    var ngOptionsDirective = valueFn({ terminal: true });\n    var selectDirective = ['$compile', '$parse', function($compile,   $parse) {\n        //0000111110000000000022220000000000000000000000333300000000000000444444444444444440000000005555555555555555500000006666666666666666600000000000000077770\n        var NG_OPTIONS_REGEXP = /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w\\d]*)|(?:\\(\\s*([\\$\\w][\\$\\w\\d]*)\\s*,\\s*([\\$\\w][\\$\\w\\d]*)\\s*\\)))\\s+in\\s+(.*)$/,\n            nullModelCtrl = {$setViewValue: noop};\n\n        return {\n            restrict: 'E',\n            require: ['select', '?ngModel'],\n            controller: ['$element', '$scope', '$attrs', function($element, $scope, $attrs) {\n                var self = this,\n                    optionsMap = {},\n                    ngModelCtrl = nullModelCtrl,\n                    nullOption,\n                    unknownOption;\n\n\n                self.databound = $attrs.ngModel;\n\n\n                self.init = function(ngModelCtrl_, nullOption_, unknownOption_) {\n                    ngModelCtrl = ngModelCtrl_;\n                    nullOption = nullOption_;\n                    unknownOption = unknownOption_;\n                }\n\n\n                self.addOption = function(value) {\n                    optionsMap[value] = true;\n\n                    if (ngModelCtrl.$viewValue == value) {\n                        $element.val(value);\n                        if (unknownOption.parent()) unknownOption.remove();\n                    }\n                };\n\n\n                self.removeOption = function(value) {\n                    if (this.hasOption(value)) {\n                        delete optionsMap[value];\n                        if (ngModelCtrl.$viewValue == value) {\n                            this.renderUnknownOption(value);\n                        }\n                    }\n                };\n\n\n                self.renderUnknownOption = function(val) {\n                    var unknownVal = '? ' + hashKey(val) + ' ?';\n                    unknownOption.val(unknownVal);\n                    $element.prepend(unknownOption);\n                    $element.val(unknownVal);\n                    unknownOption.prop('selected', true); // needed for IE\n                }\n\n\n                self.hasOption = function(value) {\n                    return optionsMap.hasOwnProperty(value);\n                }\n\n                $scope.$on('$destroy', function() {\n                    // disable unknown option so that we don't do work when the whole select is being destroyed\n                    self.renderUnknownOption = noop;\n                });\n            }],\n\n            link: function(scope, element, attr, ctrls) {\n                // if ngModel is not defined, we don't need to do anything\n                if (!ctrls[1]) return;\n\n                var selectCtrl = ctrls[0],\n                    ngModelCtrl = ctrls[1],\n                    multiple = attr.multiple,\n                    optionsExp = attr.ngOptions,\n                    nullOption = false, // if false, user will not be able to select it (used by ngOptions)\n                    emptyOption,\n                // we can't just jqLite('<option>') since jqLite is not smart enough\n                // to create it in <select> and IE barfs otherwise.\n                    optionTemplate = jqLite(document.createElement('option')),\n                    optGroupTemplate =jqLite(document.createElement('optgroup')),\n                    unknownOption = optionTemplate.clone();\n\n                // find \"null\" option\n                for(var i = 0, children = element.children(), ii = children.length; i < ii; i++) {\n                    if (children[i].value == '') {\n                        emptyOption = nullOption = children.eq(i);\n                        break;\n                    }\n                }\n\n                selectCtrl.init(ngModelCtrl, nullOption, unknownOption);\n\n                // required validator\n                if (multiple && (attr.required || attr.ngRequired)) {\n                    var requiredValidator = function(value) {\n                        ngModelCtrl.$setValidity('required', !attr.required || (value && value.length));\n                        return value;\n                    };\n\n                    ngModelCtrl.$parsers.push(requiredValidator);\n                    ngModelCtrl.$formatters.unshift(requiredValidator);\n\n                    attr.$observe('required', function() {\n                        requiredValidator(ngModelCtrl.$viewValue);\n                    });\n                }\n\n                if (optionsExp) Options(scope, element, ngModelCtrl);\n                else if (multiple) Multiple(scope, element, ngModelCtrl);\n                else Single(scope, element, ngModelCtrl, selectCtrl);\n\n\n                ////////////////////////////\n\n\n\n                function Single(scope, selectElement, ngModelCtrl, selectCtrl) {\n                    ngModelCtrl.$render = function() {\n                        var viewValue = ngModelCtrl.$viewValue;\n\n                        if (selectCtrl.hasOption(viewValue)) {\n                            if (unknownOption.parent()) unknownOption.remove();\n                            selectElement.val(viewValue);\n                            if (viewValue === '') emptyOption.prop('selected', true); // to make IE9 happy\n                        } else {\n                            if (isUndefined(viewValue) && emptyOption) {\n                                selectElement.val('');\n                            } else {\n                                selectCtrl.renderUnknownOption(viewValue);\n                            }\n                        }\n                    };\n\n                    selectElement.bind('change', function() {\n                        scope.$apply(function() {\n                            if (unknownOption.parent()) unknownOption.remove();\n                            ngModelCtrl.$setViewValue(selectElement.val());\n                        });\n                    });\n                }\n\n                function Multiple(scope, selectElement, ctrl) {\n                    var lastView;\n                    ctrl.$render = function() {\n                        var items = new HashMap(ctrl.$viewValue);\n                        forEach(selectElement.find('option'), function(option) {\n                            option.selected = isDefined(items.get(option.value));\n                        });\n                    };\n\n                    // we have to do it on each watch since ngModel watches reference, but\n                    // we need to work of an array, so we need to see if anything was inserted/removed\n                    scope.$watch(function selectMultipleWatch() {\n                        if (!equals(lastView, ctrl.$viewValue)) {\n                            lastView = copy(ctrl.$viewValue);\n                            ctrl.$render();\n                        }\n                    });\n\n                    selectElement.bind('change', function() {\n                        scope.$apply(function() {\n                            var array = [];\n                            forEach(selectElement.find('option'), function(option) {\n                                if (option.selected) {\n                                    array.push(option.value);\n                                }\n                            });\n                            ctrl.$setViewValue(array);\n                        });\n                    });\n                }\n\n                function Options(scope, selectElement, ctrl) {\n                    var match;\n\n                    if (! (match = optionsExp.match(NG_OPTIONS_REGEXP))) {\n                        throw Error(\n                            \"Expected ngOptions in form of '_select_ (as _label_)? for (_key_,)?_value_ in _collection_'\" +\n                                \" but got '\" + optionsExp + \"'.\");\n                    }\n\n                    var displayFn = $parse(match[2] || match[1]),\n                        valueName = match[4] || match[6],\n                        keyName = match[5],\n                        groupByFn = $parse(match[3] || ''),\n                        valueFn = $parse(match[2] ? match[1] : valueName),\n                        valuesFn = $parse(match[7]),\n                    // This is an array of array of existing option groups in DOM. We try to reuse these if possible\n                    // optionGroupsCache[0] is the options with no option group\n                    // optionGroupsCache[?][0] is the parent: either the SELECT or OPTGROUP element\n                        optionGroupsCache = [[{element: selectElement, label:''}]];\n\n                    if (nullOption) {\n                        // compile the element since there might be bindings in it\n                        $compile(nullOption)(scope);\n\n                        // remove the class, which is added automatically because we recompile the element and it\n                        // becomes the compilation root\n                        nullOption.removeClass('ng-scope');\n\n                        // we need to remove it before calling selectElement.html('') because otherwise IE will\n                        // remove the label from the element. wtf?\n                        nullOption.remove();\n                    }\n\n                    // clear contents, we'll add what's needed based on the model\n                    selectElement.html('');\n\n                    selectElement.bind('change', function() {\n                        scope.$apply(function() {\n                            var optionGroup,\n                                collection = valuesFn(scope) || [],\n                                locals = {},\n                                key, value, optionElement, index, groupIndex, length, groupLength;\n\n                            if (multiple) {\n                                value = [];\n                                for (groupIndex = 0, groupLength = optionGroupsCache.length;\n                                     groupIndex < groupLength;\n                                     groupIndex++) {\n                                    // list of options for that group. (first item has the parent)\n                                    optionGroup = optionGroupsCache[groupIndex];\n\n                                    for(index = 1, length = optionGroup.length; index < length; index++) {\n                                        if ((optionElement = optionGroup[index].element)[0].selected) {\n                                            key = optionElement.val();\n                                            if (keyName) locals[keyName] = key;\n                                            locals[valueName] = collection[key];\n                                            value.push(valueFn(scope, locals));\n                                        }\n                                    }\n                                }\n                            } else {\n                                key = selectElement.val();\n                                if (key == '?') {\n                                    value = undefined;\n                                } else if (key == ''){\n                                    value = null;\n                                } else {\n                                    locals[valueName] = collection[key];\n                                    if (keyName) locals[keyName] = key;\n                                    value = valueFn(scope, locals);\n                                }\n                            }\n                            ctrl.$setViewValue(value);\n                        });\n                    });\n\n                    ctrl.$render = render;\n\n                    // TODO(vojta): can't we optimize this ?\n                    scope.$watch(render);\n\n                    function render() {\n                        var optionGroups = {'':[]}, // Temporary location for the option groups before we render them\n                            optionGroupNames = [''],\n                            optionGroupName,\n                            optionGroup,\n                            option,\n                            existingParent, existingOptions, existingOption,\n                            modelValue = ctrl.$modelValue,\n                            values = valuesFn(scope) || [],\n                            keys = keyName ? sortedKeys(values) : values,\n                            groupLength, length,\n                            groupIndex, index,\n                            locals = {},\n                            selected,\n                            selectedSet = false, // nothing is selected yet\n                            lastElement,\n                            element,\n                            label;\n\n                        if (multiple) {\n                            selectedSet = new HashMap(modelValue);\n                        }\n\n                        // We now build up the list of options we need (we merge later)\n                        for (index = 0; length = keys.length, index < length; index++) {\n                            locals[valueName] = values[keyName ? locals[keyName]=keys[index]:index];\n                            optionGroupName = groupByFn(scope, locals) || '';\n                            if (!(optionGroup = optionGroups[optionGroupName])) {\n                                optionGroup = optionGroups[optionGroupName] = [];\n                                optionGroupNames.push(optionGroupName);\n                            }\n                            if (multiple) {\n                                selected = selectedSet.remove(valueFn(scope, locals)) != undefined;\n                            } else {\n                                selected = modelValue === valueFn(scope, locals);\n                                selectedSet = selectedSet || selected; // see if at least one item is selected\n                            }\n                            label = displayFn(scope, locals); // what will be seen by the user\n                            label = label === undefined ? '' : label; // doing displayFn(scope, locals) || '' overwrites zero values\n                            optionGroup.push({\n                                id: keyName ? keys[index] : index,   // either the index into array or key from object\n                                label: label,\n                                selected: selected                   // determine if we should be selected\n                            });\n                        }\n                        if (!multiple) {\n                            if (nullOption || modelValue === null) {\n                                // insert null option if we have a placeholder, or the model is null\n                                optionGroups[''].unshift({id:'', label:'', selected:!selectedSet});\n                            } else if (!selectedSet) {\n                                // option could not be found, we have to insert the undefined item\n                                optionGroups[''].unshift({id:'?', label:'', selected:true});\n                            }\n                        }\n\n                        // Now we need to update the list of DOM nodes to match the optionGroups we computed above\n                        for (groupIndex = 0, groupLength = optionGroupNames.length;\n                             groupIndex < groupLength;\n                             groupIndex++) {\n                            // current option group name or '' if no group\n                            optionGroupName = optionGroupNames[groupIndex];\n\n                            // list of options for that group. (first item has the parent)\n                            optionGroup = optionGroups[optionGroupName];\n\n                            if (optionGroupsCache.length <= groupIndex) {\n                                // we need to grow the optionGroups\n                                existingParent = {\n                                    element: optGroupTemplate.clone().attr('label', optionGroupName),\n                                    label: optionGroup.label\n                                };\n                                existingOptions = [existingParent];\n                                optionGroupsCache.push(existingOptions);\n                                selectElement.append(existingParent.element);\n                            } else {\n                                existingOptions = optionGroupsCache[groupIndex];\n                                existingParent = existingOptions[0];  // either SELECT (no group) or OPTGROUP element\n\n                                // update the OPTGROUP label if not the same.\n                                if (existingParent.label != optionGroupName) {\n                                    existingParent.element.attr('label', existingParent.label = optionGroupName);\n                                }\n                            }\n\n                            lastElement = null;  // start at the beginning\n                            for(index = 0, length = optionGroup.length; index < length; index++) {\n                                option = optionGroup[index];\n                                if ((existingOption = existingOptions[index+1])) {\n                                    // reuse elements\n                                    lastElement = existingOption.element;\n                                    if (existingOption.label !== option.label) {\n                                        lastElement.text(existingOption.label = option.label);\n                                    }\n                                    if (existingOption.id !== option.id) {\n                                        lastElement.val(existingOption.id = option.id);\n                                    }\n                                    // lastElement.prop('selected') provided by jQuery has side-effects\n                                    if (lastElement[0].selected !== option.selected) {\n                                        lastElement.prop('selected', (existingOption.selected = option.selected));\n                                    }\n                                } else {\n                                    // grow elements\n\n                                    // if it's a null option\n                                    if (option.id === '' && nullOption) {\n                                        // put back the pre-compiled element\n                                        element = nullOption;\n                                    } else {\n                                        // jQuery(v1.4.2) Bug: We should be able to chain the method calls, but\n                                        // in this version of jQuery on some browser the .text() returns a string\n                                        // rather then the element.\n                                        (element = optionTemplate.clone())\n                                            .val(option.id)\n                                            .attr('selected', option.selected)\n                                            .text(option.label);\n                                    }\n\n                                    existingOptions.push(existingOption = {\n                                        element: element,\n                                        label: option.label,\n                                        id: option.id,\n                                        selected: option.selected\n                                    });\n                                    if (lastElement) {\n                                        lastElement.after(element);\n                                    } else {\n                                        existingParent.element.append(element);\n                                    }\n                                    lastElement = element;\n                                }\n                            }\n                            // remove any excessive OPTIONs in a group\n                            index++; // increment since the existingOptions[0] is parent element not OPTION\n                            while(existingOptions.length > index) {\n                                existingOptions.pop().element.remove();\n                            }\n                        }\n                        // remove any excessive OPTGROUPs from select\n                        while(optionGroupsCache.length > groupIndex) {\n                            optionGroupsCache.pop()[0].element.remove();\n                        }\n                    }\n                }\n            }\n        }\n    }];\n\n    var optionDirective = ['$interpolate', function($interpolate) {\n        var nullSelectCtrl = {\n            addOption: noop,\n            removeOption: noop\n        };\n\n        return {\n            restrict: 'E',\n            priority: 100,\n            compile: function(element, attr) {\n                if (isUndefined(attr.value)) {\n                    var interpolateFn = $interpolate(element.text(), true);\n                    if (!interpolateFn) {\n                        attr.$set('value', element.text());\n                    }\n                }\n\n                return function (scope, element, attr) {\n                    var selectCtrlName = '$selectController',\n                        parent = element.parent(),\n                        selectCtrl = parent.data(selectCtrlName) ||\n                            parent.parent().data(selectCtrlName); // in case we are in optgroup\n\n                    if (selectCtrl && selectCtrl.databound) {\n                        // For some reason Opera defaults to true and if not overridden this messes up the repeater.\n                        // We don't want the view to drive the initialization of the model anyway.\n                        element.prop('selected', false);\n                    } else {\n                        selectCtrl = nullSelectCtrl;\n                    }\n\n                    if (interpolateFn) {\n                        scope.$watch(interpolateFn, function interpolateWatchAction(newVal, oldVal) {\n                            attr.$set('value', newVal);\n                            if (newVal !== oldVal) selectCtrl.removeOption(oldVal);\n                            selectCtrl.addOption(newVal);\n                        });\n                    } else {\n                        selectCtrl.addOption(attr.value);\n                    }\n\n                    element.bind('$destroy', function() {\n                        selectCtrl.removeOption(attr.value);\n                    });\n                };\n            }\n        }\n    }];\n\n    var styleDirective = valueFn({\n        restrict: 'E',\n        terminal: true\n    });\n\n    //try to bind to jquery now so that one can write angular.element().read()\n    //but we will rebind on bootstrap again.\n    bindJQuery();\n\n    publishExternalAPI(angular);\n\n    jqLite(document).ready(function() {\n        angularInit(document, bootstrap);\n    });\n\n})(window, document);\nangular.element(document).find('head').append('<style type=\"text/css\">@charset \"UTF-8\";[ng\\\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak{display:none;}ng\\\\:form{display:block;}</style>');\n", "meta": {"content_hash": "d85c8c8d72578b64ca4d126f58b9ffea", "timestamp": "", "source": "github", "line_count": 14847, "max_line_length": 212, "avg_line_length": 40.17693810197346, "alnum_prop": 0.49001269054679997, "repo_name": "danielschulz/JavaScriptPerformanceEvaluation", "id": "7ce959564baa778ac56ca535447716e2f8e70964", "size": "596675", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "JavaScriptPerformanceEvaluation/src/main/webapp/app/js/angular.js", "mode": "33188", "license": "mit", "language": [{"name": "CSS", "bytes": "1443"}, {"name": "Java", "bytes": "3239"}, {"name": "JavaScript", "bytes": "369714"}]}}
{"text": "<?php\n\nnamespace SPW;\n\nclass Strings\n{\n    public static function toLabel($str)\n    {\n        $str = htmlspecialchars_decode($str, ENT_QUOTES | ENT_HTML5);\n        $str = html_entity_decode($str);\n        $str = self::removeAccent($str);\n        $str = strtolower($str);\n        $str = strip_tags($str);\n        $str = stripslashes($str);\n        $str = preg_replace('/[^a-z0-9]+/', '-', $str);\n        $str = trim($str, '-');\n\n        return $str;\n    }\n    \n    public static function removeAccent($str){\n        $str = strtr(utf8_decode($str), utf8_decode(\"\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00d2\u00d3\u00d4\u00d5\u00d6\u00d8\u00f2\u00f3\u00f4\u00f5\u00f6\u00f8\u00c8\u00c9\u00ca\u00cb\u00e8\u00e9\u00ea\u00eb\u00c7\u00e7\u00cc\u00cd\u00ce\u00cf\u00ec\u00ed\u00ee\u00ef\u00d9\u00da\u00db\u00dc\u00f9\u00fa\u00fb\u00fc\u00ff\u00d1\u00f1\"), \"aaaaaaaaaaaaooooooooooooeeeeeeeecciiiiiiiiuuuuuuuuynn\");\n        return $str;\n    }\n    \n    public static function toFloat($value) {\n        return floatval(preg_replace(array('/[^0-9\\.\\,]/', '/,/'), array('', '.'), $value));\n    }\n    public static function toInt($value) {\n        return intval(preg_replace('/[^0-9\\-]/', '', $value));\n    }\n    \n    public static function truncate($string, $length = 255, $ellipsis = '...', $at_space = true)\n    {\n        $length -= strlen($ellipsis);\n        $string_length = strlen($string);\n\n        if($string_length <= $length) {\n            return $string;\n        }\n        \n        if( $at_space && ($space_position = strrpos($string, ' ', $length - $string_length)) ) {\n            $length = $space_position;\n        }\n\n        return substr_replace($string, $ellipsis, $length);\n    }\n    \n    public static function random($length = 10, $regex = '/[0-9]|[a-z]|[A-Z]/')\n    {\n        $characters = '!\"#$%&\\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~';\n        \n        $charactersAllowedArray = array();\n        preg_match_all($regex, $characters, $charactersAllowedArray);\n        if(!sizeof($charactersAllowedArray[0])) {\n            return '';\n        }\n        \n        $charactersAllowed = implode('', $charactersAllowedArray[0]);\n        $charactersLength = strlen($charactersAllowed);\n        \n        $string = '';\n        for ($i = 0; $i < $length; $i++) {\n            $string .= $charactersAllowed[rand(0, $charactersLength - 1)];\n        }\n        \n        return $string;\n    }\n}", "meta": {"content_hash": "b362699bae0e6a8352078ece2f5333c4", "timestamp": "", "source": "github", "line_count": 69, "max_line_length": 167, "avg_line_length": 31.92753623188406, "alnum_prop": 0.5406264185201998, "repo_name": "supa-creation/zend-spw", "id": "2ac1faec57366d7ff9a9c6408b94c92c24452c0c", "size": "2256", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "src/SPW/Strings.php", "mode": "33261", "license": "mit", "language": [{"name": "PHP", "bytes": "15650"}]}}
{"text": "<img src=\"http://i.imgur.com/wYjsCqz.png\"/>\n\n# paStash condiments\nNPM Plugin Modules for Pastash NG (@pastash/pastash)\n\n\n### Notes\n* Only works with exports from `@pastash/pastash` 1.0.44 _and higher_\n* Only works with plugins and commands published in the `@pastash` keyspace\n\n\n### Usage\nTo use a plugin alongside `pastash` both should be installed globally:\n```\nnpm install -g @pastash/pastash\nnpm install -g @pastash/input_dummy\n```\n\nConfiguration functions not provided internally result in an npm lookup using a combination of `type` and `name`\n##### Example\n```\ninput {\n  dummy {}\n}\n```\n##### Lookup\n`require(\"@pastash/input_dummy\")`\n\n\n", "meta": {"content_hash": "6432d4603e43834395f96812c908c2c4", "timestamp": "", "source": "github", "line_count": 29, "max_line_length": 112, "avg_line_length": 22.137931034482758, "alnum_prop": 0.7133956386292835, "repo_name": "sipcapture/paStash", "id": "c047d6bbacf67ffa5fa2d8d1657bc541d271725f", "size": "642", "binary": false, "copies": "1", "ref": "refs/heads/next", "path": "plugins/README.md", "mode": "33188", "license": "apache-2.0", "language": [{"name": "Dockerfile", "bytes": "246"}, {"name": "JavaScript", "bytes": "695469"}, {"name": "Procfile", "bytes": "195"}, {"name": "Shell", "bytes": "5123"}, {"name": "Yacc", "bytes": "4552"}]}}
{"text": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:layout_margin=\"10dp\"\n    android:background=\"@drawable/cards_background\"\n    android:orientation=\"vertical\">\n\n    <LinearLayout\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"fill_parent\"\n\n        android:layout_marginTop=\"5dp\"\n        android:orientation=\"vertical\"\n        android:paddingBottom=\"@dimen/feed_item_padding_top_bottom\">\n\n        <LinearLayout\n            android:layout_width=\"fill_parent\"\n            android:layout_height=\"wrap_content\"\n            android:layout_marginLeft=\"@dimen/feed_item_margin\"\n            android:layout_marginRight=\"@dimen/feed_item_margin\"\n            android:orientation=\"horizontal\">\n\n\n            <in.bigo.saytrees.customview.RoundedImageView\n                android:id=\"@+id/profilePic\"\n                android:layout_width=\"@dimen/feed_item_profile_pic\"\n                android:layout_height=\"@dimen/feed_item_profile_pic\"\n                android:layout_marginBottom=\"5dp\"\n                android:scaleType=\"fitCenter\"\n                android:src=\"@drawable/ic_launcher\" />\n\n            <LinearLayout\n                android:layout_width=\"fill_parent\"\n                android:layout_height=\"wrap_content\"\n                android:layout_marginLeft=\"5dp\"\n                android:orientation=\"vertical\">\n\n                <LinearLayout\n                    android:layout_width=\"match_parent\"\n                    android:layout_height=\"match_parent\"\n                    android:layout_marginTop=\"5dp\"\n                    android:weightSum=\"2\">\n\n\n                    <TextView\n                        android:id=\"@+id/name\"\n                        android:layout_width=\"wrap_content\"\n                        android:layout_height=\"wrap_content\"\n                        android:layout_weight=\"1.4\"\n                        android:ellipsize=\"marquee\"\n                        android:marqueeRepeatLimit=\"marquee_forever\"\n                        android:scrollHorizontally=\"true\"\n                        android:singleLine=\"true\"\n                        android:text=\"Event Name\"\n                        android:textSize=\"@dimen/feed_item_profile_name\"\n                        android:textStyle=\"bold\" />\n\n                    <RelativeLayout\n                        android:layout_width=\"wrap_content\"\n                        android:layout_height=\"wrap_content\"\n                        android:layout_weight=\".6\"\n                        android:gravity=\"right\">\n\n\n                        <ImageView\n                            android:layout_width=\"15dp\"\n                            android:layout_height=\"15dp\"\n                            android:id=\"@+id/timer_icon\"\n\n                            android:src=\"@drawable/ic_timer\" />\n\n\n                        <TextView\n                            android:id=\"@+id/timestamp\"\n                            android:layout_width=\"wrap_content\"\n                            android:layout_height=\"wrap_content\"\n                            android:layout_marginLeft=\"3dp\"\n                            android:layout_marginRight=\"5dp\"\n                            android:ellipsize=\"marquee\"\n                            android:layout_toRightOf=\"@+id/timer_icon\"\n                            android:gravity=\"right\"\n                            android:marqueeRepeatLimit=\"marquee_forever\"\n                            android:scrollHorizontally=\"true\"\n                            android:singleLine=\"true\"\n                            android:text=\"5 Seconds ago\"\n                            android:textColor=\"@color/timestamp\"\n                            android:textSize=\"@dimen/feed_item_timestamp\" />\n\n                    </RelativeLayout>\n\n\n                </LinearLayout>\n\n                <TextView\n                    android:id=\"@+id/location\"\n                    android:layout_width=\"wrap_content\"\n                    android:layout_height=\"wrap_content\"\n                    android:ellipsize=\"marquee\"\n                    android:marqueeRepeatLimit=\"marquee_forever\"\n                    android:scrollHorizontally=\"true\"\n                    android:singleLine=\"true\"\n                    android:text=\"India\"\n                    android:textColor=\"@color/saytrees_green\"\n                    android:textSize=\"@dimen/feed_item_timestamp\" />\n\n\n            </LinearLayout>\n        </LinearLayout>\n\n\n        <FrameLayout\n            android:id=\"@+id/swachh_photo_layout\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"250dp\">\n\n\n            <ImageView\n\n                android:id=\"@+id/feedImage1\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"250dp\"\n                android:background=\"@color/white\"\n                android:clickable=\"true\"\n                android:scaleType=\"centerCrop\"\n                android:visibility=\"visible\" />\n\n\n            <LinearLayout\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"35dp\"\n                android:layout_gravity=\"bottom\"\n                android:background=\"@color/swachh_post_trans_bg\">\n\n\n                <TextView\n                    android:id=\"@+id/organizer\"\n                    android:layout_width=\"match_parent\"\n                    android:layout_height=\"wrap_content\"\n                    android:ellipsize=\"marquee\"\n                    android:marqueeRepeatLimit=\"marquee_forever\"\n                    android:maxLines=\"1\"\n                    android:padding=\"5dp\"\n                    android:scrollHorizontally=\"true\"\n                    android:singleLine=\"true\"\n                    android:text=\"Organizer\"\n                    android:textColor=\"@color/white\"\n                    android:textSize=\"16sp\" />\n\n\n            </LinearLayout>\n\n\n        </FrameLayout>\n\n\n        <RelativeLayout\n            android:id=\"@+id/feed_description\"\n            android:layout_width=\"match_parent\"\n\n            android:layout_height=\"wrap_content\">\n\n\n            <TextView\n                android:id=\"@+id/description\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:layout_centerVertical=\"true\"\n                android:layout_margin=\"10dp\"\n                android:maxLines=\"3\"\n                android:text=\"There is a lot of dirt inside my home. I am feeling lazy. Someone come and clean that mess.\"\n                android:textColor=\"@color/saytrees_green\"\n                android:textSize=\"14sp\"\n                android:textStyle=\"bold\"\n                android:visibility=\"visible\" />\n\n\n        </RelativeLayout>\n\n\n        <RelativeLayout\n            android:id=\"@+id/like_layout\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:layout_marginLeft=\"10dp\">\n\n            <ImageView\n                android:id=\"@+id/like_heart\"\n                android:layout_width=\"25dp\"\n                android:layout_height=\"25dp\"\n                android:src=\"@drawable/ic_heart_click\"\n                android:visibility=\"visible\" />\n\n            <TextView\n                android:id=\"@+id/like_count\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:layout_centerVertical=\"true\"\n                android:layout_marginLeft=\"10dp\"\n                android:layout_toRightOf=\"@+id/like_heart\"\n                android:text=\"25 likes\"\n                android:textColor=\"@color/background_color\"\n                android:textSize=\"15sp\"\n                android:textStyle=\"bold\"\n                android:visibility=\"visible\" />\n\n\n        </RelativeLayout>\n\n\n        <RelativeLayout\n            android:id=\"@+id/single_comment_layout\"\n\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:layout_marginLeft=\"10dp\"\n            android:layout_marginTop=\"5dp\">\n\n\n            <in.bigo.saytrees.customview.RoundedImageView\n                android:id=\"@+id/commentuser\"\n                android:layout_width=\"@dimen/comment_item_profile_pic\"\n                android:layout_height=\"@dimen/comment_item_profile_pic\"\n                android:layout_marginBottom=\"5dp\"\n                android:scaleType=\"fitCenter\"\n                android:src=\"@drawable/ic_launcher\" />\n\n\n            <TextView\n                android:id=\"@+id/usercomment\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:layout_centerVertical=\"true\"\n                android:layout_marginLeft=\"10dp\"\n                android:layout_toRightOf=\"@+id/commentuser\"\n                android:ellipsize=\"end\"\n                android:maxLines=\"2\"\n                android:scrollHorizontally=\"true\"\n                android:text=\"This is a text comment. This place is so dirty. I have seen this many times. Now this is the time to clean this mess.\"\n                android:textSize=\"16sp\"\n                android:textStyle=\"italic\"\n                android:visibility=\"visible\" />\n\n\n        </RelativeLayout>\n\n\n        <RelativeLayout\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:layout_marginLeft=\"10dp\"\n            android:layout_marginTop=\"10dp\">\n\n            <ImageView\n                android:id=\"@+id/like\"\n                android:layout_width=\"35dp\"\n                android:layout_height=\"35dp\"\n                android:layout_alignParentTop=\"true\"\n                android:layout_centerVertical=\"true\"\n                android:background=\"@drawable/ic_heart_click\"\n                android:clickable=\"true\" />\n\n\n            <ImageView\n                android:id=\"@+id/comment\"\n                android:layout_width=\"35dp\"\n                android:layout_height=\"35dp\"\n                android:layout_alignParentTop=\"true\"\n                android:layout_marginLeft=\"20dp\"\n                android:layout_marginTop=\"5dp\"\n                android:layout_toRightOf=\"@+id/like\"\n                android:clickable=\"true\"\n                android:src=\"@drawable/ic_comment_click\"\n                android:visibility=\"visible\" />\n\n            <ImageView\n                android:id=\"@+id/map\"\n                android:layout_width=\"32dp\"\n                android:layout_height=\"32dp\"\n                android:layout_alignParentTop=\"true\"\n                android:layout_marginLeft=\"20dp\"\n                android:layout_marginTop=\"8dp\"\n                android:layout_toRightOf=\"@+id/comment\"\n                android:clickable=\"true\"\n                android:src=\"@drawable/map_feed_button\"\n                android:visibility=\"visible\" />\n\n\n            <ImageView\n                android:id=\"@+id/swachh\"\n                android:layout_width=\"45dp\"\n                android:layout_height=\"45dp\"\n                android:layout_alignParentRight=\"true\"\n                android:layout_centerVertical=\"true\"\n                android:layout_marginRight=\"20dp\"\n                android:gravity=\"right\"\n                android:src=\"@drawable/swachh_highfive_click\" />\n\n\n        </RelativeLayout>\n\n\n    </LinearLayout>\n\n</LinearLayout>", "meta": {"content_hash": "e1ddd0af91c966717b7aa9c8987880a2", "timestamp": "", "source": "github", "line_count": 305, "max_line_length": 148, "avg_line_length": 37.19016393442623, "alnum_prop": 0.5204090628581504, "repo_name": "ebayohblr2014/eBay-Opportunity-Hack-Blr-2014", "id": "9cba7982870e84524f0571a146f103dac01e31c7", "size": "11343", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "say-trees/volunteer/app/app/src/main/res/layout/feed_item.xml", "mode": "33188", "license": "mit", "language": [{"name": "CSS", "bytes": "1675651"}, {"name": "D", "bytes": "27288"}, {"name": "Groovy", "bytes": "8822"}, {"name": "Java", "bytes": "4765673"}, {"name": "JavaScript", "bytes": "6757918"}, {"name": "PHP", "bytes": "5516633"}, {"name": "Perl", "bytes": "142"}, {"name": "Python", "bytes": "76491"}, {"name": "Shell", "bytes": "24443"}, {"name": "Visual Basic", "bytes": "155"}]}}
{"text": "import document\nimport interface\nimport package\n\nimport rulegenerator\nimport testgenerator\n\nclass ArgumentVisitorBase(interface.ArgumentVisitor):\n    def visitReturnValue(self, retValue):\n        self.visitAllocation(retValue)\n    \nclass SingleArgumentVisitor(ArgumentVisitorBase):\n    \"\"\"\n    Visitor which handles compound arguments and calls the accept methods\n    of each component of the compound arguments. I.e. derived visitors do not\n    have to care about compound arguments they only have to consider \"single\"\n    arguments.\n    \"\"\"\n    def visitCompound(self, compound):\n        for arg in compound.args:\n            if not arg is None:\n                arg.accept(self)\n            \n    \nclass CollectVisitor(SingleArgumentVisitor):\n    \"\"\"\n    Visitor stores all arguments it visits the common set self.args.\n    \"\"\"\n    def __init__(self):\n        self.args = set()\n        \n    def visitInput(self, inputArg):\n        self.args.add(inputArg)\n        \n    def visitParameter(self, parameter):\n        self.args.add(parameter)\n        \n    def visitConstant(self, const):\n        self.args.add(const)\n        \n    def visitRefInput(self, refInput):\n        self.args.add(refInput)\n        \n    def visitAllocation(self, allocation):\n        self.args.add(allocation)\n                           \n    def visitInputOutput(self, inputOutput):\n        self.args.add(inputOutput)\n        \n    def visitOutput(self, output):\n        self.args.add(output)\n        \nclass MethodGenerator(object):\n    \"\"\"\n    Abstract base class of all generators which output files depending on \n    operators. It provides utility functions used by the derived classes.\n    \"\"\"\n    class CollectParametersVisitor(SingleArgumentVisitor):\n        def __init__(self):\n            self.params = []\n    \n        def visitParameter(self, parameter):\n            self.params.append(parameter)\n            \n    class DocVisitor(SingleArgumentVisitor):\n        \"\"\" \n        Visitor which holds a document.\n        \"\"\"\n        def __init__(self, doc):\n            self.doc = doc\n            \n    def __init__(self):\n        self.p = None\n        self.m = None\n        self.doc = None\n    \n    def save(self, package, method, printResult = False):\n        \"\"\"\n        Writes the output of the generator for the input method to the current\n        document and optionally prints it to the standard output.\n        \"\"\"\n        self.p = package\n        self.m = method\n        self.doc = document.Document()\n        self.optionParam = self.createOptionParameter()\n        \n        self.generate()\n        \n        if printResult:\n            print self.doc.string()\n            \n    def createOptionParameter(self):\n        \"\"\"\n        Creates and returns an enum parameters which provides one value for\n        each option of the method.\n        \"\"\"\n        p = package.EnumParameter(\"dataFlow\", \"Data flow\")\n        p.isInit = True\n        for opt in self.m.options:\n            desc = package.EnumDescription(opt.ident.constant(), str(opt.name))\n            desc.name = opt.name\n            p.descriptions.append(desc)\n        return p\n            \n    def visitAll(self, visitor, visitOptionParam = True):\n        \"\"\"\n        Collects all arguments of all options and removes duplicates (i.e. \n        arguments with common identifier). Then the visitor visits all \n        remaining arguments and the option parameter if the according flag is\n        set to true.\n        \"\"\"\n        v = CollectVisitor()\n        for opt in self.m.options:\n            for arg in opt.args:\n                arg.accept(v)\n                \n        args = v.args\n        argIdents = set()\n        filteredArgs = set()\n        for arg in args:\n            if str(arg.ident) not in argIdents:\n                argIdents.add(str(arg.ident))\n                filteredArgs.add(arg)\n            \n        for arg in sorted(filteredArgs, key=lambda arg: str(arg.ident)):\n            arg.accept(visitor)\n                \n        if visitOptionParam and self.optionParam:\n            self.optionParam.accept(visitor)\n            \n    def visitOption(self, opt, visitor):\n        \"\"\"\n        The visitor visits all arguments of the given option.\n        \"\"\"\n        for arg in opt.args:\n            arg.accept(visitor)\n        \n    def namespaceEnter(self):\n        \"\"\"\n        Enters the namespace of the package the method belongs to.\n        \"\"\"\n        self.doc.namespaceEnter(\"stromx\")\n        self.doc.namespaceEnter(self.p.ident)\n        \n    def namespaceExit(self):\n        \"\"\"\n        Exits the package namespace.\n        \"\"\"\n        self.doc.namespaceExit(self.p.ident)\n        self.doc.namespaceExit(\"stromx\")\n        self.doc.blank()\n            \nclass OpHeaderGenerator(MethodGenerator):\n    \"\"\"\n    Generates the header of a method operator.\n    \"\"\"\n    class ConnectorEnumVisitor(SingleArgumentVisitor):\n        \"\"\"\n        Exports the enumeration of the IDs of all visited input and output\n        connectors.\n        \"\"\"\n        def __init__(self):\n            self.connectors = set()\n            \n        def visitRefInput(self, refInputArg):\n            self.connectors.add(refInputArg)\n    \n        def visitInput(self, inputArg):\n            self.connectors.add(inputArg)\n    \n        def visitInputOutput(self, arg):\n            self.connectors.add(arg)\n    \n        def visitOutput(self, output):\n            self.connectors.add(output)\n            \n        def visitAllocation(self, allocation):\n            self.connectors.add(allocation)\n            \n        def export(self, doc):\n            connectorIds = [i.ident.constant() for i in self.connectors]\n            doc.enum(\"ConnectorId\", set(connectorIds))\n            \n    class ParameterEnumVisitor(MethodGenerator.CollectParametersVisitor):\n        \"\"\"\n        Exports the enumeration of the parameter IDs of all visited parameters.\n        \"\"\"\n        def export(self, doc):\n            paramIds = [p.ident.constant() for p in self.params]\n            doc.enum(\"ParameterId\", set(paramIds))\n        \n    class DataMemberVisitor(MethodGenerator.DocVisitor):\n        \"\"\"\n        Exports class members for the values of all visited parameters.\n        \"\"\"\n        def visitParameter(self, parameter):\n            l = \"{0} {1};\".format(parameter.dataType.concreteTypeId(),\n                                  parameter.ident.attribute())\n            self.doc.line(l)\n        \n    class DescriptionsVisitor(MethodGenerator.DocVisitor):\n        \"\"\"\n        Exports class members for the parameter description of all visited\n        parameters.\n        \"\"\"\n        def visitParameter(self, parameter):\n            if parameter.argType == package.ArgType.PLAIN:\n                self.doc.line((\"runtime::Parameter* m_{0}Parameter;\"\n                              ).format(parameter.ident))\n            elif parameter.argType == package.ArgType.ENUM:\n                self.doc.line((\"runtime::EnumParameter* m_{0}Parameter;\"\n                              ).format(parameter.ident))\n            elif parameter.argType == package.ArgType.NUMERIC:\n                self.doc.line((\"runtime::NumericParameter<{1}>* m_{0}Parameter;\"\n                              ).format(parameter.ident,\n                                       parameter.dataType.typeId()))\n            elif parameter.argType == package.ArgType.MATRIX:\n                self.doc.line((\"runtime::MatrixParameter* m_{0}Parameter;\"\n                              ).format(parameter.ident))\n            else:\n                assert(False)\n        \n        def visitOutput(self, arg):\n            self.visitInput(arg)\n            \n        def visitInputOutput(self, arg):\n            self.visitInput(arg)\n            \n        def visitAllocation(self, arg):\n            self.visitInput(arg)\n            \n        def visitRefInput(self, arg):\n            self.visitInput(arg)\n            \n        def visitInput(self, arg):\n            if arg.argType == package.ArgType.MATRIX:\n                self.doc.line((\n                    \"runtime::MatrixDescription* m_{0}Description;\"\n                ).format(arg.ident))\n            else:\n                self.doc.line((\n                    \"runtime::Description* m_{0}Description;\"\n                ).format(arg.ident))\n            \n    class EnumParameterIdVisitor(MethodGenerator.DocVisitor):\n        \"\"\"\n        Exports enumerations for the IDs of all visited enumeration parameters.\n        \"\"\"\n        def visitParameter(self, parameter):\n            if parameter.argType != package.ArgType.ENUM:\n                return\n                \n            keys = []\n            for desc in parameter.descriptions:\n                keys.append(desc.ident)\n            enumName = \"{0}Id\".format(parameter.ident.className())\n            self.doc.enum(enumName, keys)\n            \n    class EnumConversionDeclVisitor(MethodGenerator.DocVisitor):\n        \"\"\"\n        Exports declarations of conversion functions for each visited \n        enumeration parameter.\n        \"\"\"\n        def visitParameter(self, parameter):\n            if parameter.argType != package.ArgType.ENUM:\n                return\n                \n            name = parameter.ident.className()\n            l = \"int convert{0}(const runtime::Enum & value);\".format(name)\n            self.doc.line(l)\n    \n    def generate(self):\n        self.__includeGuardEnter()\n        self.__includes()\n        self.namespaceEnter()\n        self.__classEnter()\n        self.__public()\n        \n        v = OpHeaderGenerator.EnumParameterIdVisitor(self.doc)\n        self.visitAll(v)\n        \n        v = OpHeaderGenerator.ConnectorEnumVisitor()\n        self.visitAll(v)\n        v.export(self.doc)\n        \n        v = OpHeaderGenerator.ParameterEnumVisitor()\n        self.visitAll(v)\n        v.export(self.doc)\n        \n        self.__constructor()\n        self.__kernelOverloads()\n        \n        self.__private()\n        self.__statics()\n        self.__setupFunctions()\n        \n        v = OpHeaderGenerator.EnumConversionDeclVisitor(self.doc)\n        self.visitAll(v, False)\n        self.doc.blank()\n        \n        v = OpHeaderGenerator.DataMemberVisitor(self.doc)\n        self.visitAll(v)\n        \n        v = OpHeaderGenerator.DescriptionsVisitor(self.doc)\n        self.visitAll(v)\n        \n        self.__classExit()\n        self.namespaceExit()\n        self.__includeGuardExit()\n        \n        filename = \"stromx/{0}/{1}.h\".format(self.p.ident,\n                                             self.m.ident.className())\n        with file(filename, \"w\") as f:\n            f.write(self.doc.string())\n    \n    def __includes(self):\n        self.doc.line('#include \"stromx/{0}/Config.h\"'.format(self.p.ident))\n        self.doc.line('#include <stromx/cvsupport/Matrix.h>')\n        self.doc.line('#include <stromx/runtime/Enum.h>')\n        self.doc.line('#include <stromx/runtime/EnumParameter.h>')\n        self.doc.line('#include <stromx/runtime/List.h>')\n        self.doc.line('#include <stromx/runtime/MatrixDescription.h>')\n        self.doc.line('#include <stromx/runtime/MatrixParameter.h>')\n        self.doc.line('#include <stromx/runtime/NumericParameter.h>')\n        self.doc.line('#include <stromx/runtime/OperatorException.h>')\n        self.doc.line('#include <stromx/runtime/OperatorKernel.h>')\n        self.doc.line('#include <stromx/runtime/Primitive.h>')\n        self.doc.blank()\n        \n    def __includeGuardEnter(self):\n        self.doc.line(\"#ifndef {0}\".format(self.__includeGuard()))\n        self.doc.line(\"#define {0}\".format(self.__includeGuard()))\n        self.doc.blank()\n        \n    def __classEnter(self):\n        self.doc.line(\"class {0} {1} : public runtime::OperatorKernel\".format(\n                      self.__apiDecl(), self.m.ident.className()))\n        self.doc.line(\"{\")\n        self.doc.increaseIndent()  \n        \n    def __public(self):\n        self.doc.label(\"public\")\n        \n    def __constructor(self):\n        self.doc.line(\"{0}();\".format(self.m.ident.className()))\n        \n    def __kernelOverloads(self):\n        self.doc.line(\"virtual OperatorKernel* clone() const \"\n                      \"{{ return new {0}; }}\".format(self.m.ident.className()))\n        self.doc.line(\"virtual void setParameter(const unsigned int id, \"\n                      \"const runtime::Data& value);\")\n        self.doc.line(\"virtual const runtime::DataRef getParameter(\"\n                      \"const unsigned int id) const;\")\n        self.doc.line(\"void initialize();\")\n        self.doc.line(\"virtual void execute(runtime::DataProvider& provider);\")\n        self.doc.blank()\n        \n    def __private(self):\n        self.doc.label(\"private\")\n        \n    def __statics(self):\n        self.doc.line(\"static const std::string PACKAGE;\")\n        self.doc.line(\"static const runtime::Version VERSION;\")\n        self.doc.line(\"static const std::string TYPE;\")\n        self.doc.blank()\n        \n    def __setupFunctions(self):\n        self.doc.line(\"const std::vector<const runtime::Parameter*> \"\n                      \"setupInitParameters();\")\n        self.doc.line(\"const std::vector<const runtime::Parameter*> \"\n                      \"setupParameters();\")\n        self.doc.line(\"const std::vector<const runtime::Description*> \"\n                      \"setupInputs();\")\n        self.doc.line(\"const std::vector<const runtime::Description*> \"\n                      \"setupOutputs();\")\n        self.doc.blank()\n        \n    def __classExit(self):\n        self.doc.decreaseIndent()\n        self.doc.line(\"};\")\n        \n    def __includeGuardExit(self):\n        self.doc.line(\"#endif // {0}\".format(self.__includeGuard()))\n        \n    def __includeGuard(self):\n        return \"STROMX_{0}_{1}_H\".format(self.p.ident.upper(),\n                                         self.m.ident.upper())\n    \n    def __apiDecl(self):\n        return \"STROMX_{0}_API\".format(self.p.ident.upper())\n            \nclass OpImplGenerator(MethodGenerator):\n    \"\"\"\n    Generates the header of a method operator.\n    \"\"\"\n    class ParameterInitVisitor(MethodGenerator.CollectParametersVisitor):\n        \"\"\"\n        Exports the constructor initialization for all visited parameter data \n        members .\n        \"\"\"\n        def export(self, doc):\n            for i, p in enumerate(self.params):\n                defaultValue = p.default if p.default != None else \"\"\n                defaultValue = document.pythonToCpp(defaultValue)\n                init = \"{0}({1})\".format(p.ident.attribute(), defaultValue)\n                if i != len(self.params) - 1:\n                    doc.line(\"{0},\".format(init))\n                else:\n                    doc.line(init)\n            \n    class GetParametersVisitor(MethodGenerator.DocVisitor):\n        \"\"\"\n        Exports case sections which return the values of all visited \n        parameters.\n        \"\"\"\n        def visitParameter(self, parameter):\n            self.doc.label(\"case {0}\".format(parameter.ident.constant()))\n            self.doc.line(\"return {0};\".format(parameter.ident.attribute()))\n                    \n    class SetParametersVisitor(MethodGenerator.DocVisitor):\n        \"\"\"\n        Exports case sections which set the values of all visited parameters.\n        \"\"\"\n        def visitParameter(self, parameter):\n            l = \"\"\n            if parameter.argType == package.ArgType.PLAIN:\n                pass\n            elif parameter.argType == package.ArgType.ENUM:\n                l = (\"cvsupport::checkEnumValue(castedValue, {0}Parameter, *this);\"\n                    ).format(parameter.ident.attribute())\n            elif parameter.argType == package.ArgType.NUMERIC:\n                l = (\"cvsupport::checkNumericValue(castedValue, {0}Parameter, *this);\"\n                    ).format(parameter.ident.attribute())\n            elif parameter.argType == package.ArgType.MATRIX:\n                l = (\"cvsupport::checkMatrixValue(castedValue, {0}Parameter, *this);\"\n                    ).format(parameter.ident.attribute())\n            else:\n                assert(False)\n                \n            self.__setParameterWithCheck(parameter, l)\n            \n        def __setParameterWithCheck(self, parameter, check):\n            self.doc.label(\"case {0}\".format(parameter.ident.constant()))\n            self.doc.scopeEnter()\n            self.doc.line((\"const {0} & castedValue = runtime::data_cast<{1}>(value);\"\n                          ).format(parameter.dataType.typeId(),\n                                   parameter.dataType.typeId()))\n            \n            l = (\"if(! castedValue.variant().isVariant({0}))\".format(\n                                                parameter.dataType.variant()))\n            self.doc.line(l)\n            self.doc.scopeEnter()\n            l = 'throw runtime::WrongParameterType(parameter(id), *this);'\n            self.doc.line(l)\n            self.doc.scopeExit()\n            \n            if check != \"\":\n                self.doc.line(check)\n            \n            checkParams = rulegenerator.CheckParameterVisitor(self.doc,\n                                                              parameter)\n            for rule in parameter.rules:\n                rule.accept(checkParams)\n                \n            self.doc.line((\"{0} = castedValue;\"\n                          ).format(parameter.ident.attribute()))\n            self.doc.scopeExit()\n            self.doc.line(\"break;\")\n                \n    class SetupParametersVisitor(MethodGenerator.DocVisitor):\n        \"\"\"\n        Exports the allocation of the descriptions of all visited parameters.\n        \"\"\"\n        def __init__(self, doc, isInit = False):\n            super(OpImplGenerator.SetupParametersVisitor, self).__init__(doc)\n            self.isInit = isInit\n            \n        def visitParameter(self, parameter):\n            if parameter.argType == package.ArgType.PLAIN:\n                self.__visitPlainParameter(parameter)\n            elif parameter.argType == package.ArgType.ENUM:\n                self.__visitEnumParameter(parameter)\n            elif parameter.argType == package.ArgType.MATRIX:\n                self.__visitMatrixParameter(parameter)\n            elif parameter.argType == package.ArgType.NUMERIC:\n                self.__visitNumericParameter(parameter)\n            else:\n                assert(False)\n            \n        def __visitPlainParameter(self, parameter):\n            ident = \"m_{0}Parameter\".format(parameter.ident)\n            l = \"{0} = new runtime::Parameter({1}, {2});\"\\\n                .format(ident, parameter.ident.constant(),\n                        parameter.dataType.variant())\n            self.doc.line(l)\n            self.__accessMode(ident)\n            l = '{0}->setTitle(L_(\"{1}\"));'.format(ident, parameter.name)\n            self.doc.line(l)\n            l = \"parameters.push_back({0});\".format(ident)\n            self.doc.line(l)\n            self.doc.blank()\n            \n        def __visitEnumParameter(self, parameter):\n            ident = \"m_{0}Parameter\".format(parameter.ident)\n            l = (\"{0} = new runtime::EnumParameter({1});\"\n                ).format(ident, parameter.ident.constant())\n            self.doc.line(l)\n            self.__accessMode(ident)\n            l = '{0}->setTitle(L_(\"{1}\"));'.format(ident, parameter.name)\n            self.doc.line(l)\n\n            for desc in parameter.descriptions:\n                d = 'runtime::Enum({0})'.format(desc.ident)\n                l = '{0}->add(runtime::EnumDescription({1}, L_(\"{2}\")));'\\\n                    .format(ident, d, desc.name)\n                self.doc.line(l)\n            l = \"parameters.push_back({0});\".format(ident)\n            self.doc.line(l)\n            self.doc.blank()\n            \n        def __visitMatrixParameter(self, parameter):\n            ident = \"m_{0}Parameter\".format(parameter.ident)\n            l = \"{0} = new runtime::MatrixParameter({1}, {2});\"\\\n                .format(ident, parameter.ident.constant(),\n                        parameter.dataType.variant())\n            self.doc.line(l)\n            self.__accessMode(ident)\n            l = '{0}->setTitle(L_(\"{1}\"));'.format(ident, parameter.name)\n            self.doc.line(l)\n            self.doc.line(\"{0}->setRows({1});\".format(ident, parameter.rows))\n            self.doc.line(\"{0}->setCols({1});\".format(ident, parameter.cols))\n            l = \"parameters.push_back({0});\".format(ident)\n            self.doc.line(l)\n            self.doc.blank()\n            \n        def __visitNumericParameter(self, parameter):\n            ident = \"m_{0}Parameter\".format(parameter.ident)\n            l = (\"{0} = new runtime::NumericParameter<{2}>({1});\"\n                ).format(ident, parameter.ident.constant(),\n                         parameter.dataType.typeId())\n            self.doc.line(l)\n            self.__accessMode(ident)\n            l = '{0}->setTitle(L_(\"{1}\"));'\\\n                .format(ident, parameter.name)\n            self.doc.line(l)\n            if parameter.maxValue != None:\n                l = \"{0}->setMax({1});\".format(ident,\n                                 parameter.dataType.cast(parameter.maxValue))\n                self.doc.line(l)\n            if parameter.minValue != None:\n                l = \"{0}->setMin({1});\".format(ident,\n                                 parameter.dataType.cast(parameter.minValue))\n                self.doc.line(l)\n            if parameter.step != None:\n                l = \"{0}->setStep({1});\".format(ident,\n                                 parameter.dataType.cast(parameter.step))\n                self.doc.line(l)\n            l = \"parameters.push_back({0});\".format(ident)\n            self.doc.line(l)\n            self.doc.blank()\n            \n        def __accessMode(self, ident):\n            if self.isInit:\n                accessMode = \"NONE_WRITE\"\n            else:\n                accessMode = \"ACTIVATED_WRITE\"\n                \n            l = \"{0}->setAccessMode(runtime::Parameter::{1});\"\\\n                .format(ident, accessMode)\n            self.doc.line(l)\n            \n            \n    class SetupOutputsVistor(MethodGenerator.DocVisitor):\n        \"\"\"\n        Exports the allocation of the descriptions of all visited outputs.\n        \"\"\"\n        def visitInputOutput(self, arg):\n            self.visitOutput(arg)\n            \n        def visitOutput(self, output):\n            if output.argType == package.ArgType.PLAIN:\n                self.__setupDescription(output)\n            elif output.argType == package.ArgType.MATRIX:\n                self.__setupMatrixDescription(output)\n            else:\n                assert(False)\n        \n        def visitAllocation(self, allocation):\n            self.visitOutput(allocation)\n            \n        def __setupDescription(self, arg):\n            l = \"runtime::Description* {0} = new runtime::Description({1}, {2});\"\\\n                .format(arg.ident, arg.ident.constant(),\n                        arg.dataType.variant())\n            self.doc.line(l)\n            l = '{0}->setTitle(L_(\"{1}\"));'.format(arg.ident, arg.name)\n            self.doc.line(l)\n            l = \"outputs.push_back({0});\".format(arg.ident)\n            self.doc.line(l)\n            self.doc.blank()\n            \n        def __setupMatrixDescription(self, arg):\n            l = \"runtime::MatrixDescription* {0} = new runtime::MatrixDescription({1}, {2});\"\\\n                .format(arg.ident, arg.ident.constant(),\n                        arg.dataType.variant())\n            self.doc.line(l)\n            l = '{0}->setTitle(L_(\"{1}\"));'.format(arg.ident, arg.name)\n            self.doc.line(l)\n            l = '{0}->setRows({1});'.format(arg.ident, arg.rows)\n            self.doc.line(l)\n            l = '{0}->setCols({1});'.format(arg.ident, arg.cols)\n            self.doc.line(l)\n            l = \"outputs.push_back({0});\".format(arg.ident)\n            self.doc.line(l)\n            self.doc.blank()\n            \n    class SetupInputsVisitor(MethodGenerator.DocVisitor):\n        \"\"\"\n        Exports the allocation of the descriptions of all visited inputs.\n        \"\"\"\n        def visitOutput(self, arg):\n            if arg.argType == package.ArgType.PLAIN:\n                self.__setupDescription(arg, True)\n            elif arg.argType == package.ArgType.MATRIX:\n                self.__setupMatrixDescription(arg, True)\n            else:\n                assert(False)\n        \n        def visitInput(self, arg):\n            if arg.argType == package.ArgType.PLAIN:\n                self.__setupDescription(arg, False)\n            elif arg.argType == package.ArgType.MATRIX:\n                self.__setupMatrixDescription(arg, False)\n            else:\n                assert(False)\n        \n        def visitInputOutput(self, arg):\n            self.visitInput(arg)\n            \n        def __setupDescription(self, arg, isOutput):\n            description = \"{0}Description\".format(arg.ident.attribute())\n            l = \"{0} = new runtime::Description({1}, {2});\"\\\n                .format(description, arg.ident.constant(),\n                        self.__getVariant(arg, isOutput))\n            self.doc.line(l)\n            l = '{0}->setTitle(L_(\"{1}\"));'\\\n                .format(description, arg.name)\n            self.doc.line(l)\n            l = \"inputs.push_back({0});\".format(description)\n            self.doc.line(l)\n            self.doc.blank()\n            \n        def __setupMatrixDescription(self, arg, isOutput):\n            description = \"{0}Description\".format(arg.ident.attribute())\n            l = (\n                \"{0} = new \"\n                \"runtime::MatrixDescription({1}, {2});\"\n            ).format(description, arg.ident.constant(), \n                     self.__getVariant(arg, isOutput))\n            self.doc.line(l)\n            l = '{0}->setTitle(\"{1}\");'.format(description, arg.name)\n            self.doc.line(l)\n            l = '{0}->setRows({1});'.format(description, arg.rows)\n            self.doc.line(l)\n            l = '{0}->setCols({1});'.format(description, arg.cols)\n            self.doc.line(l)\n            l = \"inputs.push_back({0});\".format(description)\n            self.doc.line(l)\n            self.doc.blank()\n            \n        def __getVariant(self, arg, isOutput):\n            if isOutput:\n                return arg.dataType.canBeCreatedFromVariant()\n            else:\n                return arg.dataType.variant()\n            \n    class InputMapperVisitor(MethodGenerator.DocVisitor):\n        \"\"\"\n        Exports input mappers for all visited inputs and outputs.\n        \"\"\"\n        def visitInput(self, arg):\n            self.__visit(arg)\n            \n        def visitOutput(self, arg):\n            self.__visit(arg)\n            \n        def visitInputOutput(self, arg):\n            self.__visit(arg)\n            \n        def __visit(self, arg):\n            ident = arg.ident\n            constant = arg.ident.constant()\n            l = \"runtime::Id2DataPair {0}InMapper({1});\".format(ident, constant)\n            self.doc.line(l)\n    \n    class ReceiveInputDataVisitor(SingleArgumentVisitor):\n        \"\"\"\n        Exports the receive input command for all visited inputs and outputs.\n        \"\"\"\n        def __init__(self):\n            self.line = \"\"\n            \n        def visitInput(self, inputArg):\n            self.__visit(inputArg)\n            \n        def visitOutput(self, output):\n            self.__visit(output)\n            \n        def visitInputOutput(self, arg):\n            self.__visit(arg)\n            \n        def export(self, doc):\n            if self.line != \"\":\n                doc.line(\"provider.receiveInputData({0});\".format(self.line))\n            \n        def __visit(self, arg):\n            if self.line == \"\":\n                self.line = \"{0}InMapper\".format(arg.ident)\n            else:\n                self.line += \" && {0}InMapper\".format(arg.ident)\n           \n    class InDataVisitor(MethodGenerator.DocVisitor):\n        \"\"\"\n        Exports stromx::Data* variables for all visited inputs and outputs.\n        \"\"\"\n        def visitInput(self, inputArg):\n            self.doc.line((\"const runtime::Data* \"\n                           \"{0}Data = 0;\").format(inputArg.ident))\n                           \n        def visitInputOutput(self, arg):\n            self.visitOutput(arg)\n            \n        def visitOutput(self, output):\n            self.doc.line(\"runtime::Data* {0}Data = 0;\".format(output.ident))\n            \n    class AccessVisitor(MethodGenerator.DocVisitor):\n        \"\"\"\n        Exports data accessors for all visited inputs and outputs.\n        \"\"\"\n        def visitInput(self, inputArg):\n            self.doc.line((\"runtime::ReadAccess \"\n                           \"{0}ReadAccess;\").format(inputArg.ident))\n                           \n        def visitInputOutput(self, arg):\n            self.visitOutput(arg)\n                        \n        def visitOutput(self, output):\n            mapper = \"{0}InMapper\".format(output.ident)\n            data = \"{0}Data\".format(output.ident)\n            self.doc.line((\"runtime::DataContainer inContainer = \"\n                           \"{0}.data();\").format(mapper))\n            self.doc.line(\"runtime::WriteAccess writeAccess(inContainer);\")\n            self.doc.line(\"{0} = &writeAccess.get();\".format(data))\n            \n    class CopyWriteAccessVisitor(SingleArgumentVisitor):\n        \"\"\"\n        Exports the if-conditions which either create a read access or \n        reference an existing write access to read each visited input.\n        \"\"\"\n        def __init__(self):\n            self.output = None\n            self.inputs = []\n            \n        def visitInput(self, inputArg):\n            self.inputs.append(inputArg)\n                           \n        def visitInputOutput(self, arg):\n            self.visitOutput(arg)\n            \n        def visitOutput(self, output):\n            assert(self.output == None)\n            self.output = output\n            \n        def export(self, doc):\n            # no danger of reading a write access if there is no output (i.e.\n            # no write access)\n            if self.output == None:\n                for i in self.inputs:\n                    l = (\"{0}ReadAccess = runtime::ReadAccess(\"\n                         \"{0}InMapper.data());\").format(i.ident)\n                    doc.line(l)\n                    l = \"{0}Data = &{0}ReadAccess.get();\".format(i.ident)\n                    doc.line(l)\n                doc.blank()\n                return\n                \n            # check if a read access refers to the same data as the write\n            # acess and handle this situation accordingly\n            for i in self.inputs:\n                l = \"if({0}InMapper.data() == inContainer)\".format(i.ident)\n                doc.line(l)\n                doc.scopeEnter()\n                if i.inPlace:\n                    doc.line(\"srcData = &writeAccess.get();\")\n                else:\n                    message = '\"Can not operate in place.\"'\n                    ex = (\n                        \"throw runtime::InputError({0}, *this, {1});\"\n                    ).format(i.ident.constant(), message)\n                    doc.line(ex)\n                doc.scopeExit()\n                doc.line(\"else\")\n                doc.scopeEnter()\n                l = (\"{0}ReadAccess = runtime::ReadAccess(\"\n                     \"{0}InMapper.data());\").format(i.ident)\n                doc.line(l)\n                l = \"{0}Data = &{0}ReadAccess.get();\".format(i.ident)\n                doc.line(l)\n                doc.scopeExit()\n                doc.blank()\n                \n    class CheckVariantVisitor(MethodGenerator.DocVisitor):\n        \"\"\"\n        Exports the variant check for each visited input.\n        \"\"\"\n        def visitInput(self, inputArg):\n            self.__visit(inputArg)\n                           \n        def visitInputOutput(self, arg):\n            self.__visit(arg)\n            \n        def visitOutput(self, output):\n            self.__visit(output)\n            \n        def __visit(self, arg):\n            l = (\n                \"if(! {0}Data->variant().isVariant({1}Description->variant()))\"\n            ).format(arg.ident, arg.ident.attribute())\n            self.doc.line(l)\n            self.doc.scopeEnter()\n            l = (\n                'throw runtime::InputError({0}, *this, \"Wrong input data '\n                'variant.\");'\n            ).format(arg.ident.constant())\n            self.doc.line(l)\n            self.doc.scopeExit()\n                \n    class CastedDataVisitor(MethodGenerator.DocVisitor):\n        \"\"\"\n        Exports the cast to a concrete stromx data type for each visited\n        input and output.\n        \"\"\"\n        def visitInput(self, inputArg):\n            l = (\"const {1}* {0}CastedData = \"\n                 \"runtime::data_cast<{1}>({0}Data);\").format(inputArg.ident,\n                inputArg.dataType.typeId())\n            self.doc.line(l)\n                           \n        def visitInputOutput(self, arg):\n            self.visitOutput(arg)\n            \n        def visitOutput(self, output):\n            l = (\"{1} * {0}CastedData = \"\n                 \"runtime::data_cast<{1}>({0}Data);\").format(output.ident,\n                output.dataType.typeId())\n            self.doc.line(l)\n                \n    class CheckCastedDataVisitor(MethodGenerator.DocVisitor):\n        \"\"\"\n        Exports the data check for the data check of each visited input.\n        \"\"\"\n        def visitInput(self, inputArg):\n            self.__visit(inputArg)\n                           \n        def visitInputOutput(self, arg):\n            self.__visit(arg)\n            \n        def visitOutput(self, output):\n            self.__visit(output)\n            \n        def __visit(self, arg):\n            if arg.argType == package.ArgType.MATRIX:\n                l = (\n                    \"cvsupport::checkMatrixValue(*{0}CastedData, {1}Description, *this);\"\n                ).format(arg.ident, arg.ident.attribute())\n                self.doc.line(l)\n            else:\n                pass\n    \n    class InitInVisitor(MethodGenerator.DocVisitor):\n        \"\"\"\n        Exports the initialization of the argument before the OpenCV\n        function is called.\n        \"\"\"\n        def visitConstant(self, arg):\n            self.__visit(arg)\n            \n        def visitInputOutput(self, arg):\n            self.__visit(arg)\n            \n        def visitOutput(self, output):\n            self.__visit(output)\n            \n        def __visit(self, arg):\n            self.doc.document(arg.initIn)\n        \n            \n    class CvDataVisitor(MethodGenerator.DocVisitor):\n        \"\"\"\n        Exports the conversion to a native or OpenCV data type for each visited\n        argument.\n        \"\"\"\n        def visitInput(self, inputArg):\n            cvData = \"{0} {1}CvData\".format(inputArg.cvType.typeId(), \n                                            inputArg.ident)\n            castedData = \"*{0}CastedData\".format(inputArg.ident)\n            cast = inputArg.cvType.cast(castedData)\n            l = \"{0} = {1};\".format(cvData, cast)\n            self.doc.line(l)\n                           \n        def visitInputOutput(self, arg):\n            self.visitOutput(arg)\n            \n        def visitOutput(self, inputArg):\n            cvData = \"{0} {1}CvData\".format(inputArg.cvType.typeId(), \n                                            inputArg.ident)\n            castedData = \"*{0}CastedData\".format(inputArg.ident)\n            cast = inputArg.cvType.cast(castedData)\n            l = \"{0} = {1};\".format(cvData, cast)\n            self.doc.line(l)\n            \n        def visitAllocation(self, allocation):\n            cvData = \"{0} {1}CvData;\".format(allocation.cvType.typeId(), \n                                             allocation.ident)\n            self.doc.line(cvData)\n            \n        def visitParameter(self, parameter):\n            if parameter.argType == package.ArgType.ENUM:\n                self.__visitEnumParameter(parameter)\n            else:\n                cvData = \"{0} {1}CvData\".format(parameter.cvType.typeId(), \n                                                parameter.ident)\n                castedData = parameter.cvType.cast(parameter.ident.attribute())\n                self.doc.line(\"{0} = {1};\".format(cvData, castedData))\n            \n        def __visitEnumParameter(self, parameter):\n            ident = parameter.ident\n            cvData = \"{0} {1}CvData\".format(parameter.cvType.typeId(), \n                                            ident)\n            castedData = \"convert{0}({1})\".format(ident.className(),\n                                                   ident.attribute())\n            self.doc.line(\"{0} = {1};\".format(cvData, castedData))\n            \n        def visitRefInput(self, refInput):\n            cvData = \"{0} {1}CvData\".format(refInput.cvType.typeId(), \n                                             refInput.ident)\n            rhs = \"{0}CvData\".format(refInput.refArg.ident)\n            self.doc.line(\"{0} = {1};\".format(cvData, rhs))\n            \n    class MethodArgumentVisitor(ArgumentVisitorBase):\n        \"\"\"\n        Exports the argument of the OpenCV function for each visited argument.\n        \"\"\"\n        def __init__(self):\n            self.args = []\n            \n        def visitInput(self, inputArg):\n            self.visit(inputArg)\n                           \n        def visitInputOutput(self, arg):\n            self.visitOutput(arg)\n            \n        def visitOutput(self, output):\n            self.visit(output)\n            \n        def visitAllocation(self, allocation):\n            self.visit(allocation)\n            \n        def visitParameter(self, parameter):\n            self.visit(parameter)\n            \n        def visitConstant(self, constant):\n            value = constant.value\n            value = document.pythonToCpp(value)\n            self.args.append(str(value))\n            \n        def visitRefInput(self, refInput):\n            self.visit(refInput)\n            \n        def visitReturnValue(self, retValue):\n            pass\n            \n        def visit(self, arg):\n            self.args.append(\"{0}CvData\".format(arg.ident))\n            \n        def visitCompound(self, compound):\n            self.args.append(compound.create())\n            \n        def export(self):\n            argStr = \"\"\n            for i, arg in enumerate(self.args):\n                argStr += arg\n                if i < len(self.args) - 1:\n                    argStr += \", \"\n            return argStr\n            \n    class MethodReturnValueVisitor(ArgumentVisitorBase):\n        \"\"\"\n        Exports the return value of the OpenCV function out of each visited argument.\n        \"\"\"\n        def __init__(self):\n            self.returnValue = \"\"\n            \n        def visitReturnValue(self, retVal):\n            self.returnValue = \"{0}CvData = \".format(retVal.ident)\n            \n        def export(self):\n            return self.returnValue\n            \n    class OutDataVisitor(MethodGenerator.DocVisitor):\n        \"\"\"\n        Exports the wrapping of the result data into a data container for\n        each visited output or allocation.\n        \"\"\"\n        def visitInputOutput(self, arg):\n            self.visitOutput(arg)\n            \n        def visitOutput(self, output):\n            l = \"runtime::DataContainer {0}OutContainer = inContainer;\".format(output.ident)\n            self.doc.line(l)\n            l = (\"runtime::Id2DataPair {0}OutMapper({1}, \"\n                 \"{0}OutContainer);\").format(output.ident, output.ident.constant());\n            self.doc.line(l)\n            \n        def visitAllocation(self, allocation):\n            dataType = allocation.dataType.typeId()\n            ident = allocation.ident\n            cvData = \"{0}CvData\".format(ident)\n            newObject = allocation.dataType.allocate(cvData)\n            l = \"{0}* {1}CastedData = {2};\".format(dataType, ident, newObject)\n            self.doc.line(l)\n            l = (\"runtime::DataContainer {0}OutContainer = \"\n                 \"runtime::DataContainer({0}CastedData);\").format(ident)\n            self.doc.line(l)\n            l = (\"runtime::Id2DataPair {0}OutMapper({1}, \"\n                 \"{0}OutContainer);\").format(ident, allocation.ident.constant())\n            self.doc.line(l)\n        \n    class InitOutVisitor(MethodGenerator.DocVisitor):\n        \"\"\"\n        Exports the initialization of the output argument after the OpenCV\n        function is called.\n        \"\"\"\n        def visitAllocation(self, allocation):\n            self.doc.document(allocation.initOut)\n            \n    class SendOutputDataVisitor(SingleArgumentVisitor):\n        \"\"\"\n        Exports the send output command for all visited outputs.\n        \"\"\"\n        def __init__(self):\n            self.line = \"\"\n            \n        def visitAllocation(self, output):\n            self.__visit(output)\n            \n        def visitOutput(self, output):\n            self.__visit(output)\n            \n        def visitInputOutput(self, arg):\n            self.__visit(arg)\n            \n        def export(self, doc):\n            if self.line != \"\":\n                doc.line(\"provider.sendOutputData({0});\".format(self.line))\n            \n        def __visit(self, arg):\n            if self.line == \"\":\n                self.line = \"{0}OutMapper\".format(arg.ident)\n            else:\n                self.line += \" && {0}OutMapper\".format(arg.ident)\n                \n    class EnumConversionDefVisitor(MethodGenerator.DocVisitor):\n        \"\"\"\n        Exports the function which converts an enumeration value to its \n        OpenCV value for each visited enumeration parameter.\n        \"\"\"\n        def __init__(self, doc, m):\n            super(OpImplGenerator.EnumConversionDefVisitor, self).__init__(doc)\n            self.m = m\n            \n        def visitParameter(self, parameter):\n            if parameter.argType != package.ArgType.ENUM:\n                return\n                \n            name = parameter.ident.className()\n            l = (\"int {1}::convert{0}(const runtime::Enum & value)\"\n                ).format(name, self.m.ident.className())\n            self.doc.line(l)\n            self.doc.scopeEnter()\n            self.doc.line(\"switch(int(value))\")\n            self.doc.scopeEnter()\n            for desc in parameter.descriptions:\n                self.doc.label(\"case {0}\".format(desc.ident))\n                self.doc.line(\"return {0};\".format(desc.cvIdent))\n            self.doc.label(\"default\")\n            self.doc.line((\"throw runtime::WrongParameterValue(parameter({0}),\"\n                           \" *this);\").format(parameter.ident.constant()))\n            self.doc.scopeExit()\n            self.doc.scopeExit()\n            self.doc.blank()\n        \n    def generate(self):        \n        self.__includes()\n        self.namespaceEnter()\n        self.__statics()\n        self.__constructor()\n        self.__getParameter()\n        self.__setParameter()\n        self.__setupInitParameters()\n        self.__setupParameters()\n        self.__setupInputs()\n        self.__setupOutputs()\n        self.__initialize()\n        self.__execute()\n        self.__convertEnumValues()\n        self.namespaceExit()\n        \n        \n        filename = \"stromx/{0}/{1}.cpp\".format(self.p.ident,\n                                               self.m.ident.className())\n        with file(filename, \"w\") as f:\n            f.write(self.doc.string())\n    \n    def __includes(self):\n        cvModule = str(self.p.ident)[2:]\n        self.doc.line('#include \"stromx/{0}/{1}.h\"'\\\n            .format(self.p.ident, self.m.ident.className()))\n        self.doc.blank()\n        self.doc.line('#include \"stromx/{0}/Locale.h\"'.format(self.p.ident))\n        self.doc.line('#include \"stromx/{0}/Utility.h\"'.format(self.p.ident))\n        self.doc.line('#include <stromx/cvsupport/Image.h>')\n        self.doc.line('#include <stromx/cvsupport/Matrix.h>')\n        self.doc.line('#include <stromx/cvsupport/Utilities.h>')\n        self.doc.line('#include <stromx/runtime/DataContainer.h>')\n        self.doc.line('#include <stromx/runtime/DataProvider.h>')\n        self.doc.line('#include <stromx/runtime/Id2DataComposite.h>')\n        self.doc.line('#include <stromx/runtime/Id2DataPair.h>')\n        self.doc.line('#include <stromx/runtime/ReadAccess.h>')\n        self.doc.line('#include <stromx/runtime/VariantComposite.h>')\n        self.doc.line('#include <stromx/runtime/WriteAccess.h>')\n        self.doc.line('#include <opencv2/{0}/{0}.hpp>'.format(cvModule))\n        self.doc.blank()    \n        \n    def __statics(self):\n        method = self.m.ident.className()\n        package = self.p.ident.upper()\n        self.doc.line((\"const std::string {0}::PACKAGE(STROMX_{1}_PACKAGE_\"\n                       \"NAME);\").format(method, package))\n        self.doc.line((\"const runtime::Version {0}::VERSION(\"\n                       \"STROMX_{1}_VERSION_MAJOR, STROMX_{1}_VERSION_MINOR, \"\n                       \"STROMX_{1}_VERSION_PATCH);\".format(method, package)))\n        self.doc.line('const std::string {0}::TYPE(\"{0}\");'.format(method))\n        self.doc.blank()\n        \n    def __constructor(self):\n        self.doc.line(\"{0}::{0}()\".format(self.m.ident.className()))\n        self.doc.line(\"  : runtime::OperatorKernel(TYPE, PACKAGE, VERSION, \"\n                      \"setupInitParameters()),\")\n        self.doc.increaseIndent()\n        \n        v = OpImplGenerator.ParameterInitVisitor()\n        self.visitAll(v)\n        v.export(self.doc)\n        \n        self.doc.decreaseIndent()\n        self.doc.scopeEnter()\n        self.doc.scopeExit()\n        self.doc.blank()\n        \n    def __getParameter(self):\n        self.doc.line(\"const runtime::DataRef {0}::getParameter\"\n                      \"(unsigned int id) const\"\\\n                      .format(self.m.ident.className()))\n        self.doc.scopeEnter()\n        self.doc.line(\"switch(id)\")\n        self.doc.scopeEnter()\n        \n        v = OpImplGenerator.GetParametersVisitor(self.doc)\n        self.visitAll(v)\n        \n        self.doc.label(\"default\")\n        self.doc.line(\"throw runtime::WrongParameterId(id, *this);\")\n        self.doc.scopeExit()\n        self.doc.scopeExit()\n        self.doc.blank()\n        \n    def __setParameter(self):\n        self.doc.line(\"void {0}::setParameter\"\n                      \"(unsigned int id, const runtime::Data& value)\"\\\n                      .format(self.m.ident.className()))\n        self.doc.scopeEnter()\n        self.doc.line(\"try\")\n        self.doc.scopeEnter()\n        self.doc.line(\"switch(id)\")\n        self.doc.scopeEnter()\n        \n        v = OpImplGenerator.SetParametersVisitor(self.doc)\n        self.visitAll(v)\n        \n        self.doc.label(\"default\")\n        self.doc.line(\"throw runtime::WrongParameterId(id, *this);\")\n        self.doc.scopeExit()\n        self.doc.scopeExit()\n        self.doc.line(\"catch(runtime::BadCast&)\")\n        self.doc.scopeEnter()\n        self.doc.line(\"throw runtime::WrongParameterType(parameter(id), *this);\")\n        self.doc.scopeExit()\n        self.doc.scopeExit()\n        self.doc.blank()\n        \n    def __setupInitParameters(self):\n        self.doc.line(\"const std::vector<const runtime::Parameter*> \"\n                      \"{0}::setupInitParameters()\"\\\n                      .format(self.m.ident.className()))\n        self.doc.scopeEnter()\n        self.doc.line(\"std::vector<const runtime::Parameter*> parameters;\")\n        self.doc.blank()\n        \n        if len(self.m.options) > 1:\n            v = OpImplGenerator.SetupParametersVisitor(self.doc, isInit = True)\n            self.optionParam.accept(v)\n        \n        self.doc.line(\"return parameters;\")\n        self.doc.scopeExit()\n        self.doc.blank()\n        \n    def __setupParameters(self):\n        self.doc.line(\"const std::vector<const runtime::Parameter*> \"\n                      \"{0}::setupParameters()\"\\\n                      .format(self.m.ident.className()))\n        self.doc.scopeEnter()\n        self.doc.line(\"std::vector<const runtime::Parameter*> parameters;\")\n        self.doc.blank()\n        \n        self.doc.line(\"switch(int({0}))\".format(\n                                        self.optionParam.ident.attribute()))\n        self.doc.scopeEnter()\n        for o in self.m.options:\n            self.doc.label(\"case({0})\".format(o.ident.constant()))\n            self.doc.scopeEnter()\n            \n            v = OpImplGenerator.SetupParametersVisitor(self.doc)\n            for arg in o.args:\n                arg.accept(v)\n                \n            self.doc.scopeExit()\n            self.doc.line(\"break;\")\n        self.doc.scopeExit()\n        self.doc.blank()\n        \n        self.doc.line(\"return parameters;\")\n        self.doc.scopeExit()\n        self.doc.blank()\n        \n    def __setupInputs(self):\n        self.doc.line(\"const std::vector<const runtime::Description*> \"\n                      \"{0}::setupInputs()\"\\\n                      .format(self.m.ident.className()))\n        self.doc.scopeEnter()\n        self.doc.line(\"std::vector<const runtime::Description*> inputs;\")\n        self.doc.blank()\n        \n        self.doc.line(\"switch(int({0}))\".format(\n                                        self.optionParam.ident.attribute()))\n        self.doc.scopeEnter()\n        for o in self.m.options:\n            self.doc.label(\"case({0})\".format(o.ident.constant()))\n            self.doc.scopeEnter()\n            \n            v = OpImplGenerator.SetupInputsVisitor(self.doc)\n            for arg in o.args:\n                arg.accept(v)\n                \n            self.doc.scopeExit()\n            self.doc.line(\"break;\")\n        self.doc.scopeExit()\n        self.doc.blank()\n        \n        self.doc.line(\"return inputs;\")\n        self.doc.scopeExit()\n        self.doc.blank()\n        \n    def __setupOutputs(self):\n        self.doc.line(\"const std::vector<const runtime::Description*> \"\n                      \"{0}::setupOutputs()\"\\\n                      .format(self.m.ident.className()))\n        self.doc.scopeEnter()\n        self.doc.line(\"std::vector<const runtime::Description*> outputs;\")\n        self.doc.blank()\n        \n        self.doc.line(\"switch(int({0}))\".format(\n                                        self.optionParam.ident.attribute()))\n        self.doc.scopeEnter()\n        for o in self.m.options:\n            self.doc.label(\"case({0})\".format(o.ident.constant()))\n            self.doc.scopeEnter()\n            \n            v = OpImplGenerator.SetupOutputsVistor(self.doc)\n            self.visitOption(o, v)\n                \n            self.doc.scopeExit()\n            self.doc.line(\"break;\")\n        self.doc.scopeExit()\n        self.doc.blank()\n        \n        self.doc.line(\"return outputs;\")\n        self.doc.scopeExit()\n        self.doc.blank()\n        \n    def __initialize(self):\n        self.doc.line(\"void {0}::initialize()\"\\\n                      .format(self.m.ident.className()))\n        self.doc.scopeEnter()\n        self.doc.line(\"runtime::OperatorKernel::initialize(setupInputs(), \"\n                      \"setupOutputs(), setupParameters());\")\n        self.doc.scopeExit()\n        self.doc.blank()\n        \n    def __execute(self):\n        self.doc.line(\"void {0}::execute(runtime::DataProvider & provider)\"\\\n                      .format(self.m.ident.className()))\n        self.doc.scopeEnter()\n        \n        self.doc.line(\"switch(int({0}))\".format(\n                                        self.optionParam.ident.attribute()))\n        self.doc.scopeEnter()\n        for o in self.m.options:\n            self.doc.label(\"case({0})\".format(o.ident.constant()))\n            self.doc.scopeEnter()\n            \n            v = OpImplGenerator.InputMapperVisitor(self.doc)\n            self.visitOption(o, v)\n            \n            self.doc.blank()\n            \n            v = OpImplGenerator.ReceiveInputDataVisitor()\n            self.visitOption(o, v)\n            v.export(self.doc)   \n            \n            self.doc.blank()\n            \n            v = OpImplGenerator.InDataVisitor(self.doc)\n            self.visitOption(o, v)    \n            \n            self.doc.blank()\n            \n            v = OpImplGenerator.AccessVisitor(self.doc)\n            self.visitOption(o, v)  \n            \n            self.doc.blank()\n            \n            v = OpImplGenerator.CopyWriteAccessVisitor()\n            self.visitOption(o, v)\n            v.export(self.doc)    \n            \n            v = OpImplGenerator.CheckVariantVisitor(self.doc)\n            self.visitOption(o, v) \n            \n            self.doc.blank()\n            \n            v = OpImplGenerator.CastedDataVisitor(self.doc)\n            self.visitOption(o, v)  \n            \n            v = OpImplGenerator.CheckCastedDataVisitor(self.doc)\n            self.visitOption(o, v) \n            \n            self.doc.blank()\n            \n            if o.inputCheck != None:\n                self.doc.document(o.inputCheck)\n                self.doc.blank()\n            \n            v = OpImplGenerator.InitInVisitor(self.doc)\n            self.visitOption(o, v) \n            \n            self.doc.blank()\n            \n            v = OpImplGenerator.CvDataVisitor(self.doc)\n            self.visitOption(o, v)\n            \n            self.doc.blank()\n            \n            v = OpImplGenerator.MethodReturnValueVisitor()   \n            self.visitOption(o, v)\n            retVal = v.export()\n            \n            v = OpImplGenerator.MethodArgumentVisitor()   \n            self.visitOption(o, v)\n            argStr = v.export()\n            \n            namespace = \"\"\n            if self.m.namespace != \"\":\n                namespace = \"{0}::\".format(self.m.namespace)\n                \n            self.doc.line(\"{3}{2}{0}({1});\".format(self.m.ident, argStr,\n                                                   namespace, retVal))\n            if o.postCall != None:\n                self.doc.document(o.postCall)\n                \n            self.doc.blank()\n            \n            v = OpImplGenerator.OutDataVisitor(self.doc)\n            self.visitOption(o, v)\n            \n            self.doc.blank()\n            \n            v = OpImplGenerator.InitOutVisitor(self.doc)\n            self.visitOption(o, v)\n            \n            v = OpImplGenerator.SendOutputDataVisitor()\n            self.visitOption(o, v)\n            v.export(self.doc)\n                \n            self.doc.scopeExit()\n            self.doc.line(\"break;\")\n        self.doc.scopeExit()\n        self.doc.scopeExit()\n        self.doc.blank()\n        \n    def __convertEnumValues(self):\n        v = OpImplGenerator.EnumConversionDefVisitor(self.doc, self.m)\n        self.visitAll(v, False)\n\nclass OpTestGenerator(object):\n    \"\"\"\n    Abstract base class of all generators which output operator tests.\n    \"\"\"\n    def testNames(self):\n        l = []\n        for o in self.m.options:\n            for i in range(len(o.tests)):\n                l.append(\"test{0}{1}\".format(o.ident.className(), i))\n        return l\n    \nclass OpTestHeaderGenerator(MethodGenerator, OpTestGenerator):\n    \"\"\"\n    Generates the header of an operator test.\n    \"\"\"\n    def generate(self):  \n        self.__includeGuardEnter()\n        self.__includes()\n        self.namespaceEnter()\n        self.__classEnter()\n        self.__testSuite()\n        self.doc.blank()\n        \n        self.doc.label(\"public\")\n        self.__constructor()\n        self.doc.line(\"void setUp();\")\n        self.doc.line(\"void tearDown();\")\n        self.doc.blank()\n        \n        self.doc.label(\"protected\")\n        self.__testMethods()\n        self.doc.blank()\n        \n        self.doc.label(\"private\")\n        self.doc.line(\"runtime::OperatorTester* m_operator;\")\n        self.__classExit()\n        self.namespaceExit()\n        self.__includeGuardExit()\n        \n        filename = \"stromx/{0}/test/{1}Test.h\".format(self.p.ident,\n                                                      self.m.ident.className())\n        with file(filename, \"w\") as f:\n            f.write(self.doc.string())\n        \n    def __includeGuardEnter(self):\n        self.doc.line(\"#ifndef {0}\".format(self.__includeGuard()))\n        self.doc.line(\"#define {0}\".format(self.__includeGuard()))\n        self.doc.blank()\n    \n    def __includes(self):\n        self.doc.line('#include \"stromx/{0}/Config.h\"'.format(self.p.ident))\n        self.doc.blank()\n        self.doc.line('#include <cppunit/extensions/HelperMacros.h>')\n        self.doc.line('#include <cppunit/TestFixture.h>')\n        self.doc.blank()\n        self.doc.line('#include \"stromx/runtime/OperatorTester.h\"')\n        self.doc.blank()\n            \n    def __includeGuardExit(self):\n        self.doc.line(\"#endif // {0}\".format(self.__includeGuard()))\n        \n    def __includeGuard(self):\n        return \"STROMX_{0}_{1}TEST_H\".format(self.p.ident.upper(),\n                                             self.m.ident.upper())\n    def __classEnter(self):\n        self.doc.line((\n            \"class {0}Test : public CPPUNIT_NS::TestFixture\"\n        ).format(self.m.ident.className()))\n        self.doc.line(\"{\")\n        self.doc.increaseIndent()  \n    \n    def __testSuite(self):\n        self.doc.line((\n            \"CPPUNIT_TEST_SUITE({0}Test);\"\n        ).format(self.m.ident.className()))\n        for test in self.testNames():\n            self.doc.line(\"CPPUNIT_TEST({0});\".format(test))\n        self.doc.line(\"CPPUNIT_TEST_SUITE_END();\")\n        \n    def __constructor(self):\n        self.doc.line((\n            \"{0}Test() : m_operator(0) {{}}\"\n        ).format(self.m.ident.className()))\n        \n    def __testMethods(self):\n        for test in self.testNames():\n            self.doc.line(\"void {0}();\".format(test))\n        \n    def __classExit(self):\n        self.doc.decreaseIndent()\n        self.doc.line(\"};\")       \n            \nclass OpTestImplGenerator(MethodGenerator, OpTestGenerator):  \n    \"\"\"\n    Generates the implementation of an operator test.\n    \"\"\"  \n    def __includes(self):\n        self.doc.line((\n            '#include \"stromx/{0}/test/{1}Test.h\"'\n            ).format(self.p.ident, self.m.ident.className()))\n        self.doc.blank()\n        \n        self.doc.line('#include <boost/lexical_cast.hpp>')\n        self.doc.line('#include <stromx/runtime/OperatorException.h>')\n        self.doc.line('#include <stromx/runtime/ReadAccess.h>')\n        self.doc.line('#include \"stromx/cvsupport/Image.h\"')\n        self.doc.line((\n            '#include \"stromx/{0}/{1}.h\"'\n            ).format(self.p.ident, self.m.ident.className()))\n        self.doc.blank()\n        \n    def __testSuite(self):\n        self.doc.line((\n            \"CPPUNIT_TEST_SUITE_REGISTRATION (stromx::{0}::{1}Test);\"\n            ).format(self.p.ident, self.m.ident.className()))\n        self.doc.blank()\n        \n    def __setUp(self):\n        className = self.m.ident.className()\n        self.doc.line(\"void {0}Test::setUp()\".format(className))\n        self.doc.scopeEnter()\n        self.doc.line((\n            \"m_operator = new stromx::runtime::OperatorTester(new {0});\"\n            ).format(self.m.ident.className()))\n        self.doc.scopeExit()\n        self.doc.blank()\n        \n    def __tearDown(self):\n        className = self.m.ident.className()\n        self.doc.line(\"void {0}Test::tearDown()\".format(className))\n        self.doc.scopeEnter()\n        self.doc.line(\"delete m_operator;\")\n        self.doc.scopeExit()\n        self.doc.blank()\n        \n    def __testMethods(self):\n        className = self.m.ident.className()\n        for o in self.m.options:\n            for i, test in enumerate(o.tests):\n                testName = \"test{0}{1}\".format(o.ident.className(), i)\n                \n                self.doc.line(\n                    \"void {0}Test::{1}()\".format(className, testName)\n                )\n                self.doc.scopeEnter()\n                \n                if len(self.m.options) > 1:\n                    index = \"{0}::DATA_FLOW\".format(self.m.ident.className())\n                    value = (\n                        \"runtime::Enum({0}::{1})\"\n                        ).format(self.m.ident.className(), o.ident.constant())\n                    l = \"m_operator->setParameter({0}, {1});\".format(index, value)\n                    self.doc.line(l)\n                self.doc.line(\"m_operator->initialize();\")\n                self.doc.line(\"m_operator->activate();\")\n                self.doc.blank();\n                \n                testgenerator.generate(self.doc, self.m, o.args,\n                                       test, testName)\n                self.doc.scopeExit()\n                self.doc.blank()\n\n    def generate(self):  \n        self.__includes()\n        self.__testSuite()\n        self.namespaceEnter()\n        self.__setUp()\n        self.__tearDown()\n        self.__testMethods()\n        self.namespaceExit()\n        \n        filename = \"stromx/{0}/test/{1}Test.cpp\".format(self.p.ident,\n                                                        self.m.ident.className())\n        with file(filename, \"w\") as f:\n            f.write(self.doc.string())\n            \ndef generateMethodFiles(package, method):\n    \"\"\"\n    Generates the operator and the operator tests for the given method.\n    \"\"\"\n    g = OpHeaderGenerator()\n    g.save(package, method)\n    \n    g = OpImplGenerator()\n    g.save(package, method)\n    \n    g = OpTestHeaderGenerator()\n    g.save(package, method)\n    \n    g = OpTestImplGenerator()\n    g.save(package, method)\n        \nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()     ", "meta": {"content_hash": "30e6012555d31549f582f12b6c4f2c1b", "timestamp": "", "source": "github", "line_count": 1619, "max_line_length": 94, "avg_line_length": 37.883261272390364, "alnum_prop": 0.519149560595438, "repo_name": "sparsebase/stromx", "id": "7e4f86c41abe18bb8ba8c4d66458da599e72ec14", "size": "61358", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "opencv/methodgenerator.py", "mode": "33188", "license": "apache-2.0", "language": [{"name": "C++", "bytes": "2882239"}, {"name": "CMake", "bytes": "63121"}, {"name": "Python", "bytes": "215111"}]}}
{"text": "package aima.logic.fol.kb;\r\n\r\nimport aima.logic.fol.domain.DomainFactory;\r\nimport aima.logic.fol.domain.FOLDomain;\r\nimport aima.logic.fol.inference.InferenceProcedure;\r\n\r\n/**\r\n * @author Ciaran O'Reilly\r\n * \r\n */\r\npublic class FOLKnowledgeBaseFactory {\r\n\t\r\n\tpublic static FOLKnowledgeBase createKingsKnowledgeBase(\r\n\t\t\tInferenceProcedure infp) {\r\n\t\tFOLKnowledgeBase kb = new FOLKnowledgeBase(DomainFactory.kingsDomain(),\r\n\t\t\t\tinfp);\r\n\t\tkb.tell(\"((King(x) AND Greedy(x)) => Evil(x))\");\r\n\t\tkb.tell(\"King(John)\");\r\n\t\tkb.tell(\"King(Richard)\");\r\n\t\tkb.tell(\"Greedy(John)\");\r\n\r\n\t\treturn kb;\r\n\t}\r\n\r\n\tpublic static FOLKnowledgeBase createWeaponsKnowledgeBase(\r\n\t\t\tInferenceProcedure infp) {\r\n\t\tFOLKnowledgeBase kb = new FOLKnowledgeBase(DomainFactory\r\n\t\t\t\t.weaponsDomain(), infp);\r\n\t\tkb\r\n\t\t\t\t.tell(\"( (((American(x) AND Weapon(y)) AND Sells(x,y,z)) AND Hostile(z)) => Criminal(x))\");\r\n\t\tkb.tell(\" Owns(Nono, M1)\");\r\n\t\tkb.tell(\" Missile(M1)\");\r\n\t\tkb.tell(\"((Missile(x) AND Owns(Nono,x)) => Sells(West,x,Nono))\");\r\n\t\tkb.tell(\"(Missile(x) => Weapon(x))\");\r\n\t\tkb.tell(\"(Enemy(x,America) => Hostile(x))\");\r\n\t\tkb.tell(\"American(West)\");\r\n\t\tkb.tell(\"Enemy(Nono,America)\");\r\n\r\n\t\treturn kb;\r\n\t}\r\n\r\n\tpublic static FOLKnowledgeBase createLovesAnimalKnowledgeBase(\r\n\t\t\tInferenceProcedure infp) {\r\n\t\tFOLKnowledgeBase kb = new FOLKnowledgeBase(DomainFactory\r\n\t\t\t\t.lovesAnimalDomain(), infp);\r\n\r\n\t\tkb\r\n\t\t\t\t.tell(\"FORALL x (FORALL y (Animal(y) => Loves(x, y)) => EXISTS y Loves(y, x))\");\r\n\t\tkb\r\n\t\t\t\t.tell(\"FORALL x (EXISTS y (Animal(y) AND Kills(x, y)) => FORALL z NOT(Loves(z, x)))\");\r\n\t\tkb.tell(\"FORALL x (Animal(x) => Loves(Jack, x))\");\r\n\t\tkb.tell(\"(Kills(Jack, Tuna) OR Kills(Curiosity, Tuna))\");\r\n\t\tkb.tell(\"Cat(Tuna)\");\r\n\t\tkb.tell(\"FORALL x (Cat(x) => Animal(x))\");\r\n\r\n\t\treturn kb;\r\n\t}\r\n\r\n\tpublic static FOLKnowledgeBase createRingOfThievesKnowledgeBase(\r\n\t\t\tInferenceProcedure infp) {\r\n\t\tFOLKnowledgeBase kb = new FOLKnowledgeBase(DomainFactory\r\n\t\t\t\t.ringOfThievesDomain(), infp);\r\n\r\n\t\t// s(x) => ~c(x) One who skis never gets caught\r\n\t\tkb.tell(\"(Skis(x) => NOT(Caught(x)))\");\r\n\t\t// c(x) => ~s(x) Those who are caught don't ever ski\r\n\t\tkb.tell(\"(Caught(x) => NOT(Skis(x)))\");\r\n\t\t// p(x,y) & c(y) => s(x) Jailbird parents have skiing kids\r\n\t\tkb.tell(\"((Parent(x,y) AND Caught(y)) => Skis(x))\");\r\n\t\t// s(x) & f(x,y) => s(y) All friends ski together\r\n\t\tkb.tell(\"(Skis(x) AND Friend(x,y) => Skis(y))\");\r\n\t\t// f(x,y) => f(y,x) Friendship is symmetric\r\n\t\tkb.tell(\"(Friend(x,y) => Friend(y,x))\");\r\n\t\t// FACTS\r\n\t\t// 1. { p(Mike,Joe) } Premise\r\n\t\tkb.tell(\"Parent(Mike, Joe)\");\r\n\t\t// 2. { p(Janet,Joe) } Premise\r\n\t\tkb.tell(\"Parent(Janet,Joe)\");\r\n\t\t// 3. { p(Nancy,Mike) } Premise\r\n\t\tkb.tell(\"Parent(Nancy,Mike)\");\r\n\t\t// 4. { p(Ernie,Janet) } Premise\r\n\t\tkb.tell(\"Parent(Ernie,Janet)\");\r\n\t\t// 5. { p(Bert,Nancy) } Premise\r\n\t\tkb.tell(\"Parent(Bert,Nancy)\");\r\n\t\t// 6. { p(Red,Ernie) } Premise\r\n\t\tkb.tell(\"Parent(Red,Ernie)\");\r\n\t\t// 7. { f(Red,Bert) } Premise\r\n\t\tkb.tell(\"Friend(Red,Bert)\");\r\n\t\t// 8. { f(Drew,Nancy) } Premise\r\n\t\tkb.tell(\"Friend(Drew,Nancy)\");\r\n\t\t// 9. { c(Mike) } Premise\r\n\t\tkb.tell(\"Caught(Mike)\");\r\n\t\t// 10. { c(Ernie) } Premise\r\n\t\tkb.tell(\"Caught(Ernie)\");\r\n\r\n\t\treturn kb;\r\n\t}\r\n\r\n\t// Note: see -\r\n\t// http://logic.stanford.edu/classes/cs157/2008/lectures/lecture15.pdf\r\n\t// slide 12 for where this test example was taken from.\r\n\tpublic static FOLKnowledgeBase createABCEqualityKnowledgeBase(\r\n\t\t\tInferenceProcedure infp, boolean includeEqualityAxioms) {\r\n\t\tFOLDomain domain = new FOLDomain();\r\n\t\tdomain.addConstant(\"A\");\r\n\t\tdomain.addConstant(\"B\");\r\n\t\tdomain.addConstant(\"C\");\r\n\r\n\t\tFOLKnowledgeBase kb = new FOLKnowledgeBase(domain, infp);\r\n\r\n\t\tkb.tell(\"B = A\");\r\n\t\tkb.tell(\"B = C\");\r\n\r\n\t\tif (includeEqualityAxioms) {\r\n\t\t\t// Reflexivity Axiom\r\n\t\t\tkb.tell(\"x = x\");\r\n\t\t\t// Symmetry Axiom\r\n\t\t\tkb.tell(\"(x = y => y = x)\");\r\n\t\t\t// Transitivity Axiom\r\n\t\t\tkb.tell(\"((x = y AND y = z) => x = z)\");\r\n\t\t}\r\n\r\n\t\treturn kb;\r\n\t}\r\n\r\n\t// Note: see -\r\n\t// http://logic.stanford.edu/classes/cs157/2008/lectures/lecture15.pdf\r\n\t// slide 16,17, and 18 for where this test example was taken from.\r\n\tpublic static FOLKnowledgeBase createABCDEqualityAndSubstitutionKnowledgeBase(\r\n\t\t\tInferenceProcedure infp, boolean includeEqualityAxioms) {\r\n\t\tFOLDomain domain = new FOLDomain();\r\n\t\tdomain.addConstant(\"A\");\r\n\t\tdomain.addConstant(\"B\");\r\n\t\tdomain.addConstant(\"C\");\r\n\t\tdomain.addConstant(\"D\");\r\n\t\tdomain.addPredicate(\"P\");\r\n\t\tdomain.addFunction(\"F\");\r\n\r\n\t\tFOLKnowledgeBase kb = new FOLKnowledgeBase(domain, infp);\r\n\r\n\t\tkb.tell(\"F(A) = B\");\r\n\t\tkb.tell(\"F(B) = A\");\r\n\t\tkb.tell(\"C = D\");\r\n\t\tkb.tell(\"P(A)\");\r\n\t\tkb.tell(\"P(C)\");\r\n\r\n\t\tif (includeEqualityAxioms) {\r\n\t\t\t// Reflexivity Axiom\r\n\t\t\tkb.tell(\"x = x\");\r\n\t\t\t// Symmetry Axiom\r\n\t\t\tkb.tell(\"(x = y => y = x)\");\r\n\t\t\t// Transitivity Axiom\r\n\t\t\tkb.tell(\"((x = y AND y = z) => x = z)\");\r\n\t\t\t// Function F Substitution Axiom\r\n\t\t\tkb.tell(\"((x = y AND F(y) = z) => F(x) = z)\");\r\n\t\t\t// Predicate P Substitution Axiom\r\n\t\t\tkb.tell(\"((x = y AND P(y)) => P(x))\");\r\n\t\t}\r\n\r\n\t\treturn kb;\r\n\t}\r\n}\r\n", "meta": {"content_hash": "64df8320e7dcf017d7fb662e1b8d81c7", "timestamp": "", "source": "github", "line_count": 162, "max_line_length": 95, "avg_line_length": 30.82716049382716, "alnum_prop": 0.6143372046455747, "repo_name": "pkdtheking/AI-aima-java-code", "id": "78650199a626614119c161eadab8cf2a70505495", "size": "4994", "binary": false, "copies": "1", "ref": "refs/heads/AIMA2e", "path": "src/aima/logic/fol/kb/FOLKnowledgeBaseFactory.java", "mode": "33188", "license": "mit", "language": [{"name": "HTML", "bytes": "3922"}, {"name": "Java", "bytes": "1328988"}]}}
{"text": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <title>regexp: Not compatible \ud83d\udc7c</title>\n    <link rel=\"shortcut icon\" type=\"image/png\" href=\"../../../../../favicon.png\" />\n    <link href=\"../../../../../bootstrap.min.css\" rel=\"stylesheet\">\n    <link href=\"../../../../../bootstrap-custom.css\" rel=\"stylesheet\">\n    <link href=\"//maxcdn.bootstrapcdn.com/font-awesome/4.2.0/css/font-awesome.min.css\" rel=\"stylesheet\">\n    <script src=\"../../../../../moment.min.js\"></script>\n    <!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries -->\n    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->\n    <!--[if lt IE 9]>\n      <script src=\"https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js\"></script>\n      <script src=\"https://oss.maxcdn.com/respond/1.4.2/respond.min.js\"></script>\n    <![endif]-->\n  </head>\n  <body>\n    <div class=\"container\">\n      <div class=\"navbar navbar-default\" role=\"navigation\">\n        <div class=\"container-fluid\">\n          <div class=\"navbar-header\">\n            <a class=\"navbar-brand\" href=\"../../../../..\"><i class=\"fa fa-lg fa-flag-checkered\"></i> Coq bench</a>\n          </div>\n          <div id=\"navbar\" class=\"collapse navbar-collapse\">\n            <ul class=\"nav navbar-nav\">\n              <li><a href=\"../..\">clean / released</a></li>\n              <li class=\"active\"><a href=\"\">8.14.1 / regexp - 8.6.0</a></li>\n            </ul>\n          </div>\n        </div>\n      </div>\n      <div class=\"article\">\n        <div class=\"row\">\n          <div class=\"col-md-12\">\n            <a href=\"../..\">\u00ab Up</a>\n            <h1>\n              regexp\n              <small>\n                8.6.0\n                <span class=\"label label-info\">Not compatible \ud83d\udc7c</span>\n              </small>\n            </h1>\n            <p>\ud83d\udcc5 <em><script>document.write(moment(\"2022-06-12 09:12:12 +0000\", \"YYYY-MM-DD HH:mm:ss Z\").fromNow());</script> (2022-06-12 09:12:12 UTC)</em><p>\n            <h2>Context</h2>\n            <pre># Packages matching: installed\n# Name              # Installed # Synopsis\nbase-bigarray       base\nbase-threads        base\nbase-unix           base\nconf-findutils      1           Virtual package relying on findutils\nconf-gmp            4           Virtual package relying on a GMP lib system installation\ncoq                 8.14.1      Formal proof management system\ndune                3.2.0       Fast, portable, and opinionated build system\nocaml               4.09.1      The OCaml compiler (virtual package)\nocaml-base-compiler 4.09.1      Official release 4.09.1\nocaml-config        1           OCaml Switch Configuration\nocamlfind           1.9.3       A library manager for OCaml\nzarith              1.12        Implements arithmetic and logical operations over arbitrary-precision integers\n# opam file:\nopam-version: &quot;2.0&quot;\nmaintainer: &quot;Hugo.Herbelin@inria.fr&quot;\nhomepage: &quot;https://github.com/coq-contribs/regexp&quot;\nlicense: &quot;LGPL&quot;\nbuild: [make &quot;-j%{jobs}%&quot;]\ninstall: [make &quot;install&quot;]\nremove: [&quot;rm&quot; &quot;-R&quot; &quot;%{lib}%/coq/user-contrib/RegExp&quot;]\ndepends: [\n  &quot;ocaml&quot;\n  &quot;coq&quot; {&gt;= &quot;8.6&quot; &amp; &lt; &quot;8.7~&quot;}\n]\ntags: [\n  &quot;keyword: regular expressions&quot;\n  &quot;keyword: Kleene algebra&quot;\n  &quot;category: Computer Science/Formal Languages Theory and Automata&quot;\n]\nauthors: [ &quot;Takashi Miyamoto &lt;tmiya@bu.iij4u.or.jp&gt; [http://study-func-prog.blogspot.com/]&quot; ]\nbug-reports: &quot;https://github.com/coq-contribs/regexp/issues&quot;\ndev-repo: &quot;git+https://github.com/coq-contribs/regexp.git&quot;\nsynopsis: &quot;Regular Expression&quot;\ndescription: &quot;&quot;&quot;\nThe Library RegExp is a Coq library for regular expression. The implementation is based on the Janusz Brzozowski&#39;s algorithm (&quot;Derivatives of Regular Expressions&quot;, Journal of the ACM 1964).\nThe RegExp library satisfies the axioms of Kleene Algebra. The proofs are shown in the library.&quot;&quot;&quot;\nflags: light-uninstall\nurl {\n  src: &quot;https://github.com/coq-contribs/regexp/archive/v8.6.0.tar.gz&quot;\n  checksum: &quot;md5=1504590c0ff7dfc943a2ebf97e2c1975&quot;\n}\n</pre>\n            <h2>Lint</h2>\n            <dl class=\"dl-horizontal\">\n              <dt>Command</dt>\n              <dd><code>true</code></dd>\n              <dt>Return code</dt>\n              <dd>0</dd>\n            </dl>\n            <h2>Dry install \ud83c\udfdc\ufe0f</h2>\n            <p>Dry install with the current Coq version:</p>\n            <dl class=\"dl-horizontal\">\n              <dt>Command</dt>\n              <dd><code>opam install -y --show-action coq-regexp.8.6.0 coq.8.14.1</code></dd>\n              <dt>Return code</dt>\n              <dd>5120</dd>\n              <dt>Output</dt>\n              <dd><pre>[NOTE] Package coq is already installed (current version is 8.14.1).\nThe following dependencies couldn&#39;t be met:\n  - coq-regexp -&gt; coq &lt; 8.7~ -&gt; ocaml &lt; 4.06.0\n      base of this switch (use `--unlock-base&#39; to force)\nNo solution found, exiting\n</pre></dd>\n            </dl>\n            <p>Dry install without Coq/switch base, to test if the problem was incompatibility with the current Coq/OCaml version:</p>\n            <dl class=\"dl-horizontal\">\n              <dt>Command</dt>\n              <dd><code>opam remove -y coq; opam install -y --show-action --unlock-base coq-regexp.8.6.0</code></dd>\n              <dt>Return code</dt>\n              <dd>0</dd>\n            </dl>\n            <h2>Install dependencies</h2>\n            <dl class=\"dl-horizontal\">\n              <dt>Command</dt>\n              <dd><code>true</code></dd>\n              <dt>Return code</dt>\n              <dd>0</dd>\n              <dt>Duration</dt>\n              <dd>0 s</dd>\n            </dl>\n            <h2>Install \ud83d\ude80</h2>\n            <dl class=\"dl-horizontal\">\n              <dt>Command</dt>\n              <dd><code>true</code></dd>\n              <dt>Return code</dt>\n              <dd>0</dd>\n              <dt>Duration</dt>\n              <dd>0 s</dd>\n            </dl>\n            <h2>Installation size</h2>\n            <p>No files were installed.</p>\n            <h2>Uninstall \ud83e\uddf9</h2>\n            <dl class=\"dl-horizontal\">\n              <dt>Command</dt>\n              <dd><code>true</code></dd>\n              <dt>Return code</dt>\n              <dd>0</dd>\n              <dt>Missing removes</dt>\n              <dd>\n                none\n              </dd>\n              <dt>Wrong removes</dt>\n              <dd>\n                none\n              </dd>\n            </dl>\n          </div>\n        </div>\n      </div>\n      <hr/>\n      <div class=\"footer\">\n        <p class=\"text-center\">\n          Sources are on <a href=\"https://github.com/coq-bench\">GitHub</a> \u00a9 Guillaume Claret \ud83d\udc23\n        </p>\n      </div>\n    </div>\n    <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js\"></script>\n    <script src=\"../../../../../bootstrap.min.js\"></script>\n  </body>\n</html>\n", "meta": {"content_hash": "7b9fdf36d13597ad60dbbcb530fb36bf", "timestamp": "", "source": "github", "line_count": 168, "max_line_length": 203, "avg_line_length": 42.20238095238095, "alnum_prop": 0.5471086036671368, "repo_name": "coq-bench/coq-bench.github.io", "id": "6ba3c8e4b3321c4f61d26b5028ae195e2c134899", "size": "7115", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "clean/Linux-x86_64-4.09.1-2.0.6/released/8.14.1/regexp/8.6.0.html", "mode": "33188", "license": "mit", "language": []}}
{"text": "package com.bobynoby.items;\n\nimport com.bobynoby.main.MainRegistry;\nimport com.bobynoby.main.Reference;\n\nimport net.minecraft.item.Item;\n\npublic class ItemNightVisionLens extends Item {\n\t\n\tpublic ItemNightVisionLens() {\n\t\tsetCreativeTab(MainRegistry.CREATIVE_TAB_MAIN);\n\t\tsetUnlocalizedName(Reference.BobyEXitems.NIGHTVISIONLENS.getUnlocalizedName());\n\t\tsetRegistryName(Reference.BobyEXitems.NIGHTVISIONLENS.getRegistryName());\n\t}\n\n}\n", "meta": {"content_hash": "69736f892ebe4b08eb0e69724de224f2", "timestamp": "", "source": "github", "line_count": 16, "max_line_length": 81, "avg_line_length": 27.125, "alnum_prop": 0.8179723502304147, "repo_name": "Bobynoby/Bobys-Extras", "id": "e0d452c4dd89bb420f044d16494b13a07349789d", "size": "434", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "main/java/com/bobynoby/items/ItemNightVisionLens.java", "mode": "33188", "license": "mit", "language": [{"name": "Java", "bytes": "131790"}]}}
{"text": "Playing with Twitter API, MongoDB and creating own REST api  with Flask.\n\nI'm writing this as a project to learn with.  Goals are a work\nin progress still, but I will be updating this README as things\nmove along.\n\n## Project discontinued until further notice \n\nBecause of current place of employment.  I don't want any conflicts of interest.  I started this before I changed jobs without knowing ahead of time, just was an interestng idea with lots of potential data to play with... \n", "meta": {"content_hash": "a579af828660ccf03373657f18dde956", "timestamp": "", "source": "github", "line_count": 9, "max_line_length": 222, "avg_line_length": 53.77777777777778, "alnum_prop": 0.7789256198347108, "repo_name": "metaRx/overhear", "id": "593546a5fd5c87692f42b88e99d49affb1337c00", "size": "495", "binary": false, "copies": "2", "ref": "refs/heads/master", "path": "README.md", "mode": "33188", "license": "apache-2.0", "language": [{"name": "Python", "bytes": "377"}]}}
{"text": "// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n#include \"chrome/browser/supervised_user/supervised_user_navigation_observer.h\"\n\n#include <utility>\n\n#include \"base/bind.h\"\n#include \"base/callback.h\"\n#include \"base/memory/ptr_util.h\"\n#include \"base/metrics/histogram_macros.h\"\n#include \"chrome/browser/history/history_service_factory.h\"\n#include \"chrome/browser/profiles/profile.h\"\n#include \"chrome/browser/supervised_user/supervised_user_interstitial.h\"\n#include \"chrome/browser/supervised_user/supervised_user_navigation_throttle.h\"\n#include \"chrome/browser/supervised_user/supervised_user_service.h\"\n#include \"chrome/browser/supervised_user/supervised_user_service_factory.h\"\n#include \"chrome/browser/supervised_user/supervised_user_url_filter.h\"\n#include \"chrome/browser/tab_contents/tab_util.h\"\n#include \"components/history/content/browser/history_context_helper.h\"\n#include \"components/history/core/browser/history_service.h\"\n#include \"components/history/core/browser/history_types.h\"\n#include \"components/sessions/content/content_serialized_navigation_builder.h\"\n#include \"content/public/browser/browser_thread.h\"\n#include \"content/public/browser/navigation_entry.h\"\n#include \"content/public/browser/navigation_handle.h\"\n#include \"content/public/browser/reload_type.h\"\n#include \"content/public/browser/render_frame_host.h\"\n#include \"content/public/browser/render_process_host.h\"\n\nnamespace {\n\nbool IsMainFrame(content::RenderFrameHost* render_frame_host) {\n  return !render_frame_host->GetParent();\n}\n\n}  // namespace\n\nusing content::NavigationEntry;\n\nSupervisedUserNavigationObserver::~SupervisedUserNavigationObserver() {\n  supervised_user_service_->RemoveObserver(this);\n}\n\nSupervisedUserNavigationObserver::SupervisedUserNavigationObserver(\n    content::WebContents* web_contents)\n    : content::WebContentsObserver(web_contents),\n      receiver_(web_contents, this) {\n  Profile* profile =\n      Profile::FromBrowserContext(web_contents->GetBrowserContext());\n  supervised_user_service_ =\n      SupervisedUserServiceFactory::GetForProfile(profile);\n  url_filter_ = supervised_user_service_->GetURLFilter();\n  supervised_user_service_->AddObserver(this);\n}\n\n// static\nvoid SupervisedUserNavigationObserver::OnRequestBlocked(\n    content::WebContents* web_contents,\n    const GURL& url,\n    supervised_user_error_page::FilteringBehaviorReason reason,\n    int64_t navigation_id,\n    int frame_id,\n    const OnInterstitialResultCallback& callback) {\n  SupervisedUserNavigationObserver* navigation_observer =\n      SupervisedUserNavigationObserver::FromWebContents(web_contents);\n\n  // Cancel the navigation if there is no navigation observer.\n  if (!navigation_observer) {\n    callback.Run(\n        SupervisedUserNavigationThrottle::CallbackActions::kCancelNavigation,\n        /* already_requested_permission */ false, /* is_main_frame */ false);\n    return;\n  }\n\n  navigation_observer->OnRequestBlockedInternal(url, reason, navigation_id,\n                                                frame_id, callback);\n}\n\nvoid SupervisedUserNavigationObserver::UpdateMainFrameFilteringStatus(\n    SupervisedUserURLFilter::FilteringBehavior behavior,\n    supervised_user_error_page::FilteringBehaviorReason reason) {\n  main_frame_filtering_behavior_ = behavior;\n  main_frame_filtering_behavior_reason_ = reason;\n}\n\nvoid SupervisedUserNavigationObserver::DidFinishNavigation(\n      content::NavigationHandle* navigation_handle) {\n  if (!navigation_handle->HasCommitted())\n    return;\n\n  int frame_id = navigation_handle->GetFrameTreeNodeId();\n  int64_t navigation_id = navigation_handle->GetNavigationId();\n\n  // If this is a different navigation than the one that triggered the\n  // interstitial in the frame, then interstitial is done.\n  if (base::Contains(supervised_user_interstitials_, frame_id) &&\n      navigation_id != supervised_user_interstitials_[frame_id]\n                           ->interstitial_navigation_id()) {\n    OnInterstitialDone(frame_id);\n  }\n\n  // Only filter same page navigations (eg. pushState/popState); others will\n  // have been filtered by the NavigationThrottle.\n  if (navigation_handle->IsSameDocument() &&\n      navigation_handle->IsInMainFrame()) {\n    auto* render_frame_host = web_contents()->GetMainFrame();\n    int process_id = render_frame_host->GetProcess()->GetID();\n    int routing_id = render_frame_host->GetRoutingID();\n\n    url_filter_->GetFilteringBehaviorForURLWithAsyncChecks(\n        web_contents()->GetLastCommittedURL(),\n        base::BindOnce(\n            &SupervisedUserNavigationObserver::URLFilterCheckCallback,\n            weak_ptr_factory_.GetWeakPtr(), navigation_handle->GetURL(),\n            process_id, routing_id));\n  }\n}\n\nvoid SupervisedUserNavigationObserver::FrameDeleted(\n    content::RenderFrameHost* render_frame_host) {\n  int frame_id = render_frame_host->GetFrameTreeNodeId();\n  supervised_user_interstitials_.erase(frame_id);\n}\n\nvoid SupervisedUserNavigationObserver::DidFinishLoad(\n    content::RenderFrameHost* render_frame_host,\n    const GURL& validated_url) {\n  if (IsMainFrame(render_frame_host)) {\n    bool main_frame_blocked =\n        base::Contains(supervised_user_interstitials_,\n                       render_frame_host->GetFrameTreeNodeId());\n    int count = supervised_user_interstitials_.size();\n    if (main_frame_blocked)\n      count = 0;\n\n    UMA_HISTOGRAM_COUNTS_1000(\"ManagedUsers.BlockedIframeCount\", count);\n  }\n\n  if (base::Contains(supervised_user_interstitials_,\n                     render_frame_host->GetFrameTreeNodeId())) {\n    UMA_HISTOGRAM_COUNTS_1000(\"ManagedUsers.BlockedFrameDepth\",\n                              render_frame_host->GetFrameDepth());\n  }\n}\n\nvoid SupervisedUserNavigationObserver::OnURLFilterChanged() {\n  auto* main_frame = web_contents()->GetMainFrame();\n  int main_frame_process_id = main_frame->GetProcess()->GetID();\n  int routing_id = main_frame->GetRoutingID();\n\n  url_filter_->GetFilteringBehaviorForURLWithAsyncChecks(\n      web_contents()->GetLastCommittedURL(),\n      base::BindOnce(&SupervisedUserNavigationObserver::URLFilterCheckCallback,\n                     weak_ptr_factory_.GetWeakPtr(),\n                     web_contents()->GetLastCommittedURL(),\n                     main_frame_process_id, routing_id));\n\n  MaybeUpdateRequestedHosts();\n\n  Profile* profile =\n      Profile::FromBrowserContext(web_contents()->GetBrowserContext());\n  SupervisedUserService* service =\n      SupervisedUserServiceFactory::GetForProfile(profile);\n  if (!service->IsSupervisedUserIframeFilterEnabled())\n    return;\n\n  // Iframe filtering has been enabled.\n  web_contents()->ForEachFrame(\n      base::BindRepeating(&SupervisedUserNavigationObserver::FilterRenderFrame,\n                          weak_ptr_factory_.GetWeakPtr()));\n}\n\nvoid SupervisedUserNavigationObserver::OnInterstitialDone(int frame_id) {\n  supervised_user_interstitials_.erase(frame_id);\n}\n\nvoid SupervisedUserNavigationObserver::OnRequestBlockedInternal(\n    const GURL& url,\n    supervised_user_error_page::FilteringBehaviorReason reason,\n    int64_t navigation_id,\n    int frame_id,\n    const OnInterstitialResultCallback& callback) {\n  // TODO(bauerb): Use SaneTime when available.\n  base::Time timestamp = base::Time::Now();\n  // Create a history entry for the attempt and mark it as such.  This history\n  // entry should be marked as \"not hidden\" so the user can see attempted but\n  // blocked navigations.  (This is in contrast to the normal behavior, wherein\n  // Chrome marks navigations that result in an error as hidden.)  This is to\n  // show the user the same thing that the custodian will see on the dashboard\n  // (where it gets via a different mechanism unrelated to history).\n  history::HistoryAddPageArgs add_page_args(\n      url, timestamp, history::ContextIDForWebContents(web_contents()), 0, url,\n      history::RedirectList(), ui::PAGE_TRANSITION_BLOCKED, false,\n      history::SOURCE_BROWSED, false, true);\n\n  // Add the entry to the history database.\n  Profile* profile =\n      Profile::FromBrowserContext(web_contents()->GetBrowserContext());\n  history::HistoryService* history_service =\n      HistoryServiceFactory::GetForProfile(profile,\n                                           ServiceAccessType::IMPLICIT_ACCESS);\n\n  // |history_service| is null if saving history is disabled.\n  if (history_service)\n    history_service->AddPage(add_page_args);\n\n  std::unique_ptr<NavigationEntry> entry = NavigationEntry::Create();\n  entry->SetVirtualURL(url);\n  entry->SetTimestamp(timestamp);\n  auto serialized_entry = std::make_unique<sessions::SerializedNavigationEntry>(\n      sessions::ContentSerializedNavigationBuilder::FromNavigationEntry(\n          blocked_navigations_.size(), entry.get()));\n  blocked_navigations_.push_back(std::move(serialized_entry));\n\n  // Show the interstitial.\n  const bool initial_page_load = true;\n  MaybeShowInterstitial(url, reason, initial_page_load, navigation_id, frame_id,\n                        callback);\n}\n\nvoid SupervisedUserNavigationObserver::URLFilterCheckCallback(\n    const GURL& url,\n    int render_frame_process_id,\n    int render_frame_routing_id,\n    SupervisedUserURLFilter::FilteringBehavior behavior,\n    supervised_user_error_page::FilteringBehaviorReason reason,\n    bool uncertain) {\n  auto* render_frame_host = content::RenderFrameHost::FromID(\n      render_frame_process_id, render_frame_routing_id);\n\n  if (!render_frame_host || !render_frame_host->IsRenderFrameLive())\n    return;\n\n  int frame_id = render_frame_host->GetFrameTreeNodeId();\n  bool is_showing_interstitial =\n      base::Contains(supervised_user_interstitials_, frame_id);\n  bool should_show_interstitial =\n      behavior == SupervisedUserURLFilter::FilteringBehavior::BLOCK;\n\n  // If an interstitial is being shown where it shouldn't (for e.g. because a\n  // parent just approved a request) reloading will clear it. On the other hand,\n  // if an interstitial error page is not being shown but it should be shown,\n  // then reloading will trigger the navigation throttle to show the error page.\n  if (is_showing_interstitial != should_show_interstitial) {\n    if (IsMainFrame(render_frame_host)) {\n      web_contents()->GetController().Reload(content::ReloadType::NORMAL,\n                                             /* check_for_repost */ false);\n      return;\n    }\n    render_frame_host->Reload();\n  }\n}\n\nvoid SupervisedUserNavigationObserver::MaybeShowInterstitial(\n    const GURL& url,\n    supervised_user_error_page::FilteringBehaviorReason reason,\n    bool initial_page_load,\n    int64_t navigation_id,\n    int frame_id,\n    const OnInterstitialResultCallback& callback) {\n  std::unique_ptr<SupervisedUserInterstitial> interstitial =\n      SupervisedUserInterstitial::Create(web_contents(), url, reason, frame_id,\n                                         navigation_id);\n\n  supervised_user_interstitials_[frame_id] = std::move(interstitial);\n\n  bool already_requested = base::Contains(requested_hosts_, url.host());\n  bool is_main_frame =\n      frame_id == web_contents()->GetMainFrame()->GetFrameTreeNodeId();\n\n  callback.Run(SupervisedUserNavigationThrottle::CallbackActions::\n                   kCancelWithInterstitial,\n               already_requested, is_main_frame);\n}\n\nvoid SupervisedUserNavigationObserver::FilterRenderFrame(\n    content::RenderFrameHost* render_frame_host) {\n  // If the RenderFrameHost is not live return.\n  // If the RenderFrameHost belongs to the main frame, return. This is because\n  // the main frame is already filtered in\n  // |SupervisedUserNavigationObserver::OnURLFilterChanged|.\n  if (!render_frame_host->IsRenderFrameLive() || IsMainFrame(render_frame_host))\n    return;\n\n  const GURL& last_committed_url = render_frame_host->GetLastCommittedURL();\n\n  url_filter_->GetFilteringBehaviorForURLWithAsyncChecks(\n      web_contents()->GetLastCommittedURL(),\n      base::BindOnce(&SupervisedUserNavigationObserver::URLFilterCheckCallback,\n                     weak_ptr_factory_.GetWeakPtr(), last_committed_url,\n                     render_frame_host->GetProcess()->GetID(),\n                     render_frame_host->GetRoutingID()));\n}\n\nvoid SupervisedUserNavigationObserver::GoBack() {\n  auto* render_frame_host = receiver_.GetCurrentTargetFrame();\n  auto id = render_frame_host->GetFrameTreeNodeId();\n\n  // Request can come only from the main frame.\n  if (!IsMainFrame(render_frame_host))\n    return;\n\n  if (base::Contains(supervised_user_interstitials_, id))\n    supervised_user_interstitials_[id]->GoBack();\n}\n\nvoid SupervisedUserNavigationObserver::RequestPermission(\n    RequestPermissionCallback callback) {\n  auto* render_frame_host = receiver_.GetCurrentTargetFrame();\n  int id = render_frame_host->GetFrameTreeNodeId();\n\n  if (base::Contains(supervised_user_interstitials_, id)) {\n    SupervisedUserInterstitial* interstitial =\n        supervised_user_interstitials_[id].get();\n\n    interstitial->RequestPermission(\n        base::BindOnce(&SupervisedUserNavigationObserver::RequestCreated,\n                       weak_ptr_factory_.GetWeakPtr(), std::move(callback),\n                       interstitial->url().host()));\n  }\n}\n\nvoid SupervisedUserNavigationObserver::Feedback() {\n  auto* render_frame_host = receiver_.GetCurrentTargetFrame();\n  int id = render_frame_host->GetFrameTreeNodeId();\n\n  if (base::Contains(supervised_user_interstitials_, id))\n    supervised_user_interstitials_[id]->ShowFeedback();\n}\n\nvoid SupervisedUserNavigationObserver::RequestCreated(\n    RequestPermissionCallback callback,\n    const std::string& host,\n    bool successfully_created_request) {\n  if (successfully_created_request)\n    requested_hosts_.insert(host);\n  std::move(callback).Run(successfully_created_request);\n}\n\nvoid SupervisedUserNavigationObserver::MaybeUpdateRequestedHosts() {\n  SupervisedUserURLFilter::FilteringBehavior filtering_behavior;\n\n  for (auto iter = requested_hosts_.begin(); iter != requested_hosts_.end();) {\n    bool is_manual = url_filter_->GetManualFilteringBehaviorForURL(\n        GURL(*iter), &filtering_behavior);\n\n    if (is_manual && filtering_behavior ==\n                         SupervisedUserURLFilter::FilteringBehavior::ALLOW) {\n      iter = requested_hosts_.erase(iter);\n    } else {\n      iter++;\n    }\n  }\n}\n\nWEB_CONTENTS_USER_DATA_KEY_IMPL(SupervisedUserNavigationObserver)\n", "meta": {"content_hash": "7dc156e2630b29722b79d8d8589c3c2b", "timestamp": "", "source": "github", "line_count": 358, "max_line_length": 80, "avg_line_length": 40.20670391061452, "alnum_prop": 0.7214811727108518, "repo_name": "endlessm/chromium-browser", "id": "5406c3f478054bee9d0096da98964573640c3da6", "size": "14394", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "chrome/browser/supervised_user/supervised_user_navigation_observer.cc", "mode": "33188", "license": "bsd-3-clause", "language": []}}
{"text": "So you want to contribute to watney? Or maybe fork it and use in your own slack room with your own integrations? Here are a few topics that will help.\n\nDefinitely read these things if you plan on contributing back to Watney itself.\n\n# Setup\n\nGetting started should be as simple as:\n\n- Fork the repo on github\n- Clone your fork locally\n- use `npm install` to install the dependencies\n- copy `lib/config.json` to `lib/config.user.json`\n- Note: if you want to develop in the cfml slack room, contact an admin for an api key and you can skip these next steps.  It is easy to set up your own personal slack room though if you think you will be testing frequently.\n  - go to the slack room that you want to integrate with, 'Configure Integrations'\n  - search for 'bots' and add that integration\n  - come up with a username for your bot and get an api key\n- update `lib.config.user.json` with appropriate values, your api key and your bot's username especially. You probably want to ignore the #cfml-general room - you can not remove your bot from that room and probably don't want to spam it while you develop. Add ignores **without** the octothorpe. Do this: `\"ignoreChannels\": [\"cfml-general\"]` not this: `\"ignoreChannels\": [\"#cfml-general\"]`\n- run `node main.js` to connect and test!\n\nThat may have seemed complicated, but really shouldn't take more than a few minutes.\n\n## Style and Quality\n\nTry and match style of the plugin you are in - if you are the one writing the plugin, feel free to use your own style - within the style guidelines set up.\n\nWe use JSCS and JSHint.  Please make sure you run your code through these tools before submitting a PR. Appropriate \"rc\" files for both are in the root of the repository.\n\n### IntelliJ\n\nIf you are using intellij, JSCS and JSHint support is built in.  For JSCS you still have to download the JSCS npm module first and point to it.  Use the supplied rc files though for your configuration.\n\nYou also want to change your Javascript Language Version to ECMAScript 6.\n\n### Sublime Text 3\n\nPackages for JSHint and JSCS are available through [package control](https://packagecontrol.io/) ([install instructions](https://packagecontrol.io/installation#st3)). There are several JSHint plugins available, but most of us use [JSHint Gutter](https://packagecontrol.io/packages/JSHint%20Gutter). Use [JSCS Formatter](https://packagecontrol.io/packages/JSCS-Formatter) to auto-format your code according to `.jscsrc` rules with a single keystroke.\n\n# Notes\n\n`main.js` is written using ES5 level node.js code.  This bootstraps the whole process, and for most development you shouldn't need to modify it.\n\nThe project uses [babel](https://babeljs.io/) to allow us to _optionally_ write ES6 (ES2015)+ level code in all of the plugins.  All local modules (not npm dependencies) loaded will be transpiled automatically, so you can use ES5 plus to develop them.  If you are more comfortable sticking with ES5, go for it!  If you are trying to update an existing module written in ES6, please try to match its style.\n\nThe only sticking point about transpiling from ES6 is that debugging can be difficult with many editors (although that should be improving).  You can use `console.log` of course, and there is also `bot.log()` available in plugins that works the same way but only actually logs anything when configured with `debug: true` in your `config.user.json` file.\n\n# Plugin API\n\nThere are really only a few things to know about how to write a new plugin.  The first is how to register your interest in different events.\n\nAll plugins should use this basic template:\n\n```javascript\n//requires here\nconst _ = require('lodash'); //for example\n\nmodule.exports = (function(){\n\n\tlet bot;\n\n\t//your functions here\n\n\tfunction doSomethingCool (message, channel, user) {\n\t\t//\n\t}\n\n\treturn function init (_bot) {\n\t\tbot = _bot;\n\n\t\t//any startup steps here\n\n\t\t//one of these for each pattern you want to register\n\t\tbot.register({\n\t\t\tpattern: {},\n\t\t\tf: doSomethingCool,\n\t\t\ttype: 'OUT',\n\t\t\teventType: 'message',\n\t\t\tpriority: 1000,\n\t\t\tflags: {}\n\t\t});\n\n\t\t//more pattern registrations\n\t});\n})();\n```\n\nThe `_bot` parameter passed to the `init` method contains many helpful resources and functions that will be documented more as time goes on.  One of the big ones is `bot.redis` which can be used to persist data.  Look at the ops plugin for a relatively simple example of how to use redis, although a lot of plugins use it so look around if you need more examples.\n\n## Pattern registration\n\nThere are currently two different event types (although this will almost certainly grow soon): `message` (the default) and `presenceChange`.\n\nThere are currently two different types of registrations, `IN` and `OUT`.  `IN` is for when you just want to take in input, but don't expect to send any response. Logging would be a good example of a valid use of `IN`. `OUT` signifies that you want to send a response.\n\nYou can use multiple pattern registrations pointing to the same function if you want to allow multiple inputs to use the same processing.\n\nTo register your plugins interest in a pattern, call `bot.register` and pass an object with the following keys. If you want to pass the default value for a key, you can omit that key entirely.\n\n```javascript\n{\n\t//required, see more information below\n\tpattern: {},\n\n\t//required, a reference to the function that you want called\n\t//when a message comes through that matches this pattern\n\tf: functionName,\n\n\t//required, either 'OUT' or 'IN' - you must use 'OUT'\n\t//if you intend to send responses\n\ttype: 'OUT',\n\n\t//defaults to 'message', currently can be either 'message' or\n\t//'presenceChange' - this value determines what is sent to the function\n\teventType: 'message',\n\n\t//defaults to 1000 - can be used to make sure that certain\n\t//registrations are executed before or after other patterns,\n\t//even in other plugins, relative to the type.  'IN' patterns\n\t//always execute before 'OUT' patterns.\n\tpriority: 1000,\n\n\t//an object - defaults to an empty object.  Setting keys inside of\n\t//this object to true can alter execution - see more information below\n\tflags: {}\n}\n```\n\n### Pattern Options\n\nCurrently, pattern objects can use the following keys, which can be combined.  Pattern matching works on exclusion, patterns are considered matched until they encounter a rule that fails.\n\nAn empty pattern object `{}` matches everything.\n\nYou can use the `startsWith` pattern to match any message that starts with the string, for example: `{startsWith: '%'}` would match any trimmed string that starts with a `%` character.\n\nYou can use the `command` pattern to match any message that the first item in the message split on spaces matches the supplied pattern.  For example: `{command: '!myCommand'}` will match any message that starts with `!myCommand`.  The big difference between this and `startsWith` is that `startsWith` can have other input right after it, where `command` requires other input after the command to be separated by a space.\n\nYou can use the `regex` pattern to match any complex regular expression.  For example `{regex: new RegExp('!tail [0-9]+$')` matches `!tail` followed by a space and any number and nothing else.  You can also use regular expression literals.\n\n### Flags\n\nTwo flags are currently considered:\n\n`{stop: true}` will stop execution of the current pattern and no other matching patterns will be executed.  Use this with the priority option.\n\n`{ignorePaused: true}` will allow the pattern to be executed even if the bot is paused in the current channel.  You generally should not use this flag.\n\n## Pattern Execution Function API\n\nFor the different eventTypes, there are different arguments that will be passed to the registered function:\n\n### eventType `message`\n\nFor eventType `message`, your function should use the signature `function (message, channel, user)`. All three arguments are objects (or classes).\n\n#### `message` argument\n\n`message` is an object that contains the following keys (at least):\n\n`message.rawText` is the exact input that was given.  Many times this has extra stuff in it from slack - user and channel mentions are encoded in slack's format for instance.\n\n`message.text` is what you probably want to do most of your processing with.  The input has been trimmed, and channels have been replaced with simple names, like `#general` as you probably expect.  `message.text` will always be defined, but could in certain circumstances be empty.\n\n`message.parts` is `message.text` split on spaces, making it easy for you to destructure into your own parameters.\n\n`message.isDirect` is a boolean flag that indicates if the message starts with a mention of the bot.\n\n`message.channel` the channel id the message was sent to, same as `channel.id`\n\n#### `channel` argument\n\n`channel` is defined by the slack-client module.  These are the main things you need from it:\n\n`channel.send()` is a method that takes a string that will be sent to that channel.\n\n`channel.name` is the name (not including a `#`) of the channel\n\n`channel.id` is the internal slack id of the channel.\n\n#### `user` argument\n\n`user` is defined by the slack-client module.\n\n`user.name` is the users username.\n\n`user.id` is the users internal slack id.\n\n### eventType `presenceChange`\n\nFor the eventType `presenceChange`, your function should use the signature: `function (user, presence)`\n\n`user` is the same as for `message` event type above.  `presence` is a string that indicates that users new status.\n\n> Note: more eventTypes will likely be included in the future.\n\n\n## Documentation todo:\n\nHere are some other documentation points I hope to expand on in the future, but you can at least know they exist and can maybe look up how they work for yourself:\n\n- `bot.botName` the username of the bot\n- `bot.id` the slack id of the bot\n- `bot.self` the slack user object of the bot\n- `bot.redis` the redis connection\n- `bot.startTime` the timestamp of when the instance started running\n- `bot.setCooldown(key, timeoutInSeconds)` key can be an array of keys\n- `bot.isOnCooldown(key, callback)` key can be an array of keys ~ callback should be (err, data)\n- `bot.isChannelPaused(channel)` the channel object, not the channel name\n- `bot.ops.isOp(user, callback)` the user object, not the user name ~ callback should be (err, data) ~ data = 1 for is an op\n- `bot.makeMention(user)` takes a user object and returns a string which will make the output a mention of that user\n- `bot.getUserForMention(input)` takes a mention like `<@Uxxxxxx>` and gives you a user object\n- `bot.getChannelGroupOrDMByID(input)` takes an id and gives you the channel object -\n- `bot.getUserByID(id)` takes a user id, gives a user object\n- `bot.getUserByName(name)` takes the username string, gives a user object\n", "meta": {"content_hash": "05142cd24312037e0dc0f55d3055f685", "timestamp": "", "source": "github", "line_count": 213, "max_line_length": 449, "avg_line_length": 50.48826291079812, "alnum_prop": 0.7540450065092059, "repo_name": "iwburns/watney", "id": "cf7ff2a1ca8cf0e262e57fb4a15b1a50e9dc05c8", "size": "10774", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "dev-help.md", "mode": "33188", "license": "mit", "language": [{"name": "JavaScript", "bytes": "67491"}, {"name": "Shell", "bytes": "776"}]}}
{"text": "package com.bgh.myopeninvoice.api.domain.dto;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport lombok.Data;\n\nimport javax.validation.constraints.NotNull;\nimport java.time.ZonedDateTime;\n\n@JsonInclude(JsonInclude.Include.NON_NULL)\n@Data\npublic class ReportDTO implements java.io.Serializable {\n\n  private Integer reportId;\n\n  @NotNull\n  private Integer invoiceId;\n\n  @JsonIgnoreProperties(\"content\")\n  private ContentDTO content;\n\n    private ZonedDateTime createdAt;\n\n  @NotNull\n  private String reportName;\n}\n", "meta": {"content_hash": "14b0168ef9e6318a6db7d6bbf50fa303", "timestamp": "", "source": "github", "line_count": 26, "max_line_length": 61, "avg_line_length": 22.46153846153846, "alnum_prop": 0.8065068493150684, "repo_name": "bcavlin/my-open-invoice", "id": "b286e65957feaa93f87ff6febe96f39913a7d4ac", "size": "584", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "invoice-server-api/src/main/java/com/bgh/myopeninvoice/api/domain/dto/ReportDTO.java", "mode": "33188", "license": "apache-2.0", "language": [{"name": "Java", "bytes": "391058"}, {"name": "Shell", "bytes": "2590"}]}}
{"text": "require('ti-mocha');\n\nvar should = require('should');\nvar utils = require('test_utils');\n\nmodule.exports = function() {\n  var titouchdb = require('com.obscure.titouchdb'),\n      manager = titouchdb.databaseManager;\n  \n  describe('database manager', function() {\n\n    before(function() {\n      utils.delete_nonsystem_databases(manager);\n    });\n\n    it('must exist', function() {\n      should.exist(manager);\n      should(manager).have.property('error', null);\n    });\n    \n    it('must provide the default db directory', function() {\n      should(manager).have.property('defaultDirectory');\n      manager.defaultDirectory.should.be.ok;\n    });\n    \n    it('must provide the current db directory', function() {\n      should(manager).have.property('directory');\n      manager.directory.should.be.ok;\n      var dir = Ti.Filesystem.getFile(manager.directory);\n      dir.exists().should.be.ok;\n      dir.isDirectory().should.be.ok;\n      dir.writable.should.be.ok;\n    });\n    \n    it('must validate database names', function() {\n      should(manager.isValidDatabaseName).be.a.Function;\n      manager.isValidDatabaseName('abc123').should.be.true;\n      manager.isValidDatabaseName('a').should.be.true;\n      manager.isValidDatabaseName('_a').should.be.false;\n      manager.isValidDatabaseName('a_').should.be.true;\n      manager.isValidDatabaseName('%20foobar').should.be.false;\n      manager.isValidDatabaseName('001').should.be.false;\n      manager.isValidDatabaseName('FOO').should.be.false;\n    });\n    \n    it('must provide all database names', function() {\n      should(manager).have.property('allDatabaseNames');\n      manager.allDatabaseNames.should.be.an.Array;\n      manager.allDatabaseNames.should.have.a.lengthOf(0);\n    });\n    \n    it('must have a close method', function() {\n      should(manager.close).be.a.Function;\n      // TODO actually close?\n    });\n    \n    it('must create a database given a new name', function() {\n      should(manager.getDatabase).be.a.Function;\n      var db = manager.getDatabase('test002_1');\n      should.exist(db);\n      should(manager).have.property('error', null);\n    });\n    \n    it('must not return a database with a new name', function() {\n      should(manager.getExistingDatabase).be.a.Function;\n      var db = manager.getExistingDatabase('test_does_not_exist');\n      should.not.exist(db);\n      should(manager.error).be.an.Object\n    });\n    \n    it('must return a previously created database', function() {\n      var db = manager.getExistingDatabase('test002_1');\n      should.exist(db);\n      should(manager.error).eql(null);\n    });\n    \n    it('must return the same db instance each time', function() {\n      var db1 = manager.getDatabase('test002_2');\n      var db2 = manager.getDatabase('test002_2');\n      if (db1 !== db2) {\n        throw new Error('did not return the same database instance');\n      }\n    });\n    \n    if (Ti.Platform.osname === 'iphone' || Ti.Platform.osname === 'ipad') {\n      it('must install a prebuilt db', function() {\n        var basedir = Ti.Filesystem.getFile(Ti.Filesystem.resourcesDirectory, 'assets', 'CouchbaseLite').path;\n        var dbfile = [basedir, 'elements.cblite'].join(Ti.Filesystem.separator);\n        var attdir = [basedir, 'elements attachments'].join(Ti.Filesystem.separator);\n        var installresult = manager.replaceDatabase('elements', dbfile, attdir);\n        installresult.should.be.ok;\n        \n        var eldb = manager.getExistingDatabase('elements');\n        should.exist(eldb);\n        \n        var doc = eldb.getDocument('Al');\n        should.exist(doc);\n        doc.documentID.should.eql('Al');\n        \n        var att = doc.currentRevision.getAttachment('image.jpg');\n        should.exist(att);\n      });\n      \n      it('must fail on bad database install paths', function() {\n        var installresult = manager.replaceDatabase('failure', '/foo/bar/baz', '/bing/bang/boom');\n        installresult.should.not.be.ok;\n        should(manager.error).should.be.an.Object;\n      });\n    }\n  });\n};\n", "meta": {"content_hash": "42feaf2039dcbce67facf1a4fbe875d7", "timestamp": "", "source": "github", "line_count": 111, "max_line_length": 110, "avg_line_length": 36.13513513513514, "alnum_prop": 0.6360009972575418, "repo_name": "Tipasha/DivinityCraft", "id": "273b1a9c82f129d265ad5a8f5951f086ed93843d", "size": "4011", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "modules/android/com.obscure.titouchdb/1.0.1/example/002_databaseManager.js", "mode": "33188", "license": "apache-2.0", "language": [{"name": "C++", "bytes": "8388"}, {"name": "JavaScript", "bytes": "524166"}, {"name": "Objective-C", "bytes": "401192"}, {"name": "Python", "bytes": "5251"}, {"name": "Shell", "bytes": "370"}]}}
{"text": "double\tinterpolate(double const a, double const b, double const f)\n{\n\treturn ((b - a) * f + a);\n}\n", "meta": {"content_hash": "50796516fb801523c7f6164adac0e5a0", "timestamp": "", "source": "github", "line_count": 4, "max_line_length": 66, "avg_line_length": 24.5, "alnum_prop": 0.6428571428571429, "repo_name": "Shakadak/libumlx", "id": "9ddd6a164394df9dc0a390e6329e7429d99160eb", "size": "98", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "src/math/interpolate.c", "mode": "33188", "license": "mit", "language": [{"name": "C", "bytes": "21437"}, {"name": "Makefile", "bytes": "2689"}]}}
{"text": "class TestManager : public QObject\n{\npublic:\n    TestManager(const QString &qtSrcDir);\n\n    QStringList tests();\n    QString testVersion(const QString &test);\n\n    void runAllTests();\nsignals:\n    void testCompleted(const QString &test, TestRunResult result);\n\nprivate:\n    QString m_testsPath;\n\n};\n\n#endif // TESTMANAGER_H\n", "meta": {"content_hash": "598bdb84e2a3fc76bf97e1ba012ed0ad", "timestamp": "", "source": "github", "line_count": 18, "max_line_length": 66, "avg_line_length": 18.0, "alnum_prop": 0.7129629629629629, "repo_name": "msorvig/historical-integration", "id": "73a89a8c9b94c1a10b281b6a25f5c099a7f756cd", "size": "413", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "src/testmanager.h", "mode": "33188", "license": "mit", "language": [{"name": "C", "bytes": "46234"}, {"name": "C++", "bytes": "131668"}, {"name": "JavaScript", "bytes": "572979"}]}}
{"text": "<?php\n\n\n\n/**\n * Returns the path of a filesystem identifier\n * \n * @package Filter\n */\nclass RPC_Filter_Path implements RPC_Filter\n{\n\t\n\t/**\n\t * Returns the path part of the given string\n\t * \n\t * @param mixed $value\n\t * \n\t * @return mixed\n\t */\n\tpublic function filter( $value )\n\t{\n\t\treturn realpath( (string) $value );\n\t}\n\t\n}\n\n?>\n", "meta": {"content_hash": "61a721dc2eefabd67c1859c921d984a6", "timestamp": "", "source": "github", "line_count": 27, "max_line_length": 46, "avg_line_length": 12.185185185185185, "alnum_prop": 0.60790273556231, "repo_name": "deviousdodo/RPC", "id": "f545d2b03fecd7d9f3b0947984c39bc1505eec51", "size": "493", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "Filter/Path.php", "mode": "33188", "license": "bsd-3-clause", "language": [{"name": "PHP", "bytes": "286124"}]}}
{"text": "export const input = {\n  type: {\n    type: String,\n    default: 'date'\n  },\n  min: {\n    type: String,\n    default: ''\n  },\n  max: {\n    type: String,\n    default: ''\n  },\n  format: String,\n  noClear: Boolean,\n  clearLabel: {\n    type: String,\n    default: 'Clear'\n  },\n  okLabel: {\n    type: String,\n    default: 'Set'\n  },\n  cancelLabel: {\n    type: String,\n    default: 'Cancel'\n  },\n  defaultSelection: String,\n  label: String,\n  placeholder: String,\n  staticLabel: String,\n  readonly: Boolean,\n  disable: Boolean\n}\n\nexport const inline = {\n  value: {\n    type: String,\n    required: true\n  },\n  type: {\n    type: String,\n    default: 'date',\n    validator (value) {\n      return ['date', 'time', 'datetime'].includes(value)\n    }\n  },\n  min: {\n    type: String,\n    default: ''\n  },\n  max: {\n    type: String,\n    default: ''\n  },\n  readonly: Boolean,\n  disable: Boolean\n}\n", "meta": {"content_hash": "4f56e584c3152f5a0aad16358701fcca", "timestamp": "", "source": "github", "line_count": 58, "max_line_length": 57, "avg_line_length": 15.137931034482758, "alnum_prop": 0.5501138952164009, "repo_name": "CookieJon/quasar", "id": "5a681901d82ac7e9f824b13007e2756e60865ba9", "size": "878", "binary": false, "copies": "1", "ref": "refs/heads/dev", "path": "src/vue-components/datetime/datetime-props.js", "mode": "33188", "license": "mit", "language": [{"name": "CSS", "bytes": "222855"}, {"name": "HTML", "bytes": "529"}, {"name": "JavaScript", "bytes": "97341"}, {"name": "Shell", "bytes": "602"}, {"name": "Vue", "bytes": "522244"}]}}
{"text": "ACCEPTED\n\n#### According to\nThe Catalogue of Life, 3rd January 2011\n\n#### Published in\nnull\n\n#### Original name\nnull\n\n### Remarks\nnull", "meta": {"content_hash": "a0ebbdf194a47fc60e45e6a131cdfbe9", "timestamp": "", "source": "github", "line_count": 13, "max_line_length": 39, "avg_line_length": 10.307692307692308, "alnum_prop": 0.6940298507462687, "repo_name": "mdoering/backbone", "id": "f2af1ef029d2c81b2cb9f1245c2555b8f5c71e1c", "size": "184", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "life/Plantae/Rhodophyta/Florideophyceae/Ceramiales/Ceramiaceae/Microcladia/Microcladia gelidii/README.md", "mode": "33188", "license": "apache-2.0", "language": []}}
{"text": "package info.jabara.iyashino_kgo.web.ui;\n\nimport info.jabara.iyashino_kgo.web.ui.page.SlideShowPage;\nimport jabara.general.ArgUtil;\nimport jabara.wicket.MarkupIdForceOutputer;\n\nimport org.apache.wicket.Page;\nimport org.apache.wicket.core.util.resource.UrlResourceStream;\nimport org.apache.wicket.guice.GuiceComponentInjector;\nimport org.apache.wicket.protocol.http.WebApplication;\nimport org.apache.wicket.request.resource.IResource;\nimport org.apache.wicket.request.resource.ResourceReference;\nimport org.apache.wicket.request.resource.ResourceStreamResource;\nimport org.apache.wicket.request.resource.SharedResourceReference;\nimport org.apache.wicket.util.IProvider;\nimport org.apache.wicket.util.time.Duration;\n\nimport com.google.inject.Injector;\n\n/**\n *\n */\npublic class WicketApplication extends WebApplication {\n\n    private static final String       ENC = \"UTF-8\";   //$NON-NLS-1$\n\n    private final IProvider<Injector> injectorProvider;\n\n    /**\n     * @param pInjectorProvider Guice\u306e{@link Injector}\u3092\u4f9b\u7d66\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8. DI\u8a2d\u5b9a\u306b\u4f7f\u7528\u3057\u307e\u3059.\n     */\n    public WicketApplication(final IProvider<Injector> pInjectorProvider) {\n        ArgUtil.checkNull(pInjectorProvider, \"pInjectorProvider\"); //$NON-NLS-1$\n        this.injectorProvider = pInjectorProvider;\n    }\n\n    /**\n     * @see org.apache.wicket.Application#getHomePage()\n     */\n    @Override\n    public Class<? extends Page> getHomePage() {\n        return SlideShowPage.class;\n    }\n\n    /**\n     * @return -\n     */\n    public Injector getInjector() {\n        return this.injectorProvider.get();\n    }\n\n    /**\n     * @param pResource -\n     * @return -\n     */\n    @SuppressWarnings(\"static-method\")\n    public ResourceReference getSharedResourceReference(final Resource pResource) {\n        ArgUtil.checkNull(pResource, \"pResource\"); //$NON-NLS-1$\n        return new SharedResourceReference(pResource.getName());\n    }\n\n    /**\n     * @see org.apache.wicket.protocol.http.WebApplication#init()\n     */\n    @Override\n    protected void init() {\n        super.init();\n\n        mountResources();\n        initializeEncoding();\n        initializeInjection();\n        initializeOther();\n    }\n\n    private void initializeEncoding() {\n        getMarkupSettings().setDefaultMarkupEncoding(ENC);\n        getRequestCycleSettings().setResponseRequestEncoding(getMarkupSettings().getDefaultMarkupEncoding());\n    }\n\n    private void initializeInjection() {\n        getComponentInstantiationListeners().add(new GuiceComponentInjector(this, this.injectorProvider.get()));\n    }\n\n    private void initializeOther() {\n        getComponentInstantiationListeners().add(new MarkupIdForceOutputer());\n    }\n\n    private void mountResource(final Resource pResource, final String pFilePath, final Duration pCacheDuration) {\n        mountResource(pResource.getName(), new ResourceReference(pResource.getName()) {\n            private static final long serialVersionUID = -8982729375012083247L;\n\n            @SuppressWarnings(\"resource\")\n            @Override\n            public IResource getResource() {\n                return new ResourceStreamResource(new UrlResourceStream(WicketApplication.class.getResource(pFilePath))) //\n                        .setCacheDuration(pCacheDuration) //\n                ;\n            }\n        });\n    }\n\n    @SuppressWarnings({ \"nls\" })\n    private void mountResources() {\n        mountResource(Resource.BACK, \"brickwall.png\", Duration.days(10));\n        mountResource(Resource.FAVICON, \"logo.png\", Duration.days(10));\n    }\n\n    /**\n     * @return -\n     */\n    public static WicketApplication get() {\n        return (WicketApplication) WebApplication.get();\n    }\n\n    /**\n     * @author jabaraster\n     */\n    public enum Resource {\n        /**\n         * \n         */\n        BACK(\"back\"), //$NON-NLS-1$\n\n        /**\n         * \n         */\n        FAVICON(\"favicon\"), //$NON-NLS-1$\n\n        ;\n\n        private final String name;\n\n        Resource(final String pName) {\n            this.name = pName;\n        }\n\n        /**\n         * @return -\n         */\n        public String getName() {\n            return this.name;\n        }\n    }\n}\n", "meta": {"content_hash": "5b7c78d38d688b8a51fb12f2a5a0861f", "timestamp": "", "source": "github", "line_count": 144, "max_line_length": 123, "avg_line_length": 28.52777777777778, "alnum_prop": 0.6480038948393378, "repo_name": "dapura/IyashinoKgo", "id": "c8d22046462a31196a39400ebe21ffc4b78e70d4", "size": "4148", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "src/main/java/info/jabara/iyashino_kgo/web/ui/WicketApplication.java", "mode": "33188", "license": "bsd-3-clause", "language": [{"name": "CSS", "bytes": "14066"}, {"name": "Java", "bytes": "45298"}, {"name": "JavaScript", "bytes": "167265"}]}}
{"text": "define(['marionette',\n\t'./spinnerBodyTemplate.hbs',\n\t'rup.spinner'], function(Marionette, SpinnerBodyTemplate){\n\n\tvar SpinnerBodyView = Marionette.LayoutView.extend({\n\t\ttemplate: SpinnerBodyTemplate\n\n\t});\n\n\treturn SpinnerBodyView;\n});\n", "meta": {"content_hash": "2b16758cad890acca16726cab91a606a", "timestamp": "", "source": "github", "line_count": 11, "max_line_length": 59, "avg_line_length": 21.363636363636363, "alnum_prop": 0.7531914893617021, "repo_name": "UDA-EJIE/uda-rup", "id": "f74c357173b0416662e0de2bf61de4043e41a5bc", "size": "235", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "demo/app/components/spinner/spinnerBodyView.js", "mode": "33188", "license": "mit", "language": []}}
{"text": "<div class=\"icon-link\">\n    <a href=\"{{include.adress}}/{{include.username}}\"> \n        <img src=\"{{ site.baseurl | append:\"/assets/\" | append: include.icon }}\"/>   \n        <div class=\"ltext\">{{include.username}}</div>        \n    </a>\n</div>", "meta": {"content_hash": "11f24ce3c8bdf31b421f53783850c80e", "timestamp": "", "source": "github", "line_count": 6, "max_line_length": 85, "avg_line_length": 40.5, "alnum_prop": 0.5349794238683128, "repo_name": "hatbkwds/hatbkwds.github.io", "id": "faf458b12015d99780940b1b456b9a138e5aff49", "size": "243", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "_includes/icon-site.html", "mode": "33188", "license": "apache-2.0", "language": [{"name": "CSS", "bytes": "25889"}, {"name": "HTML", "bytes": "81762"}]}}
{"text": "package com.realtor.rets.compliance.tests;\n\n\n/**\n * Extends the ValidateCompact to validate search responses\n * @author pobrien\n */\npublic class ValidateCompactSearch extends ValidateCompact {\n  /**\n   * Creates a new instance of ValidateCompact\n   */\n  public ValidateCompactSearch() {\n     super();\n    setDocTypeLocation(\"RETSCOMPACTSEARCH-20030710.dtd\");\n  }\n\n}", "meta": {"content_hash": "53e3815c3974d9268051ffebca73506e", "timestamp": "", "source": "github", "line_count": 17, "max_line_length": 60, "avg_line_length": 21.470588235294116, "alnum_prop": 0.7315068493150685, "repo_name": "RESO-RETS/RESO-Server-Compliance-Tester", "id": "024403ede3e200c1c9ff0ed9ba1e275d5fc0a0cc", "size": "365", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "src/com/realtor/rets/compliance/tests/ValidateCompactSearch.java", "mode": "33188", "license": "apache-2.0", "language": [{"name": "Batchfile", "bytes": "442"}, {"name": "HTML", "bytes": "706"}, {"name": "Java", "bytes": "651352"}]}}
{"text": "package mod.learn;\n\nimport cpw.mods.fml.common.Mod;\nimport cpw.mods.fml.common.SidedProxy;\nimport cpw.mods.fml.common.event.FMLInitializationEvent;\nimport cpw.mods.fml.common.event.FMLPostInitializationEvent;\nimport cpw.mods.fml.common.event.FMLPreInitializationEvent;\n\nimport mod.learn.misc.LearnRef;\nimport mod.learn.proxy.IProxy;\nimport mod.learn.utils.Debug;\n\n\n@Mod(modid = LearnRef.MODID, name = LearnRef.MODNAME, version = LearnRef.MODVER,\n        acceptedMinecraftVersions = LearnRef.MC_VER)\npublic class Learn {\n\n    @Mod.Instance(LearnRef.MODID)\n    public static Learn instance;\n\n    @SidedProxy(modId = LearnRef.MODID, clientSide = \"mod.learn.proxy.ClientProxy\",\n            serverSide = \"mod.learn.proxy.ServerProxy\")\n    public static IProxy proxy;\n\n    @Mod.EventHandler\n    public void preinit(FMLPreInitializationEvent event) {\n        Debug.setLogger(event.getModLog());\n\n        LearnItems.init();\n        LearnBlocks.init();\n    }\n\n    @Mod.EventHandler\n    public void init(FMLInitializationEvent event) {\n        LearnTabs.init();\n\n        proxy.registerBlockRenderers();\n        proxy.registerTileEntityRenderers();\n    }\n\n    @Mod.EventHandler\n    public void postinit(FMLPostInitializationEvent event) {\n\n    }\n}\n", "meta": {"content_hash": "8bc463414e6183aa5c175db604d31e79", "timestamp": "", "source": "github", "line_count": 45, "max_line_length": 83, "avg_line_length": 27.488888888888887, "alnum_prop": 0.7235246564268392, "repo_name": "Glassmaker/Learn", "id": "6cb1d9f9f200c2107e4ffb3734096c5f113490bc", "size": "1237", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "src/main/java/mod/learn/Learn.java", "mode": "33188", "license": "mit", "language": [{"name": "Java", "bytes": "42152"}]}}
{"text": "\nvar Class = use('/Lib/Class');\nvar Database = use('/Lib/Database');\n\n/**\n * Generates Models for the Database.\n *\n * @author      Kevin Kragenbrink <kevin@writh.net>\n * @version     0.1.0\n * @subpackage  Lib\n */\nvar Model = function(table, model) {\n    var m = new model;\n    var schema = {};\n    var options = {instanceMethods : {}};\n\n    for (var i in m) {\n        if (m.hasOwnProperty(i)) {\n            if (typeof m[i] === 'function') {\n                options.instanceMethods[i] = m[i];\n            }\n            else {\n                schema[i] = m[i];\n            }\n        }\n    }\n\n    var definition = Database.define(table, schema, options);\n\n    definition.isInstance = function(i) {\n        return (i && i.__factory && i.__factory.name && i.__factory.name === table);\n    };\n\n    return definition;\n};\nmodule.exports                              = Model;", "meta": {"content_hash": "ea2f5ad36919df4e82c92702e812fb19", "timestamp": "", "source": "github", "line_count": 36, "max_line_length": 84, "avg_line_length": 24.055555555555557, "alnum_prop": 0.5069284064665127, "repo_name": "kkragenbrink/NodeBot", "id": "5147f1a2e3d79929d7eea71a179b83579a273c7a", "size": "2391", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "Lib/Model.js", "mode": "33188", "license": "mit", "language": [{"name": "JavaScript", "bytes": "172428"}]}}
{"text": "package protopluginv2\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"sort\"\n\n\t\"github.com/golang/protobuf/protoc-gen-go/plugin\"\n\t\"go.uber.org/multierr\"\n)\n\nvar errNoFileName = errors.New(\"no name on CodeGeneratorResponse_File\")\n\ntype multiRunner struct {\n\trunners []Runner\n}\n\nfunc newMultiRunner(runners ...Runner) *multiRunner {\n\treturn &multiRunner{runners: runners}\n}\n\nfunc (m *multiRunner) Run(request *plugin_go.CodeGeneratorRequest) *plugin_go.CodeGeneratorResponse {\n\tnameToFile := make(map[string]*plugin_go.CodeGeneratorResponse_File)\n\tvar responseErr error\n\tfor _, runner := range m.runners {\n\t\tresponse := runner.Run(request)\n\t\tif responseErrString := response.GetError(); responseErrString != \"\" {\n\t\t\tresponseErr = multierr.Append(responseErr, errors.New(responseErrString))\n\t\t\tcontinue\n\t\t}\n\t\tfor _, file := range response.GetFile() {\n\t\t\tname := file.GetName()\n\t\t\tif name == \"\" {\n\t\t\t\treturn newResponseError(errNoFileName)\n\t\t\t}\n\t\t\tif _, ok := nameToFile[name]; ok {\n\t\t\t\treturn newResponseError(newErrorDuplicateFileName(name))\n\t\t\t}\n\t\t\tnameToFile[name] = file\n\t\t}\n\t}\n\tif responseErr != nil {\n\t\treturn newResponseError(responseErr)\n\t}\n\tfiles := make([]*plugin_go.CodeGeneratorResponse_File, 0, len(nameToFile))\n\tfor _, file := range nameToFile {\n\t\tfiles = append(files, file)\n\t}\n\tsort.Slice(files, func(i int, j int) bool { return files[i].GetName() < files[j].GetName() })\n\treturn newResponseFiles(files)\n}\n\nfunc newErrorDuplicateFileName(name string) error {\n\treturn fmt.Errorf(\"duplicate name for CodeGeneratorResponse_File: %s\", name)\n}\n", "meta": {"content_hash": "663e58c79faaea058c979f5c32238467", "timestamp": "", "source": "github", "line_count": 55, "max_line_length": 101, "avg_line_length": 27.836363636363636, "alnum_prop": 0.7184846505551927, "repo_name": "yarpc/yarpc-go", "id": "df982fe8df6e26b76381e8258fd788decf7807fc", "size": "2653", "binary": false, "copies": "1", "ref": "refs/heads/dev", "path": "internal/protoplugin-v2/multi_runner.go", "mode": "33188", "license": "mit", "language": [{"name": "Go", "bytes": "4127290"}, {"name": "Makefile", "bytes": "19385"}, {"name": "Ragel", "bytes": "3106"}, {"name": "Shell", "bytes": "18962"}, {"name": "Thrift", "bytes": "35312"}]}}
{"text": "var express = require('express');\nvar app = express();\n\n// Server static files\napp.use('/public', express.static('public'));\napp.use('/vendor', express.static('app/vendor'));\n\n// Set jade as our renderer\napp.set('view engine', 'jade');\napp.set('views', __dirname + '/app/views');\n\n// Router\nvar router = require('./app/routes/default.js');\napp.use(router);\n\n// Register server\nvar server = app.listen(3000, function() {\n\tvar host = server.address().address;\n\tvar port = server.address().port;\n\t\n\tconsole.log(\"App listening at http://%s:%s\", host, port);\n});\n", "meta": {"content_hash": "e149dd46379551b2ae202b0d3e6b677c", "timestamp": "", "source": "github", "line_count": 22, "max_line_length": 58, "avg_line_length": 25.363636363636363, "alnum_prop": 0.6630824372759857, "repo_name": "jvhoven/Fitness", "id": "ba86b2f1676db7bda67ec615652b768c6e945529", "size": "558", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "server.js", "mode": "33188", "license": "mit", "language": [{"name": "CSS", "bytes": "2077"}, {"name": "HTML", "bytes": "5585"}, {"name": "JavaScript", "bytes": "5441"}]}}
{"text": "\n\npackage me.infuzion.chat.server.network;\n\nimport infuzion.chat.common.network.packet.ClientHelloPacket;\nimport infuzion.chat.common.network.packet.CommandPacket;\nimport infuzion.chat.common.network.packet.MessagePacket;\nimport infuzion.chat.common.network.packet.NetworkPacket;\nimport me.infuzion.chat.server.ChatServer;\nimport me.infuzion.chat.server.api.IChatClient;\nimport me.infuzion.chat.server.api.network.NetworkSource;\nimport me.infuzion.chat.server.api.network.PacketRouter;\nimport me.infuzion.chat.server.network.handler.CommandPacketHandler;\nimport me.infuzion.chat.server.network.handler.MessagePacketHandler;\n\nimport java.nio.ByteBuffer;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class NetworkManager {\n    private final ChatServer server;\n    private final List<NetworkSource> sources;\n    private PacketRouter packetRouter;\n\n    public NetworkManager(ChatServer server) {\n        this(server, new ArrayList<>());\n    }\n\n    public NetworkManager(ChatServer server, List<NetworkSource> sources) {\n        this.server = server;\n        this.sources = sources;\n    }\n\n    public void addSource(NetworkSource... sourcesToAdd) {\n        sources.addAll(Arrays.asList(sourcesToAdd));\n    }\n\n    public PacketRouter getPacketRouter() {\n        return packetRouter;\n    }\n\n    public void init() {\n        sources.forEach(NetworkSource::init);\n    }\n\n    public void stop() throws Exception {\n        for (NetworkSource source : sources) {\n            source.stop();\n        }\n    }\n\n    public void reload() {\n        packetRouter = server.getPacketRouter();\n        CommandPacketHandler commandPacketHandler =\n                new CommandPacketHandler(server.getCommandManager(), server.getEventManager());\n        MessagePacketHandler messagePacketHandler =\n                new MessagePacketHandler(server.getChatRoomManager(), server.getEventManager());\n\n        packetRouter.registerNetworkPacketHandler(CommandPacket.class, commandPacketHandler::handle);\n        packetRouter.registerNetworkPacketHandler(MessagePacket.class, messagePacketHandler::handle);\n        packetRouter.registerNetworkPacketHandler(ClientHelloPacket.class, ((packet, client) -> {\n            System.out.println(packet.getUsername() + \" has joined!\");\n\n        }));\n        sources.forEach(NetworkSource::reload);\n    }\n\n    public void addClient(IChatClient client) {\n        System.out.println(\"adding client\");\n        server.getConnectedClients().add(client);\n        client.setChatRoom(server.getChatRoomManager().getChatRooms().get(0));\n        server.getChatRoomManager().addClient(client);\n    }\n\n    public void removeClient(IChatClient client) {\n        server.getConnectedClients().remove(client);\n        client.getChatRoom().removeClient(client);\n    }\n\n    public void enqueue(NetworkPacket message, IChatClient client, Class<? extends NetworkSource> source) {\n        server.enqueue(message, client, source);\n    }\n\n    public void enqueue(ByteBuffer message, IChatClient client, Class<? extends NetworkSource> source) {\n        this.enqueue(packetRouter.parseBuffer(message), client, source);\n    }\n}\n", "meta": {"content_hash": "8d2df956ab3934bb6df09878e60b43ad", "timestamp": "", "source": "github", "line_count": 88, "max_line_length": 107, "avg_line_length": 35.75, "alnum_prop": 0.7215511760966307, "repo_name": "Infuzion/Chat", "id": "b9d917fd32b1eeb1a74eb741d745c25ad5254635", "size": "3746", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "server/src/main/java/me/infuzion/chat/server/network/NetworkManager.java", "mode": "33188", "license": "apache-2.0", "language": [{"name": "CSS", "bytes": "808"}, {"name": "Java", "bytes": "172281"}]}}
{"text": "body {\nbackground-image: url(\"/images/background.png\");\ntext-align:center;\nfont-family:\"Josefin Sans\", \"Bitstream Vera Sans\", \"Verdana\";\nfont-size: 64px;\ncolor: #BBB;\n}\n\na  {\n\tdisplay:block;\n\tcolor: #BBB;\n\tpadding:11px;\n\ttext-decoration: none;\n\tborder-radius: 15px;\n}\n\na:hover {\n\tborder:\t1px double #AAA;\n\tborder-radius: 15px;\n\tdisplay:block;\n\tpadding:10px;\n\tbackground-color: rgba(0,0,0,0.35);\n\tcolor: lightgrey;\n/*text-decoration: underline;*/\n}\n\ntable {\n\tmargin-left: auto;\n\tmargin-right: auto;\n}\n\n#container \n{\n\tborder-radius: 15px;\n\tmargin-left:\tauto;\n\tmargin-right:\tauto;\t\n\tdisplay: inline-block;\n\ttext-align: center;\n\tbackground-color: rgba(96,96,96,0.35);\n\tpadding:\t20px 30px 20px 30px;\n\tborder:\t1px double #AAA;\n}\n", "meta": {"content_hash": "1c1cc8c3bace3ef79f90ce9ca6993629", "timestamp": "", "source": "github", "line_count": 42, "max_line_length": 61, "avg_line_length": 17.214285714285715, "alnum_prop": 0.69432918395574, "repo_name": "Wollw/RadioDance", "id": "75406b679280ada29b2faf4e25cfb5899c939926", "size": "723", "binary": false, "copies": "1", "ref": "refs/heads/master", "path": "public/css/style.css", "mode": "33188", "license": "mit", "language": [{"name": "JavaScript", "bytes": "8371"}, {"name": "Perl", "bytes": "3838"}]}}
